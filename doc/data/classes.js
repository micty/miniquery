var __classes__ = [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "数组工具", "alias": "MiniQuery.Array", "id": 1, "isStatic": true, "see": [], "methods": [{ "type": "Array", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "对数组进行迭代，即对数组中的每个元素执行指定的操作。", "alias": "MiniQuery.Array.each", "id": 4, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 对数组进行迭代，即对数组中的每个元素执行指定的操作。", "param {Array} array 要进行迭代的数组。", "param {function} fn 要执行处理的回调函数，会接受到当前元素和其索引作为参数。<br />\n  只有在 fn 中明确返回 false 才停止循环(相当于 break)。", "param {boolean} [isReversed=false] 指定是否使用倒序进行迭代。\n        如果要使用倒序来进行迭代，请指定 true；否则默认按正序。", "return {Array} 返回当前数组。", "example\n        $.Array.each([0, 1, 2, 3], function(item, index) {\n            if(index == 2) {\n                return false;\n            }\n            console.log(index, ': ', item);\n        });\n    "], "src": "\n@desc 对数组进行迭代，即对数组中的每个元素执行指定的操作。\n@param {Array} array 要进行迭代的数组。\n@param {function} fn 要执行处理的回调函数，会接受到当前元素和其索引作为参数。<br />\n  只有在 fn 中明确返回 false 才停止循环(相当于 break)。\n@param {boolean} [isReversed=false] 指定是否使用倒序进行迭代。\n        如果要使用倒序来进行迭代，请指定 true；否则默认按正序。\n@return {Array} 返回当前数组。\n@example\n        $.Array.each([0, 1, 2, 3], function(item, index) {\n            if(index == 2) {\n                return false;\n            }\n            console.log(index, ': ', item);\n        });\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "对数组进行迭代，即对数组中的每个元素执行指定的操作。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行迭代的数组。", "type": "Array", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要执行处理的回调函数，会接受到当前元素和其索引作为参数。<br />\n  只有在 fn 中明确返回 false 才停止循环(相当于 break)。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指定是否使用倒序进行迭代。\n        如果要使用倒序来进行迭代，请指定 true；否则默认按正序。", "type": "boolean", "name": "isReversed", "isOptional": true, "defaultValue": "false" }, { "title": "return", "desc": "返回当前数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Array.each([0, 1, 2, 3], function(item, index) {\n            if(index == 2) {\n                return false;\n            }\n            console.log(index, ': ', item);\n        });", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [{ "title": "return", "desc": "返回当前数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "each", "_params": [{ "title": "param", "desc": "要进行迭代的数组。", "type": "Array", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要执行处理的回调函数，会接受到当前元素和其索引作为参数。<br />\n  只有在 fn 中明确返回 false 才停止循环(相当于 break)。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指定是否使用倒序进行迭代。\n        如果要使用倒序来进行迭代，请指定 true；否则默认按正序。", "type": "boolean", "name": "isReversed", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Array.each([0, 1, 2, 3], function(item, index) {\n            if(index == 2) {\n                return false;\n            }\n            console.log(index, ': ', item);\n        });", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "each", "params": [{ "title": "param", "desc": "要进行迭代的数组。", "type": "Array", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要执行处理的回调函数，会接受到当前元素和其索引作为参数。<br />\n  只有在 fn 中明确返回 false 才停止循环(相当于 break)。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指定是否使用倒序进行迭代。\n        如果要使用倒序来进行迭代，请指定 true；否则默认按正序。", "type": "boolean", "name": "isReversed", "isOptional": true, "defaultValue": "false" }] }, { "type": "Array", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把一个对象转成数组。", "alias": "MiniQuery.Array.parse", "id": 8, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 把一个对象转成数组。", "param {Object} obj 要进行转换的对象。<br />", "param {boolean} [useForIn=false] 指示是否使用 for in 来枚举要 obj 对象。<br />", "return {Array} 返回一个数组。<br />\n        如果 obj 本身就是数组，则直接返回该对象（数组）。<br />\n        如果 obj 没有 length 属性，或者不方便使用 length，请指定 useForIn 为 true，\n        则使用 for in 来枚举该对象并填充到一个新数组中然后返回该数组；<br />\n        否则如果 useForIn 指定为 false 或者不指定，并且该对象：<br />\n        1.为 undefined <br />\n        2.或 null <br />\n        3.或不是对象<br />\n        4.或该对象不包含 length 属性<br />\n        5.或 length 为 0<br />\n        \n        则返回空数组；<br />\n        否则按 obj.length 进行枚举并填充到一个数组里进行返回。\n    "], "src": "\n@desc 把一个对象转成数组。\n@param {Object} obj 要进行转换的对象。<br />\n@param {boolean} [useForIn=false] 指示是否使用 for in 来枚举要 obj 对象。<br />\n@return {Array} 返回一个数组。<br />\n        如果 obj 本身就是数组，则直接返回该对象（数组）。<br />\n        如果 obj 没有 length 属性，或者不方便使用 length，请指定 useForIn 为 true，\n        则使用 for in 来枚举该对象并填充到一个新数组中然后返回该数组；<br />\n        否则如果 useForIn 指定为 false 或者不指定，并且该对象：<br />\n        1.为 undefined <br />\n        2.或 null <br />\n        3.或不是对象<br />\n        4.或该对象不包含 length 属性<br />\n        5.或 length 为 0<br />\n        \n        则返回空数组；<br />\n        否则按 obj.length 进行枚举并填充到一个数组里进行返回。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把一个对象转成数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行转换的对象。<br />", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否使用 for in 来枚举要 obj 对象。<br />", "type": "boolean", "name": "useForIn", "isOptional": true, "defaultValue": "false" }, { "title": "return", "desc": "返回一个数组。<br />\n        如果 obj 本身就是数组，则直接返回该对象（数组）。<br />\n        如果 obj 没有 length 属性，或者不方便使用 length，请指定 useForIn 为 true，\n        则使用 for in 来枚举该对象并填充到一个新数组中然后返回该数组；<br />\n        否则如果 useForIn 指定为 false 或者不指定，并且该对象：<br />\n        1.为 undefined <br />\n        2.或 null <br />\n        3.或不是对象<br />\n        4.或该对象不包含 length 属性<br />\n        5.或 length 为 0<br />\n        \n        则返回空数组；<br />\n        否则按 obj.length 进行枚举并填充到一个数组里进行返回。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [{ "title": "return", "desc": "返回一个数组。<br />\n        如果 obj 本身就是数组，则直接返回该对象（数组）。<br />\n        如果 obj 没有 length 属性，或者不方便使用 length，请指定 useForIn 为 true，\n        则使用 for in 来枚举该对象并填充到一个新数组中然后返回该数组；<br />\n        否则如果 useForIn 指定为 false 或者不指定，并且该对象：<br />\n        1.为 undefined <br />\n        2.或 null <br />\n        3.或不是对象<br />\n        4.或该对象不包含 length 属性<br />\n        5.或 length 为 0<br />\n        \n        则返回空数组；<br />\n        否则按 obj.length 进行枚举并填充到一个数组里进行返回。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "parse", "_params": [{ "title": "param", "desc": "要进行转换的对象。<br />", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否使用 for in 来枚举要 obj 对象。<br />", "type": "boolean", "name": "useForIn", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "parse", "params": [{ "title": "param", "desc": "要进行转换的对象。<br />", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否使用 for in 来枚举要 obj 对象。<br />", "type": "boolean", "name": "useForIn", "isOptional": true, "defaultValue": "false" }] }, { "type": "Object", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "已重载。\n把一个数组转成 Object 对象。", "alias": "MiniQuery.Array.toObject", "id": 13, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 已重载。\n把一个数组转成 Object 对象。", "param {Array} array 要进行转换的数组。 ", "param {Array|Object|Function} [maps] 转换的映射规则。\n    <pre>\n        1.当不指定第二个参数 maps 时，将得到一个类数组的对象（arguments 就是这样的对象）。\n        否则，用参数 maps 指定的映射规则去填充一个新的对象并返回该对象，其中：\n            2.当 maps 为数组时，则作为键的列表[ key0,…, keyN ]一一对应去建立键值映射关系，即 {keyN: array[N]}；\n            3.当 maps 为对象时，则作为键-索引的映射关系去建立对象；\n            4.当 maps 为函数时，则会调用该函数取得一个处理结果。\n            其中该处理函数会接受到当前处理的数组项 item 和索引 index 作为参数。\n            如果处理函数返回一个数组，则第1个元素作为键，第2个元素作为值，存到目标对象上。\n            如果处理函数返回一个对象，则第1个成员的键作为键，第1个成员的值作为值，存到目标对象上，其他的忽略。\n            \n        如果参数非法，则返回 null；\n        否则把数组的元素拷贝到一个新的 Object 对象上并返回它。\n    </pre>", "return {Object} 返回一个 Object 对象，该对象上包含数组的处理结果，并且包含一个 length 成员。", "example\n        //例子1: 不指定第二个参数 maps，得到一个类数组的对象（arguments 就是这样的对象）。\n        var obj = $.Array.toObject(array);\n        //等价于：\n        var obj = {\n            0: array[0],\n            1: array[1],\n            //...\n            length: array.length    \n        };\n        \n        //例子2: maps 为数组，则作为键的列表[key0,…, keyN]一一对应去建立键值映射关系，即{keyN: array[N]}\n        var obj = $.Array.toObject(array, ['a', 'b', 'c']);\n        //等价于\n        var obj = {\n            a: array[0], //maps[0] --> array[0]\n            b: array[1], //maps[1] --> array[1]\n            c: array[2]  //maps[2] --> array[2]\n        };\n        \n        //例子3:  maps 为对象，则作为键-索引的映射关系去建立对象\n        var obj = $.Array.toObject(array, {\n            a: 1,\n            b: 1,\n            c: 2\n        });\n        //等价于\n        var obj = {\n            a: array[1], //maps['a'] --> array[1]\n            b: array[1], //maps['b'] --> array[1]\n            c: array[2]  //maps['c'] --> array[2]\n        };\n        \n        //例子4: maps 为函数，则会调用该函数取得一个处理结果\n        var obj = $.Array.toObject(['a', 'b', 'c'], function(item, index) {\n            return [item, index + 1000]; //第1个元素作为键，第2个元素作为值\n        });\n        //得到 \n        obj = {\n            a: 1000,\n            b: 1001\n            c: 1002\n        };\n        \n        //又如：\n        var obj = $.Array.toObject(['a', 'b', 'c'], function(item, index) {\n            //处理函数返回一个对象，则第1个成员的键作为键，第1个成员的值作为值，存到目标对象上，其他的忽略。\n            var obj = {};\n            obj[item] = index + 1000;\n            return obj;\n            \n        });\n        //得到 \n        obj = {\n            a: 1000,\n            b: 1001\n            c: 1002\n        };\n    "], "src": "\n@desc 已重载。\n把一个数组转成 Object 对象。\n@param {Array} array 要进行转换的数组。 \n@param {Array|Object|Function} [maps] 转换的映射规则。\n    <pre>\n        1.当不指定第二个参数 maps 时，将得到一个类数组的对象（arguments 就是这样的对象）。\n        否则，用参数 maps 指定的映射规则去填充一个新的对象并返回该对象，其中：\n            2.当 maps 为数组时，则作为键的列表[ key0,…, keyN ]一一对应去建立键值映射关系，即 {keyN: array[N]}；\n            3.当 maps 为对象时，则作为键-索引的映射关系去建立对象；\n            4.当 maps 为函数时，则会调用该函数取得一个处理结果。\n            其中该处理函数会接受到当前处理的数组项 item 和索引 index 作为参数。\n            如果处理函数返回一个数组，则第1个元素作为键，第2个元素作为值，存到目标对象上。\n            如果处理函数返回一个对象，则第1个成员的键作为键，第1个成员的值作为值，存到目标对象上，其他的忽略。\n            \n        如果参数非法，则返回 null；\n        否则把数组的元素拷贝到一个新的 Object 对象上并返回它。\n    </pre>\n@return {Object} 返回一个 Object 对象，该对象上包含数组的处理结果，并且包含一个 length 成员。\n@example\n        //例子1: 不指定第二个参数 maps，得到一个类数组的对象（arguments 就是这样的对象）。\n        var obj = $.Array.toObject(array);\n        //等价于：\n        var obj = {\n            0: array[0],\n            1: array[1],\n            //...\n            length: array.length    \n        };\n        \n        //例子2: maps 为数组，则作为键的列表[key0,…, keyN]一一对应去建立键值映射关系，即{keyN: array[N]}\n        var obj = $.Array.toObject(array, ['a', 'b', 'c']);\n        //等价于\n        var obj = {\n            a: array[0], //maps[0] --> array[0]\n            b: array[1], //maps[1] --> array[1]\n            c: array[2]  //maps[2] --> array[2]\n        };\n        \n        //例子3:  maps 为对象，则作为键-索引的映射关系去建立对象\n        var obj = $.Array.toObject(array, {\n            a: 1,\n            b: 1,\n            c: 2\n        });\n        //等价于\n        var obj = {\n            a: array[1], //maps['a'] --> array[1]\n            b: array[1], //maps['b'] --> array[1]\n            c: array[2]  //maps['c'] --> array[2]\n        };\n        \n        //例子4: maps 为函数，则会调用该函数取得一个处理结果\n        var obj = $.Array.toObject(['a', 'b', 'c'], function(item, index) {\n            return [item, index + 1000]; //第1个元素作为键，第2个元素作为值\n        });\n        //得到 \n        obj = {\n            a: 1000,\n            b: 1001\n            c: 1002\n        };\n        \n        //又如：\n        var obj = $.Array.toObject(['a', 'b', 'c'], function(item, index) {\n            //处理函数返回一个对象，则第1个成员的键作为键，第1个成员的值作为值，存到目标对象上，其他的忽略。\n            var obj = {};\n            obj[item] = index + 1000;\n            return obj;\n            \n        });\n        //得到 \n        obj = {\n            a: 1000,\n            b: 1001\n            c: 1002\n        };\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "已重载。\n把一个数组转成 Object 对象。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行转换的数组。", "type": "Array", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "转换的映射规则。\n    <pre>\n        1.当不指定第二个参数 maps 时，将得到一个类数组的对象（arguments 就是这样的对象）。\n        否则，用参数 maps 指定的映射规则去填充一个新的对象并返回该对象，其中：\n            2.当 maps 为数组时，则作为键的列表[ key0,…, keyN ]一一对应去建立键值映射关系，即 {keyN: array[N]}；\n            3.当 maps 为对象时，则作为键-索引的映射关系去建立对象；\n            4.当 maps 为函数时，则会调用该函数取得一个处理结果。\n            其中该处理函数会接受到当前处理的数组项 item 和索引 index 作为参数。\n            如果处理函数返回一个数组，则第1个元素作为键，第2个元素作为值，存到目标对象上。\n            如果处理函数返回一个对象，则第1个成员的键作为键，第1个成员的值作为值，存到目标对象上，其他的忽略。\n            \n        如果参数非法，则返回 null；\n        否则把数组的元素拷贝到一个新的 Object 对象上并返回它。\n    </pre>", "type": "Array|Object|Function", "name": "maps", "isOptional": true, "defaultValue": "" }, { "title": "return", "desc": "返回一个 Object 对象，该对象上包含数组的处理结果，并且包含一个 length 成员。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        //例子1: 不指定第二个参数 maps，得到一个类数组的对象（arguments 就是这样的对象）。\n        var obj = $.Array.toObject(array);\n        //等价于：\n        var obj = {\n            0: array[0],\n            1: array[1],\n            //...\n            length: array.length    \n        };\n        \n        //例子2: maps 为数组，则作为键的列表[key0,…, keyN]一一对应去建立键值映射关系，即{keyN: array[N]}\n        var obj = $.Array.toObject(array, ['a', 'b', 'c']);\n        //等价于\n        var obj = {\n            a: array[0], //maps[0] --> array[0]\n            b: array[1], //maps[1] --> array[1]\n            c: array[2]  //maps[2] --> array[2]\n        };\n        \n        //例子3:  maps 为对象，则作为键-索引的映射关系去建立对象\n        var obj = $.Array.toObject(array, {\n            a: 1,\n            b: 1,\n            c: 2\n        });\n        //等价于\n        var obj = {\n            a: array[1], //maps['a'] --> array[1]\n            b: array[1], //maps['b'] --> array[1]\n            c: array[2]  //maps['c'] --> array[2]\n        };\n        \n        //例子4: maps 为函数，则会调用该函数取得一个处理结果\n        var obj = $.Array.toObject(['a', 'b', 'c'], function(item, index) {\n            return [item, index + 1000]; //第1个元素作为键，第2个元素作为值\n        });\n        //得到 \n        obj = {\n            a: 1000,\n            b: 1001\n            c: 1002\n        };\n        \n        //又如：\n        var obj = $.Array.toObject(['a', 'b', 'c'], function(item, index) {\n            //处理函数返回一个对象，则第1个成员的键作为键，第1个成员的值作为值，存到目标对象上，其他的忽略。\n            var obj = {};\n            obj[item] = index + 1000;\n            return obj;\n            \n        });\n        //得到 \n        obj = {\n            a: 1000,\n            b: 1001\n            c: 1002\n        };", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [{ "title": "return", "desc": "返回一个 Object 对象，该对象上包含数组的处理结果，并且包含一个 length 成员。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "toObject", "_params": [{ "title": "param", "desc": "要进行转换的数组。", "type": "Array", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "转换的映射规则。\n    <pre>\n        1.当不指定第二个参数 maps 时，将得到一个类数组的对象（arguments 就是这样的对象）。\n        否则，用参数 maps 指定的映射规则去填充一个新的对象并返回该对象，其中：\n            2.当 maps 为数组时，则作为键的列表[ key0,…, keyN ]一一对应去建立键值映射关系，即 {keyN: array[N]}；\n            3.当 maps 为对象时，则作为键-索引的映射关系去建立对象；\n            4.当 maps 为函数时，则会调用该函数取得一个处理结果。\n            其中该处理函数会接受到当前处理的数组项 item 和索引 index 作为参数。\n            如果处理函数返回一个数组，则第1个元素作为键，第2个元素作为值，存到目标对象上。\n            如果处理函数返回一个对象，则第1个成员的键作为键，第1个成员的值作为值，存到目标对象上，其他的忽略。\n            \n        如果参数非法，则返回 null；\n        否则把数组的元素拷贝到一个新的 Object 对象上并返回它。\n    </pre>", "type": "Array|Object|Function", "name": "maps", "isOptional": true, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        //例子1: 不指定第二个参数 maps，得到一个类数组的对象（arguments 就是这样的对象）。\n        var obj = $.Array.toObject(array);\n        //等价于：\n        var obj = {\n            0: array[0],\n            1: array[1],\n            //...\n            length: array.length    \n        };\n        \n        //例子2: maps 为数组，则作为键的列表[key0,…, keyN]一一对应去建立键值映射关系，即{keyN: array[N]}\n        var obj = $.Array.toObject(array, ['a', 'b', 'c']);\n        //等价于\n        var obj = {\n            a: array[0], //maps[0] --> array[0]\n            b: array[1], //maps[1] --> array[1]\n            c: array[2]  //maps[2] --> array[2]\n        };\n        \n        //例子3:  maps 为对象，则作为键-索引的映射关系去建立对象\n        var obj = $.Array.toObject(array, {\n            a: 1,\n            b: 1,\n            c: 2\n        });\n        //等价于\n        var obj = {\n            a: array[1], //maps['a'] --> array[1]\n            b: array[1], //maps['b'] --> array[1]\n            c: array[2]  //maps['c'] --> array[2]\n        };\n        \n        //例子4: maps 为函数，则会调用该函数取得一个处理结果\n        var obj = $.Array.toObject(['a', 'b', 'c'], function(item, index) {\n            return [item, index + 1000]; //第1个元素作为键，第2个元素作为值\n        });\n        //得到 \n        obj = {\n            a: 1000,\n            b: 1001\n            c: 1002\n        };\n        \n        //又如：\n        var obj = $.Array.toObject(['a', 'b', 'c'], function(item, index) {\n            //处理函数返回一个对象，则第1个成员的键作为键，第1个成员的值作为值，存到目标对象上，其他的忽略。\n            var obj = {};\n            obj[item] = index + 1000;\n            return obj;\n            \n        });\n        //得到 \n        obj = {\n            a: 1000,\n            b: 1001\n            c: 1002\n        };", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "toObject", "params": [{ "title": "param", "desc": "要进行转换的数组。", "type": "Array", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "转换的映射规则。\n    <pre>\n        1.当不指定第二个参数 maps 时，将得到一个类数组的对象（arguments 就是这样的对象）。\n        否则，用参数 maps 指定的映射规则去填充一个新的对象并返回该对象，其中：\n            2.当 maps 为数组时，则作为键的列表[ key0,…, keyN ]一一对应去建立键值映射关系，即 {keyN: array[N]}；\n            3.当 maps 为对象时，则作为键-索引的映射关系去建立对象；\n            4.当 maps 为函数时，则会调用该函数取得一个处理结果。\n            其中该处理函数会接受到当前处理的数组项 item 和索引 index 作为参数。\n            如果处理函数返回一个数组，则第1个元素作为键，第2个元素作为值，存到目标对象上。\n            如果处理函数返回一个对象，则第1个成员的键作为键，第1个成员的值作为值，存到目标对象上，其他的忽略。\n            \n        如果参数非法，则返回 null；\n        否则把数组的元素拷贝到一个新的 Object 对象上并返回它。\n    </pre>", "type": "Array|Object|Function", "name": "maps", "isOptional": true, "defaultValue": "" }] }, { "type": "Array", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把一个数组中的元素转换到另一个数组中，返回一个新的数组。", "alias": "MiniQuery.Array.map", "id": 31, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 把一个数组中的元素转换到另一个数组中，返回一个新的数组。", "param {Array} 要进行转换的数组。", "param {function} 转换函数。\n        该转换函数会为每个数组元素调用，它会接收到两个参数：当前迭代的数组元素和该元素的索引。\n转换函数可以返回转换后的值，有两个特殊值影响到迭代行为：\n  null：忽略当前数组元素，即该元素在新的数组中不存在对应的项（相当于 continue）；\n  undefined：忽略当前数组元素到最后一个元素（相当于break）；", "return {Array} 返回一个转换后的新数组。\n    "], "src": "\n@desc 把一个数组中的元素转换到另一个数组中，返回一个新的数组。\n@param {Array} 要进行转换的数组。\n@param {function} 转换函数。\n        该转换函数会为每个数组元素调用，它会接收到两个参数：当前迭代的数组元素和该元素的索引。\n转换函数可以返回转换后的值，有两个特殊值影响到迭代行为：\n  null：忽略当前数组元素，即该元素在新的数组中不存在对应的项（相当于 continue）；\n  undefined：忽略当前数组元素到最后一个元素（相当于break）；\n@return {Array} 返回一个转换后的新数组。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把一个数组中的元素转换到另一个数组中，返回一个新的数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "Array", "name": "要进行转换的数组。", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "该转换函数会为每个数组元素调用，它会接收到两个参数：当前迭代的数组元素和该元素的索引。\n转换函数可以返回转换后的值，有两个特殊值影响到迭代行为：\n  null：忽略当前数组元素，即该元素在新的数组中不存在对应的项（相当于 continue）；\n  undefined：忽略当前数组元素到最后一个元素（相当于break）；", "type": "function", "name": "转换函数。", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个转换后的新数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [{ "title": "return", "desc": "返回一个转换后的新数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "map", "_params": [{ "title": "param", "desc": "", "type": "Array", "name": "要进行转换的数组。", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "该转换函数会为每个数组元素调用，它会接收到两个参数：当前迭代的数组元素和该元素的索引。\n转换函数可以返回转换后的值，有两个特殊值影响到迭代行为：\n  null：忽略当前数组元素，即该元素在新的数组中不存在对应的项（相当于 continue）；\n  undefined：忽略当前数组元素到最后一个元素（相当于break）；", "type": "function", "name": "转换函数。", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "map", "params": [{ "title": "param", "desc": "", "type": "Array", "name": "要进行转换的数组。", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "该转换函数会为每个数组元素调用，它会接收到两个参数：当前迭代的数组元素和该元素的索引。\n转换函数可以返回转换后的值，有两个特殊值影响到迭代行为：\n  null：忽略当前数组元素，即该元素在新的数组中不存在对应的项（相当于 continue）；\n  undefined：忽略当前数组元素到最后一个元素（相当于break）；", "type": "function", "name": "转换函数。", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "将一个数组中的元素转换到另一个数组中，并且保留所有的元素，返回一个新数组。\n作为参数的转换函数会为每个数组元素调用，并把当前元素和索引作为参数传给转换函数。\n该方法与 map 的区别在于本方法会保留所有的元素，而不管它的返回是什么。", "alias": "MiniQuery.Array.keep", "id": 36, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 将一个数组中的元素转换到另一个数组中，并且保留所有的元素，返回一个新数组。\n作为参数的转换函数会为每个数组元素调用，并把当前元素和索引作为参数传给转换函数。\n该方法与 map 的区别在于本方法会保留所有的元素，而不管它的返回是什么。\n    "], "src": "\n@desc 将一个数组中的元素转换到另一个数组中，并且保留所有的元素，返回一个新数组。\n作为参数的转换函数会为每个数组元素调用，并把当前元素和索引作为参数传给转换函数。\n该方法与 map 的区别在于本方法会保留所有的元素，而不管它的返回是什么。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "将一个数组中的元素转换到另一个数组中，并且保留所有的元素，返回一个新数组。\n作为参数的转换函数会为每个数组元素调用，并把当前元素和索引作为参数传给转换函数。\n该方法与 map 的区别在于本方法会保留所有的元素，而不管它的返回是什么。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "keep", "_params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "fn", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "keep", "params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "fn", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "使用过滤函数过滤数组元素，返回一个新数组。\n此函数至少传递两个参数：待过滤数组和过滤函数。过滤函数必须返回 true 以保留元素或 false 以删除元素。\n转换函数可以返回转换后的值：", "alias": "MiniQuery.Array.grep", "id": 41, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 使用过滤函数过滤数组元素，返回一个新数组。\n此函数至少传递两个参数：待过滤数组和过滤函数。过滤函数必须返回 true 以保留元素或 false 以删除元素。\n转换函数可以返回转换后的值：\n    "], "src": "\n@desc 使用过滤函数过滤数组元素，返回一个新数组。\n此函数至少传递两个参数：待过滤数组和过滤函数。过滤函数必须返回 true 以保留元素或 false 以删除元素。\n转换函数可以返回转换后的值：\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "使用过滤函数过滤数组元素，返回一个新数组。\n此函数至少传递两个参数：待过滤数组和过滤函数。过滤函数必须返回 true 以保留元素或 false 以删除元素。\n转换函数可以返回转换后的值：", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "grep", "_params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "fn", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "grep", "params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "fn", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "检索特定的元素在数组中第一次出现的索引位置。\n注意，该方法用的是全等的比较操作。", "alias": "MiniQuery.Array.indexOf", "id": 46, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 检索特定的元素在数组中第一次出现的索引位置。\n注意，该方法用的是全等的比较操作。", "param {Array} array 要进行检索的数组。", "param {任意类型} item 要进行检索的项。", "return 返回一个整数，表示检索项在数组第一次出现的索引位置。\n  如果不存在该元素，则返回 -1。", "example\n        $.Array.indexOf(['a', '10', 10, 'b'], 10); //使用的是全等比较，结果为 2\n        \n    "], "src": "\n@desc 检索特定的元素在数组中第一次出现的索引位置。\n注意，该方法用的是全等的比较操作。\n@param {Array} array 要进行检索的数组。\n@param {任意类型} item 要进行检索的项。\n@return 返回一个整数，表示检索项在数组第一次出现的索引位置。\n  如果不存在该元素，则返回 -1。\n@example\n        $.Array.indexOf(['a', '10', 10, 'b'], 10); //使用的是全等比较，结果为 2\n        \n    ", "meta": "", "tags": [{ "title": "desc", "desc": "检索特定的元素在数组中第一次出现的索引位置。\n注意，该方法用的是全等的比较操作。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行检索的数组。", "type": "Array", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行检索的项。", "type": "任意类型", "name": "item", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个整数，表示检索项在数组第一次出现的索引位置。\n  如果不存在该元素，则返回 -1。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Array.indexOf(['a', '10', 10, 'b'], 10); //使用的是全等比较，结果为 2", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [{ "title": "return", "desc": "返回一个整数，表示检索项在数组第一次出现的索引位置。\n  如果不存在该元素，则返回 -1。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "indexOf", "_params": [{ "title": "param", "desc": "要进行检索的数组。", "type": "Array", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行检索的项。", "type": "任意类型", "name": "item", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Array.indexOf(['a', '10', 10, 'b'], 10); //使用的是全等比较，结果为 2", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "indexOf", "params": [{ "title": "param", "desc": "要进行检索的数组。", "type": "Array", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行检索的项。", "type": "任意类型", "name": "item", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "判断数组中是否包含特定的元素，返回 true 或 false。", "alias": "MiniQuery.Array.contains", "id": 49, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 判断数组中是否包含特定的元素，返回 true 或 false。\n    "], "src": "\n@desc 判断数组中是否包含特定的元素，返回 true 或 false。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "判断数组中是否包含特定的元素，返回 true 或 false。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "contains", "_params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "item", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "contains", "params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "item", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "从数组中删除特定的元素，返回一个新数组。", "alias": "MiniQuery.Array.remove", "id": 50, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 从数组中删除特定的元素，返回一个新数组。\n    "], "src": "\n@desc 从数组中删除特定的元素，返回一个新数组。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "从数组中删除特定的元素，返回一个新数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "remove", "_params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "target", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "remove", "params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "target", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "从数组中删除特定索引位置的元素，返回一个新数组。", "alias": "MiniQuery.Array.removeAt", "id": 55, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 从数组中删除特定索引位置的元素，返回一个新数组。\n    "], "src": "\n@desc 从数组中删除特定索引位置的元素，返回一个新数组。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "从数组中删除特定索引位置的元素，返回一个新数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "removeAt", "_params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "index", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "removeAt", "params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "index", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "反转数组，返回一个新数组。", "alias": "MiniQuery.Array.reverse", "id": 57, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 反转数组，返回一个新数组。\n    "], "src": "\n@desc 反转数组，返回一个新数组。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "反转数组，返回一个新数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "reverse", "_params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "reverse", "params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "批量合并数组，返回一个新数组。", "alias": "MiniQuery.Array.merge", "id": 60, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 批量合并数组，返回一个新数组。\n    "], "src": "\n@desc 批量合并数组，返回一个新数组。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "批量合并数组，返回一个新数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "merge", "_params": [], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "merge", "params": [] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "批量合并数组，并删除重复的项，返回一个新数组。", "alias": "MiniQuery.Array.mergeUnique", "id": 66, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 批量合并数组，并删除重复的项，返回一个新数组。\n    "], "src": "\n@desc 批量合并数组，并删除重复的项，返回一个新数组。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "批量合并数组，并删除重复的项，返回一个新数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "mergeUnique", "_params": [], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "mergeUnique", "params": [] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "删除重复的项，返回一个新数组。\n定义该接口，是为了语义上更准确。", "alias": "MiniQuery.Array.unique", "id": 74, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 删除重复的项，返回一个新数组。\n定义该接口，是为了语义上更准确。\n    "], "src": "\n@desc 删除重复的项，返回一个新数组。\n定义该接口，是为了语义上更准确。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "删除重复的项，返回一个新数组。\n定义该接口，是为了语义上更准确。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "unique", "_params": [{ "title": "param", "desc": "", "type": "", "name": "a", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "unique", "params": [{ "title": "param", "desc": "", "type": "", "name": "a", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "给数组删除（如果已经有该项）或添加（如果还没有项）一项，返回一个新数组。", "alias": "MiniQuery.Array.toggle", "id": 75, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 给数组删除（如果已经有该项）或添加（如果还没有项）一项，返回一个新数组。\n    "], "src": "\n@desc 给数组删除（如果已经有该项）或添加（如果还没有项）一项，返回一个新数组。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "给数组删除（如果已经有该项）或添加（如果还没有项）一项，返回一个新数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "toggle", "_params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "item", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "toggle", "params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "item", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "判断符合条件的元素是否存在。\n只有在回调函数中明确返回 true，才算找到，此时本方法停止迭代，并返回 true 以指示找到；\n否则迭代继续直至完成，并返回 false 以指示不存在符合条件的元素。", "alias": "MiniQuery.Array.find", "id": 77, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 判断符合条件的元素是否存在。\n只有在回调函数中明确返回 true，才算找到，此时本方法停止迭代，并返回 true 以指示找到；\n否则迭代继续直至完成，并返回 false 以指示不存在符合条件的元素。\n    "], "src": "\n@desc 判断符合条件的元素是否存在。\n只有在回调函数中明确返回 true，才算找到，此时本方法停止迭代，并返回 true 以指示找到；\n否则迭代继续直至完成，并返回 false 以指示不存在符合条件的元素。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "判断符合条件的元素是否存在。\n只有在回调函数中明确返回 true，才算找到，此时本方法停止迭代，并返回 true 以指示找到；\n否则迭代继续直至完成，并返回 false 以指示不存在符合条件的元素。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "find", "_params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "startIndex", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "find", "params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "startIndex", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "查找符合条件的单个元素的索引，返回第一次找到的元素的索引值，否则返回 -1。\n只有在回调函数中明确返回 true，才算找到。", "alias": "MiniQuery.Array.findIndex", "id": 78, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 查找符合条件的单个元素的索引，返回第一次找到的元素的索引值，否则返回 -1。\n只有在回调函数中明确返回 true，才算找到。\n    "], "src": "\n@desc 查找符合条件的单个元素的索引，返回第一次找到的元素的索引值，否则返回 -1。\n只有在回调函数中明确返回 true，才算找到。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "查找符合条件的单个元素的索引，返回第一次找到的元素的索引值，否则返回 -1。\n只有在回调函数中明确返回 true，才算找到。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "findIndex", "_params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "startIndex", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "findIndex", "params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "startIndex", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "查找符合条件的单个元素，返回第一次找到的元素，否则返回 null。\n只有在回调函数中中明确返回 true 才算是找到。", "alias": "MiniQuery.Array.findItem", "id": 82, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 查找符合条件的单个元素，返回第一次找到的元素，否则返回 null。\n只有在回调函数中中明确返回 true 才算是找到。\n    "], "src": "\n@desc 查找符合条件的单个元素，返回第一次找到的元素，否则返回 null。\n只有在回调函数中中明确返回 true 才算是找到。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "查找符合条件的单个元素，返回第一次找到的元素，否则返回 null。\n只有在回调函数中中明确返回 true 才算是找到。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "findItem", "_params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "startIndex", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "findItem", "params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "startIndex", "isOptional": false, "defaultValue": "" }] }, { "type": "Array", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "对此数组的元素进行随机排序，返回一个新数组。", "alias": "MiniQuery.Array.random", "id": 87, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 对此数组的元素进行随机排序，返回一个新数组。", "param {Array} list 要进行排序的数组。", "return {Array} 返回一个随机排序的新数组。", "example\n        $.Array.random( ['a', 'b', 'c', 'd'] ); \n    "], "src": "\n@desc 对此数组的元素进行随机排序，返回一个新数组。\n@param {Array} list 要进行排序的数组。\n@return {Array} 返回一个随机排序的新数组。\n@example\n        $.Array.random( ['a', 'b', 'c', 'd'] ); \n    ", "meta": "", "tags": [{ "title": "desc", "desc": "对此数组的元素进行随机排序，返回一个新数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行排序的数组。", "type": "Array", "name": "list", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个随机排序的新数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Array.random( ['a', 'b', 'c', 'd'] );", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [{ "title": "return", "desc": "返回一个随机排序的新数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "random", "_params": [{ "title": "param", "desc": "要进行排序的数组。", "type": "Array", "name": "list", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Array.random( ['a', 'b', 'c', 'd'] );", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "random", "params": [{ "title": "param", "desc": "要进行排序的数组。", "type": "Array", "name": "list", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "随机获取数组中的一个元素。", "alias": "MiniQuery.Array.randomItem", "id": 93, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 随机获取数组中的一个元素。", "param {Array} array 要进行获取元素的数组。", "return 随机返回一个数组项。\n        当数组为空时，返回 undefined。", "example\n        $.Array.randomItem( ['a', 'b', 'c', 'd'] ); \n    "], "src": "\n@desc 随机获取数组中的一个元素。\n@param {Array} array 要进行获取元素的数组。\n@return 随机返回一个数组项。\n        当数组为空时，返回 undefined。\n@example\n        $.Array.randomItem( ['a', 'b', 'c', 'd'] ); \n    ", "meta": "", "tags": [{ "title": "desc", "desc": "随机获取数组中的一个元素。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行获取元素的数组。", "type": "Array", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "随机返回一个数组项。\n        当数组为空时，返回 undefined。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Array.randomItem( ['a', 'b', 'c', 'd'] );", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [{ "title": "return", "desc": "随机返回一个数组项。\n        当数组为空时，返回 undefined。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "randomItem", "_params": [{ "title": "param", "desc": "要进行获取元素的数组。", "type": "Array", "name": "array", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Array.randomItem( ['a', 'b', 'c', 'd'] );", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "randomItem", "params": [{ "title": "param", "desc": "要进行获取元素的数组。", "type": "Array", "name": "array", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "获取数组中指定索引位置的元素。\n如果传入负数，则从后面开始算起。如果不传参数，则返回一份拷贝的新数组。", "alias": "MiniQuery.Array.get", "id": 96, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 获取数组中指定索引位置的元素。\n如果传入负数，则从后面开始算起。如果不传参数，则返回一份拷贝的新数组。\n    "], "src": "\n@desc 获取数组中指定索引位置的元素。\n如果传入负数，则从后面开始算起。如果不传参数，则返回一份拷贝的新数组。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "获取数组中指定索引位置的元素。\n如果传入负数，则从后面开始算起。如果不传参数，则返回一份拷贝的新数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "get", "_params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "index", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "get", "params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "index", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "删除数组中为 null 或 undefined 的项，返回一个新数组", "alias": "MiniQuery.Array.trim", "id": 99, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 删除数组中为 null 或 undefined 的项，返回一个新数组\n    "], "src": "\n@desc 删除数组中为 null 或 undefined 的项，返回一个新数组\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "删除数组中为 null 或 undefined 的项，返回一个新数组", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "trim", "_params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "trim", "params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "创建分组，即把转成二维数组。返回一个二维数组。\n当指定第三个参数为 true 时，可在最后一组向右对齐数据。", "alias": "MiniQuery.Array.group", "id": 101, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 创建分组，即把转成二维数组。返回一个二维数组。\n当指定第三个参数为 true 时，可在最后一组向右对齐数据。\n    "], "src": "\n@desc 创建分组，即把转成二维数组。返回一个二维数组。\n当指定第三个参数为 true 时，可在最后一组向右对齐数据。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "创建分组，即把转成二维数组。返回一个二维数组。\n当指定第三个参数为 true 时，可在最后一组向右对齐数据。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "group", "_params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "size", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "isPadRight", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "group", "params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "size", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "isPadRight", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "用滑动窗口的方式创建分组，即把转成二维数组。返回一个二维数组。\n可以指定窗口大小和步长。步长默认为1。", "alias": "MiniQuery.Array.slide", "id": 103, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 用滑动窗口的方式创建分组，即把转成二维数组。返回一个二维数组。\n可以指定窗口大小和步长。步长默认为1。\n    "], "src": "\n@desc 用滑动窗口的方式创建分组，即把转成二维数组。返回一个二维数组。\n可以指定窗口大小和步长。步长默认为1。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "用滑动窗口的方式创建分组，即把转成二维数组。返回一个二维数组。\n可以指定窗口大小和步长。步长默认为1。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "slide", "_params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "windowSize", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "stepSize", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "slide", "params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "windowSize", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "stepSize", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "用圆形的方式截取数组片段，返回一个新的数组。\n即把数组看成一个首尾相接的圆圈，然后从指定位置开始截取指定长度的片段。", "alias": "MiniQuery.Array.circleSlice", "id": 110, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 用圆形的方式截取数组片段，返回一个新的数组。\n即把数组看成一个首尾相接的圆圈，然后从指定位置开始截取指定长度的片段。\n    "], "src": "\n@desc 用圆形的方式截取数组片段，返回一个新的数组。\n即把数组看成一个首尾相接的圆圈，然后从指定位置开始截取指定长度的片段。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "用圆形的方式截取数组片段，返回一个新的数组。\n即把数组看成一个首尾相接的圆圈，然后从指定位置开始截取指定长度的片段。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "circleSlice", "_params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "startIndex", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "size", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "circleSlice", "params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "startIndex", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "size", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "用圆形滑动窗口的方式创建分组，返回一个二维数组。\n可以指定窗口大小和步长。步长默认为 1。\n即把数组看成一个首尾相接的圆圈，然后开始滑动窗口。", "alias": "MiniQuery.Array.circleSlide", "id": 115, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 用圆形滑动窗口的方式创建分组，返回一个二维数组。\n可以指定窗口大小和步长。步长默认为 1。\n即把数组看成一个首尾相接的圆圈，然后开始滑动窗口。\n    "], "src": "\n@desc 用圆形滑动窗口的方式创建分组，返回一个二维数组。\n可以指定窗口大小和步长。步长默认为 1。\n即把数组看成一个首尾相接的圆圈，然后开始滑动窗口。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "用圆形滑动窗口的方式创建分组，返回一个二维数组。\n可以指定窗口大小和步长。步长默认为 1。\n即把数组看成一个首尾相接的圆圈，然后开始滑动窗口。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "circleSlide", "_params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "windowSize", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "stepSize", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "circleSlide", "params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "windowSize", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "stepSize", "isOptional": false, "defaultValue": "" }] }, { "type": "Number", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "对一个数组的所有元素进行求和。", "alias": "MiniQuery.Array.sum", "id": 122, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 对一个数组的所有元素进行求和。", "param {Array} array 要进行求和的数组。", "param {boolean} [ignoreNaN=false] 指示是否忽略掉值为 NaN 的项。\n        如果要忽略掉值为 NaN 的项，请指定为 true；否则为 false 或不指定。", "param {string} [key] 要读取的项的成员的键名称。\n  如果指定第三个参数时，将读取数组元素中的对应的成员，该使用方式主要用于由 json 组成的的数组中。", "return {Number} 返回数组所有元素之和。", "example\n        var a = [1, 2, 3, 4];\n        var sum = $.Array.sum(a); //得到 10\n        //又如\n        var a = [\n            { value: 1 },\n            { value: NaN },\n            { value: 3 },\n            { value: 4 },\n        ];\n        var sum = $.Array.sum(a, true, 'value'); //得到 8\n\n    "], "src": "\n@desc 对一个数组的所有元素进行求和。\n@param {Array} array 要进行求和的数组。\n@param {boolean} [ignoreNaN=false] 指示是否忽略掉值为 NaN 的项。\n        如果要忽略掉值为 NaN 的项，请指定为 true；否则为 false 或不指定。\n@param {string} [key] 要读取的项的成员的键名称。\n  如果指定第三个参数时，将读取数组元素中的对应的成员，该使用方式主要用于由 json 组成的的数组中。\n@return {Number} 返回数组所有元素之和。\n@example\n        var a = [1, 2, 3, 4];\n        var sum = $.Array.sum(a); //得到 10\n        //又如\n        var a = [\n            { value: 1 },\n            { value: NaN },\n            { value: 3 },\n            { value: 4 },\n        ];\n        var sum = $.Array.sum(a, true, 'value'); //得到 8\n\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "对一个数组的所有元素进行求和。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行求和的数组。", "type": "Array", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否忽略掉值为 NaN 的项。\n        如果要忽略掉值为 NaN 的项，请指定为 true；否则为 false 或不指定。", "type": "boolean", "name": "ignoreNaN", "isOptional": true, "defaultValue": "false" }, { "title": "param", "desc": "要读取的项的成员的键名称。\n  如果指定第三个参数时，将读取数组元素中的对应的成员，该使用方式主要用于由 json 组成的的数组中。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "return", "desc": "返回数组所有元素之和。", "type": "Number", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var a = [1, 2, 3, 4];\n        var sum = $.Array.sum(a); //得到 10\n        //又如\n        var a = [\n            { value: 1 },\n            { value: NaN },\n            { value: 3 },\n            { value: 4 },\n        ];\n        var sum = $.Array.sum(a, true, 'value'); //得到 8", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [{ "title": "return", "desc": "返回数组所有元素之和。", "type": "Number", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "sum", "_params": [{ "title": "param", "desc": "要进行求和的数组。", "type": "Array", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否忽略掉值为 NaN 的项。\n        如果要忽略掉值为 NaN 的项，请指定为 true；否则为 false 或不指定。", "type": "boolean", "name": "ignoreNaN", "isOptional": true, "defaultValue": "false" }, { "title": "param", "desc": "要读取的项的成员的键名称。\n  如果指定第三个参数时，将读取数组元素中的对应的成员，该使用方式主要用于由 json 组成的的数组中。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var a = [1, 2, 3, 4];\n        var sum = $.Array.sum(a); //得到 10\n        //又如\n        var a = [\n            { value: 1 },\n            { value: NaN },\n            { value: 3 },\n            { value: 4 },\n        ];\n        var sum = $.Array.sum(a, true, 'value'); //得到 8", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "sum", "params": [{ "title": "param", "desc": "要进行求和的数组。", "type": "Array", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否忽略掉值为 NaN 的项。\n        如果要忽略掉值为 NaN 的项，请指定为 true；否则为 false 或不指定。", "type": "boolean", "name": "ignoreNaN", "isOptional": true, "defaultValue": "false" }, { "title": "param", "desc": "要读取的项的成员的键名称。\n  如果指定第三个参数时，将读取数组元素中的对应的成员，该使用方式主要用于由 json 组成的的数组中。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "查找一个数组的所有元素中的最大值。\n当指定第二个参数为 true 时，可以忽略掉 NaN 的元素。\n当指定第三个参数时，将读取数组元素中的对应的成员，该使用方式主要用于由 json 组成的的数组中。", "alias": "MiniQuery.Array.max", "id": 128, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 查找一个数组的所有元素中的最大值。\n当指定第二个参数为 true 时，可以忽略掉 NaN 的元素。\n当指定第三个参数时，将读取数组元素中的对应的成员，该使用方式主要用于由 json 组成的的数组中。\n    "], "src": "\n@desc 查找一个数组的所有元素中的最大值。\n当指定第二个参数为 true 时，可以忽略掉 NaN 的元素。\n当指定第三个参数时，将读取数组元素中的对应的成员，该使用方式主要用于由 json 组成的的数组中。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "查找一个数组的所有元素中的最大值。\n当指定第二个参数为 true 时，可以忽略掉 NaN 的元素。\n当指定第三个参数时，将读取数组元素中的对应的成员，该使用方式主要用于由 json 组成的的数组中。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "max", "_params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "ignoreNaN", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "key", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "max", "params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "ignoreNaN", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "key", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "判断数组中是否包含元素。\n当传入的参数为数组，并且其 length 大于 0 时，返回 true；否则返回 false。", "alias": "MiniQuery.Array.hasItem", "id": 136, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 判断数组中是否包含元素。\n当传入的参数为数组，并且其 length 大于 0 时，返回 true；否则返回 false。\n    "], "src": "\n@desc 判断数组中是否包含元素。\n当传入的参数为数组，并且其 length 大于 0 时，返回 true；否则返回 false。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "判断数组中是否包含元素。\n当传入的参数为数组，并且其 length 大于 0 时，返回 true；否则返回 false。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "hasItem", "_params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "hasItem", "params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "给数组降维，返回一个新数组。\n可以指定降维次数，当不指定次数，默认为 1 次。", "alias": "MiniQuery.Array.reduceDimension", "id": 137, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 给数组降维，返回一个新数组。\n可以指定降维次数，当不指定次数，默认为 1 次。\n    "], "src": "\n@desc 给数组降维，返回一个新数组。\n可以指定降维次数，当不指定次数，默认为 1 次。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "给数组降维，返回一个新数组。\n可以指定降维次数，当不指定次数，默认为 1 次。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "reduceDimension", "_params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "count", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "reduceDimension", "params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "count", "isOptional": false, "defaultValue": "" }] }, { "type": "Array", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "求两个或多个数组的笛卡尔积，返回一个二维数组。", "alias": "MiniQuery.Array.descartes", "id": 143, "isStatic": true, "see": [], "methods": [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.Array.descartes-fn", "id": 148, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.Array.descartes", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "fn", "_params": [{ "title": "param", "desc": "", "type": "", "name": "A", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "B", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "reduced", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "fn", "params": [{ "title": "param", "desc": "", "type": "", "name": "A", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "B", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "reduced", "isOptional": false, "defaultValue": "" }] }], "comment": { "tagTexts": ["desc 求两个或多个数组的笛卡尔积，返回一个二维数组。", "param {Array} arrayA 要进行求笛卡尔积的数组A。", "param {Array} arrayB 要进行求笛卡尔积的数组B。", "return {Array} 返回一个笛卡尔积的二维数组。", "example： \n        var A = [a, b]; \n        var B = [0, 1, 2]; 求积后结果为：\n        var C = $.Array.descartes(A, B);\n        //得到 \n        C = [ \n            [a, 0], [a, 1], [a, 2], \n            [b, 0], [b, 1], [b, 2] \n        ];\n注意：\n  $.Array.descartes(A, B, C)并不等于（但等于$.Array(A).descartes(B, C)的结果）\n  $.Array.descartes($.Array.descartes(A, B), C)（但等于$.Array(A).descartes(B).descartes(C)的结果）\n    "], "src": "\n@desc 求两个或多个数组的笛卡尔积，返回一个二维数组。\n@param {Array} arrayA 要进行求笛卡尔积的数组A。\n@param {Array} arrayB 要进行求笛卡尔积的数组B。\n@return {Array} 返回一个笛卡尔积的二维数组。\n@example： \n        var A = [a, b]; \n        var B = [0, 1, 2]; 求积后结果为：\n        var C = $.Array.descartes(A, B);\n        //得到 \n        C = [ \n            [a, 0], [a, 1], [a, 2], \n            [b, 0], [b, 1], [b, 2] \n        ];\n注意：\n  $.Array.descartes(A, B, C)并不等于（但等于$.Array(A).descartes(B, C)的结果）\n  $.Array.descartes($.Array.descartes(A, B), C)（但等于$.Array(A).descartes(B).descartes(C)的结果）\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "求两个或多个数组的笛卡尔积，返回一个二维数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行求笛卡尔积的数组A。", "type": "Array", "name": "arrayA", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行求笛卡尔积的数组B。", "type": "Array", "name": "arrayB", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个笛卡尔积的二维数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example：", "desc": "var A = [a, b]; \n        var B = [0, 1, 2]; 求积后结果为：\n        var C = $.Array.descartes(A, B);\n        //得到 \n        C = [ \n            [a, 0], [a, 1], [a, 2], \n            [b, 0], [b, 1], [b, 2] \n        ];\n注意：\n  $.Array.descartes(A, B, C)并不等于（但等于$.Array(A).descartes(B, C)的结果）\n  $.Array.descartes($.Array.descartes(A, B), C)（但等于$.Array(A).descartes(B).descartes(C)的结果）", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [{ "title": "return", "desc": "返回一个笛卡尔积的二维数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "descartes", "_params": [{ "title": "param", "desc": "要进行求笛卡尔积的数组A。", "type": "Array", "name": "arrayA", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行求笛卡尔积的数组B。", "type": "Array", "name": "arrayB", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "descartes", "params": [{ "title": "param", "desc": "要进行求笛卡尔积的数组A。", "type": "Array", "name": "arrayA", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行求笛卡尔积的数组B。", "type": "Array", "name": "arrayB", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把笛卡尔积分解成因子，返回一个二维数组。\n该方法是求笛卡尔积的逆过程。\n参数 sizes 是各因子的长度组成的一维数组。", "alias": "MiniQuery.Array.divideDescartes", "id": 156, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 把笛卡尔积分解成因子，返回一个二维数组。\n该方法是求笛卡尔积的逆过程。\n参数 sizes 是各因子的长度组成的一维数组。\n    "], "src": "\n@desc 把笛卡尔积分解成因子，返回一个二维数组。\n该方法是求笛卡尔积的逆过程。\n参数 sizes 是各因子的长度组成的一维数组。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把笛卡尔积分解成因子，返回一个二维数组。\n该方法是求笛卡尔积的逆过程。\n参数 sizes 是各因子的长度组成的一维数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "divideDescartes", "_params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "sizes", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "divideDescartes", "params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "sizes", "isOptional": false, "defaultValue": "" }] }, { "type": "Array", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "对数组进行转置。\n即把数组的行与列对换，返回一个新数组。", "alias": "MiniQuery.Array.transpose", "id": 166, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 对数组进行转置。\n即把数组的行与列对换，返回一个新数组。", "param {Array} array 要进行转置的数组。", "return {Array} 返回一个转置后的数组。", "example\n  var A = [\n            ['a', 'b', 'c'],\n            [100, 200, 300]\n        ];\n        var B = $.Array.transpose(A);\n        //得到\n        C = [\n            ['a', 100],\n            ['b', 200],\n            ['c', 300],\n        ]\n    "], "src": "\n@desc 对数组进行转置。\n即把数组的行与列对换，返回一个新数组。\n@param {Array} array 要进行转置的数组。\n@return {Array} 返回一个转置后的数组。\n@example\n  var A = [\n            ['a', 'b', 'c'],\n            [100, 200, 300]\n        ];\n        var B = $.Array.transpose(A);\n        //得到\n        C = [\n            ['a', 100],\n            ['b', 200],\n            ['c', 300],\n        ]\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "对数组进行转置。\n即把数组的行与列对换，返回一个新数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行转置的数组。", "type": "Array", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个转置后的数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "  var A = [\n            ['a', 'b', 'c'],\n            [100, 200, 300]\n        ];\n        var B = $.Array.transpose(A);\n        //得到\n        C = [\n            ['a', 100],\n            ['b', 200],\n            ['c', 300],\n        ]", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [{ "title": "return", "desc": "返回一个转置后的数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "transpose", "_params": [{ "title": "param", "desc": "要进行转置的数组。", "type": "Array", "name": "array", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "  var A = [\n            ['a', 'b', 'c'],\n            [100, 200, 300]\n        ];\n        var B = $.Array.transpose(A);\n        //得到\n        C = [\n            ['a', 100],\n            ['b', 200],\n            ['c', 300],\n        ]", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "transpose", "params": [{ "title": "param", "desc": "要进行转置的数组。", "type": "Array", "name": "array", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "求两个或多个数组的交集，返回一个最小集的新数组。\n即返回的数组中，已对元素进行去重。\n元素与元素的比较操作用的是全等关系", "alias": "MiniQuery.Array.intersection", "id": 175, "isStatic": true, "see": [], "methods": [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.Array.intersection-fn", "id": 180, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.Array.intersection", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "fn", "_params": [{ "title": "param", "desc": "", "type": "", "name": "A", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "B", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "fn", "params": [{ "title": "param", "desc": "", "type": "", "name": "A", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "B", "isOptional": false, "defaultValue": "" }] }], "comment": { "tagTexts": ["desc 求两个或多个数组的交集，返回一个最小集的新数组。\n即返回的数组中，已对元素进行去重。\n元素与元素的比较操作用的是全等关系\n    "], "src": "\n@desc 求两个或多个数组的交集，返回一个最小集的新数组。\n即返回的数组中，已对元素进行去重。\n元素与元素的比较操作用的是全等关系\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "求两个或多个数组的交集，返回一个最小集的新数组。\n即返回的数组中，已对元素进行去重。\n元素与元素的比较操作用的是全等关系", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "intersection", "_params": [{ "title": "param", "desc": "", "type": "", "name": "arrayA", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "arrayB", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "intersection", "params": [{ "title": "param", "desc": "", "type": "", "name": "arrayA", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "arrayB", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "判断两个数组是否相等。\n只有同为数组并且长度一致时，才有可能相等。\n如何定义两个元素相等，或者定义两个元素相等的标准，由参数 fn 指定。\n当不指定 fn 时，由使用全等(严格相等)来判断", "alias": "MiniQuery.Array.equals", "id": 187, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 判断两个数组是否相等。\n只有同为数组并且长度一致时，才有可能相等。\n如何定义两个元素相等，或者定义两个元素相等的标准，由参数 fn 指定。\n当不指定 fn 时，由使用全等(严格相等)来判断\n    "], "src": "\n@desc 判断两个数组是否相等。\n只有同为数组并且长度一致时，才有可能相等。\n如何定义两个元素相等，或者定义两个元素相等的标准，由参数 fn 指定。\n当不指定 fn 时，由使用全等(严格相等)来判断\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "判断两个数组是否相等。\n只有同为数组并且长度一致时，才有可能相等。\n如何定义两个元素相等，或者定义两个元素相等的标准，由参数 fn 指定。\n当不指定 fn 时，由使用全等(严格相等)来判断", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "equals", "_params": [{ "title": "param", "desc": "", "type": "", "name": "A", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "B", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "fn", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "equals", "params": [{ "title": "param", "desc": "", "type": "", "name": "A", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "B", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "fn", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "判断第一个数组 A 是否包含于第二个数组 B，即 A 中所有的元素都可以在 B 中找到。", "alias": "MiniQuery.Array.isContained", "id": 192, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 判断第一个数组 A 是否包含于第二个数组 B，即 A 中所有的元素都可以在 B 中找到。\n    "], "src": "\n@desc 判断第一个数组 A 是否包含于第二个数组 B，即 A 中所有的元素都可以在 B 中找到。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "判断第一个数组 A 是否包含于第二个数组 B，即 A 中所有的元素都可以在 B 中找到。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "isContained", "_params": [{ "title": "param", "desc": "", "type": "", "name": "A", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "B", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "isContained", "params": [{ "title": "param", "desc": "", "type": "", "name": "A", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "B", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "右对齐此数组，在左边用指定的项填充以达到指定的总长度，返回一个新数组。\n当指定的总长度小实际长度时，将从右边开始算起，做截断处理，以达到指定的总长度。", "alias": "MiniQuery.Array.padLeft", "id": 193, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 右对齐此数组，在左边用指定的项填充以达到指定的总长度，返回一个新数组。\n当指定的总长度小实际长度时，将从右边开始算起，做截断处理，以达到指定的总长度。\n    "], "src": "\n@desc 右对齐此数组，在左边用指定的项填充以达到指定的总长度，返回一个新数组。\n当指定的总长度小实际长度时，将从右边开始算起，做截断处理，以达到指定的总长度。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "右对齐此数组，在左边用指定的项填充以达到指定的总长度，返回一个新数组。\n当指定的总长度小实际长度时，将从右边开始算起，做截断处理，以达到指定的总长度。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "padLeft", "_params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "totalLength", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "paddingItem", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "padLeft", "params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "totalLength", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "paddingItem", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "左对齐此数组，在右边用指定的项填充以达到指定的总长度，返回一个新数组。\n当指定的总长度小实际长度时，将从左边开始算起，做截断处理，以达到指定的总长度。", "alias": "MiniQuery.Array.padRight", "id": 198, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 左对齐此数组，在右边用指定的项填充以达到指定的总长度，返回一个新数组。\n当指定的总长度小实际长度时，将从左边开始算起，做截断处理，以达到指定的总长度。\n    "], "src": "\n@desc 左对齐此数组，在右边用指定的项填充以达到指定的总长度，返回一个新数组。\n当指定的总长度小实际长度时，将从左边开始算起，做截断处理，以达到指定的总长度。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "左对齐此数组，在右边用指定的项填充以达到指定的总长度，返回一个新数组。\n当指定的总长度小实际长度时，将从左边开始算起，做截断处理，以达到指定的总长度。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "padRight", "_params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "totalLength", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "paddingItem", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "padRight", "params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "totalLength", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "paddingItem", "isOptional": false, "defaultValue": "" }] }, { "type": "Array", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "产生一个区间为 [start, end) 的半开区间的数组。", "alias": "MiniQuery.Array.pad", "id": 202, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 产生一个区间为 [start, end) 的半开区间的数组。", "param {number} start 半开区间的开始值。", "param {number} end 半开区间的结束值。", "param {number} [step=1] 填充的步长，默认值为 1。可以指定为负数。", "return {Array} 返回一个递增（减）的数组。<br />\n  当 start 与 end 相等时，返回一个空数组。", "example\n        $.Array.pad(1, 9, 2); //产生一个从1到9的数组，步长为2，结果为[1, 3, 5, 7]\n        $.Array.pad(5, 2, -1); //产生一个从5到2的数组，步长为-1，结果为[5, 4, 3]\n    "], "src": "\n@desc 产生一个区间为 [start, end) 的半开区间的数组。\n@param {number} start 半开区间的开始值。\n@param {number} end 半开区间的结束值。\n@param {number} [step=1] 填充的步长，默认值为 1。可以指定为负数。\n@return {Array} 返回一个递增（减）的数组。<br />\n  当 start 与 end 相等时，返回一个空数组。\n@example\n        $.Array.pad(1, 9, 2); //产生一个从1到9的数组，步长为2，结果为[1, 3, 5, 7]\n        $.Array.pad(5, 2, -1); //产生一个从5到2的数组，步长为-1，结果为[5, 4, 3]\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "产生一个区间为 [start, end) 的半开区间的数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "半开区间的开始值。", "type": "number", "name": "start", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "半开区间的结束值。", "type": "number", "name": "end", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "填充的步长，默认值为 1。可以指定为负数。", "type": "number", "name": "step", "isOptional": true, "defaultValue": "1" }, { "title": "return", "desc": "返回一个递增（减）的数组。<br />\n  当 start 与 end 相等时，返回一个空数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Array.pad(1, 9, 2); //产生一个从1到9的数组，步长为2，结果为[1, 3, 5, 7]\n        $.Array.pad(5, 2, -1); //产生一个从5到2的数组，步长为-1，结果为[5, 4, 3]", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [{ "title": "return", "desc": "返回一个递增（减）的数组。<br />\n  当 start 与 end 相等时，返回一个空数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "pad", "_params": [{ "title": "param", "desc": "半开区间的开始值。", "type": "number", "name": "start", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "半开区间的结束值。", "type": "number", "name": "end", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "填充的步长，默认值为 1。可以指定为负数。", "type": "number", "name": "step", "isOptional": true, "defaultValue": "1" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Array.pad(1, 9, 2); //产生一个从1到9的数组，步长为2，结果为[1, 3, 5, 7]\n        $.Array.pad(5, 2, -1); //产生一个从5到2的数组，步长为-1，结果为[5, 4, 3]", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "pad", "params": [{ "title": "param", "desc": "半开区间的开始值。", "type": "number", "name": "start", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "半开区间的结束值。", "type": "number", "name": "end", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "填充的步长，默认值为 1。可以指定为负数。", "type": "number", "name": "step", "isOptional": true, "defaultValue": "1" }] }, { "type": "Object", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "对一个数组进行分类聚合。<br />\n该方法常用于对一个 JSON 数组按某个字段的值进行分组而得到一个新的 Object 对象。", "alias": "MiniQuery.Array.aggregate", "id": 207, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 对一个数组进行分类聚合。<br />\n该方法常用于对一个 JSON 数组按某个字段的值进行分组而得到一个新的 Object 对象。", "param {Array} array 要进行分类聚合的数组。一般是 JSON 数组。", "param {string|function} getKey 用于分类聚合的键，即要对 JSON 数组中的每项取哪个成员进行分类。<br />\n        可以提供一个字符串值，也可以提供一个函数以返回一个键值。<br />\n        如果提供的是函数，则会在参数中接收到当前处理的数组项和索引。", "param {function} [getValue] 用于处理当前数组项的函数，返回一个新值代替原来的数组项。<br />\n        如果指定该参数，则会在参数中接收到当前处理的数组项和索引，然后返回一个新值来代替原来的数组项。<br />\n        注意：类似于 $.Array.map 的规定用法，<br />\n            当返回 null 时，则会 continue，忽略该返回值；<br />\n            当返回 undefined 时，则会 break，停止再迭代数组；", "return {Object} 返回一个经过分类聚合的 Object 对象。", "example\n        var books = [\n            { name: 'C++', type: '计算机', year: 2012 },   \n            { name: 'JavaScript', type: '计算机', year: 2011 },\n            { name: '简爱', type: '文学', year: 2011 },\n            { name: '数据结构', type: '计算机', year: 2013 },\n            { name: '人生', type: '文学', year: 2012 },\n            { name: '大学物理', type: '物理', year: 2012 },\n            { name: '高等数学', type: '数学', year: 2011 },\n            { name: '微积分', type: '数学', year: 2013 }\n        ];\n        //按 type 进行聚合(分组)\n        var byTypes = $.Array.aggregate( books, 'type' );  \n        \n        //按 year 进行聚合(分组)，并重新返回一个值。\n        var byYears = $.Array.aggregate( books, 'year', function(item, index) {\n            return { name: item.name, type: item.type, year: '出版年份：' + item.year };\n        });   \n    \n        则 byTypes = {\n            '计算机': [\n                { name: 'C++', type: '计算机', year: 2012 },   \n                { name: 'JavaScript', type: '计算机', year: 2011 },\n                { name: '数据结构', type: '计算机', year: 2013 }\n            ],\n            '文学': [\n                { name: '简爱', type: '文学', year: 2011 }\n            ],\n            '物理': [\n                { name: '大学物理', type: '物理', year: 2012 }\n            ],\n            '数学': [\n                { name: '高等数学', type: '数学', year: 2011 },\n                { name: '微积分', type: '数学', year: 2013 }\n            ]\n        };\n    \n        byYears = {\n            2011: [\n                { name: 'JavaScript', type: '计算机', year: '出版年份：2011' },\n                { name: '简爱', type: '文学', year: '出版年份：2011' },\n                { name: '高等数学', type: '数学', year: '出版年份：2011' }\n            ],\n            2012: [\n                { name: 'C++', type: '计算机', year: '出版年份：2012' },\n                { name: '人生', type: '文学', year: '出版年份：2012' },\n                { name: '大学物理', type: '物理', year: '出版年份：2012' }\n            ],\n            2013: [\n                { name: '数据结构', type: '计算机', year: '出版年份：2013' },\n                { name: '微积分', type: '数学', year: '出版年份：2013' }\n            ]\n        };\n    "], "src": "\n@desc 对一个数组进行分类聚合。<br />\n该方法常用于对一个 JSON 数组按某个字段的值进行分组而得到一个新的 Object 对象。\n@param {Array} array 要进行分类聚合的数组。一般是 JSON 数组。\n@param {string|function} getKey 用于分类聚合的键，即要对 JSON 数组中的每项取哪个成员进行分类。<br />\n        可以提供一个字符串值，也可以提供一个函数以返回一个键值。<br />\n        如果提供的是函数，则会在参数中接收到当前处理的数组项和索引。\n@param {function} [getValue] 用于处理当前数组项的函数，返回一个新值代替原来的数组项。<br />\n        如果指定该参数，则会在参数中接收到当前处理的数组项和索引，然后返回一个新值来代替原来的数组项。<br />\n        注意：类似于 $.Array.map 的规定用法，<br />\n            当返回 null 时，则会 continue，忽略该返回值；<br />\n            当返回 undefined 时，则会 break，停止再迭代数组；\n@return {Object} 返回一个经过分类聚合的 Object 对象。\n@example\n        var books = [\n            { name: 'C++', type: '计算机', year: 2012 },   \n            { name: 'JavaScript', type: '计算机', year: 2011 },\n            { name: '简爱', type: '文学', year: 2011 },\n            { name: '数据结构', type: '计算机', year: 2013 },\n            { name: '人生', type: '文学', year: 2012 },\n            { name: '大学物理', type: '物理', year: 2012 },\n            { name: '高等数学', type: '数学', year: 2011 },\n            { name: '微积分', type: '数学', year: 2013 }\n        ];\n        //按 type 进行聚合(分组)\n        var byTypes = $.Array.aggregate( books, 'type' );  \n        \n        //按 year 进行聚合(分组)，并重新返回一个值。\n        var byYears = $.Array.aggregate( books, 'year', function(item, index) {\n            return { name: item.name, type: item.type, year: '出版年份：' + item.year };\n        });   \n    \n        则 byTypes = {\n            '计算机': [\n                { name: 'C++', type: '计算机', year: 2012 },   \n                { name: 'JavaScript', type: '计算机', year: 2011 },\n                { name: '数据结构', type: '计算机', year: 2013 }\n            ],\n            '文学': [\n                { name: '简爱', type: '文学', year: 2011 }\n            ],\n            '物理': [\n                { name: '大学物理', type: '物理', year: 2012 }\n            ],\n            '数学': [\n                { name: '高等数学', type: '数学', year: 2011 },\n                { name: '微积分', type: '数学', year: 2013 }\n            ]\n        };\n    \n        byYears = {\n            2011: [\n                { name: 'JavaScript', type: '计算机', year: '出版年份：2011' },\n                { name: '简爱', type: '文学', year: '出版年份：2011' },\n                { name: '高等数学', type: '数学', year: '出版年份：2011' }\n            ],\n            2012: [\n                { name: 'C++', type: '计算机', year: '出版年份：2012' },\n                { name: '人生', type: '文学', year: '出版年份：2012' },\n                { name: '大学物理', type: '物理', year: '出版年份：2012' }\n            ],\n            2013: [\n                { name: '数据结构', type: '计算机', year: '出版年份：2013' },\n                { name: '微积分', type: '数学', year: '出版年份：2013' }\n            ]\n        };\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "对一个数组进行分类聚合。<br />\n该方法常用于对一个 JSON 数组按某个字段的值进行分组而得到一个新的 Object 对象。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行分类聚合的数组。一般是 JSON 数组。", "type": "Array", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "用于分类聚合的键，即要对 JSON 数组中的每项取哪个成员进行分类。<br />\n        可以提供一个字符串值，也可以提供一个函数以返回一个键值。<br />\n        如果提供的是函数，则会在参数中接收到当前处理的数组项和索引。", "type": "string|function", "name": "getKey", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "用于处理当前数组项的函数，返回一个新值代替原来的数组项。<br />\n        如果指定该参数，则会在参数中接收到当前处理的数组项和索引，然后返回一个新值来代替原来的数组项。<br />\n        注意：类似于 $.Array.map 的规定用法，<br />\n            当返回 null 时，则会 continue，忽略该返回值；<br />\n            当返回 undefined 时，则会 break，停止再迭代数组；", "type": "function", "name": "getValue", "isOptional": true, "defaultValue": "" }, { "title": "return", "desc": "返回一个经过分类聚合的 Object 对象。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var books = [\n            { name: 'C++', type: '计算机', year: 2012 },   \n            { name: 'JavaScript', type: '计算机', year: 2011 },\n            { name: '简爱', type: '文学', year: 2011 },\n            { name: '数据结构', type: '计算机', year: 2013 },\n            { name: '人生', type: '文学', year: 2012 },\n            { name: '大学物理', type: '物理', year: 2012 },\n            { name: '高等数学', type: '数学', year: 2011 },\n            { name: '微积分', type: '数学', year: 2013 }\n        ];\n        //按 type 进行聚合(分组)\n        var byTypes = $.Array.aggregate( books, 'type' );  \n        \n        //按 year 进行聚合(分组)，并重新返回一个值。\n        var byYears = $.Array.aggregate( books, 'year', function(item, index) {\n            return { name: item.name, type: item.type, year: '出版年份：' + item.year };\n        });   \n    \n        则 byTypes = {\n            '计算机': [\n                { name: 'C++', type: '计算机', year: 2012 },   \n                { name: 'JavaScript', type: '计算机', year: 2011 },\n                { name: '数据结构', type: '计算机', year: 2013 }\n            ],\n            '文学': [\n                { name: '简爱', type: '文学', year: 2011 }\n            ],\n            '物理': [\n                { name: '大学物理', type: '物理', year: 2012 }\n            ],\n            '数学': [\n                { name: '高等数学', type: '数学', year: 2011 },\n                { name: '微积分', type: '数学', year: 2013 }\n            ]\n        };\n    \n        byYears = {\n            2011: [\n                { name: 'JavaScript', type: '计算机', year: '出版年份：2011' },\n                { name: '简爱', type: '文学', year: '出版年份：2011' },\n                { name: '高等数学', type: '数学', year: '出版年份：2011' }\n            ],\n            2012: [\n                { name: 'C++', type: '计算机', year: '出版年份：2012' },\n                { name: '人生', type: '文学', year: '出版年份：2012' },\n                { name: '大学物理', type: '物理', year: '出版年份：2012' }\n            ],\n            2013: [\n                { name: '数据结构', type: '计算机', year: '出版年份：2013' },\n                { name: '微积分', type: '数学', year: '出版年份：2013' }\n            ]\n        };", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [{ "title": "return", "desc": "返回一个经过分类聚合的 Object 对象。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "aggregate", "_params": [{ "title": "param", "desc": "要进行分类聚合的数组。一般是 JSON 数组。", "type": "Array", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "用于分类聚合的键，即要对 JSON 数组中的每项取哪个成员进行分类。<br />\n        可以提供一个字符串值，也可以提供一个函数以返回一个键值。<br />\n        如果提供的是函数，则会在参数中接收到当前处理的数组项和索引。", "type": "string|function", "name": "getKey", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "用于处理当前数组项的函数，返回一个新值代替原来的数组项。<br />\n        如果指定该参数，则会在参数中接收到当前处理的数组项和索引，然后返回一个新值来代替原来的数组项。<br />\n        注意：类似于 $.Array.map 的规定用法，<br />\n            当返回 null 时，则会 continue，忽略该返回值；<br />\n            当返回 undefined 时，则会 break，停止再迭代数组；", "type": "function", "name": "getValue", "isOptional": true, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var books = [\n            { name: 'C++', type: '计算机', year: 2012 },   \n            { name: 'JavaScript', type: '计算机', year: 2011 },\n            { name: '简爱', type: '文学', year: 2011 },\n            { name: '数据结构', type: '计算机', year: 2013 },\n            { name: '人生', type: '文学', year: 2012 },\n            { name: '大学物理', type: '物理', year: 2012 },\n            { name: '高等数学', type: '数学', year: 2011 },\n            { name: '微积分', type: '数学', year: 2013 }\n        ];\n        //按 type 进行聚合(分组)\n        var byTypes = $.Array.aggregate( books, 'type' );  \n        \n        //按 year 进行聚合(分组)，并重新返回一个值。\n        var byYears = $.Array.aggregate( books, 'year', function(item, index) {\n            return { name: item.name, type: item.type, year: '出版年份：' + item.year };\n        });   \n    \n        则 byTypes = {\n            '计算机': [\n                { name: 'C++', type: '计算机', year: 2012 },   \n                { name: 'JavaScript', type: '计算机', year: 2011 },\n                { name: '数据结构', type: '计算机', year: 2013 }\n            ],\n            '文学': [\n                { name: '简爱', type: '文学', year: 2011 }\n            ],\n            '物理': [\n                { name: '大学物理', type: '物理', year: 2012 }\n            ],\n            '数学': [\n                { name: '高等数学', type: '数学', year: 2011 },\n                { name: '微积分', type: '数学', year: 2013 }\n            ]\n        };\n    \n        byYears = {\n            2011: [\n                { name: 'JavaScript', type: '计算机', year: '出版年份：2011' },\n                { name: '简爱', type: '文学', year: '出版年份：2011' },\n                { name: '高等数学', type: '数学', year: '出版年份：2011' }\n            ],\n            2012: [\n                { name: 'C++', type: '计算机', year: '出版年份：2012' },\n                { name: '人生', type: '文学', year: '出版年份：2012' },\n                { name: '大学物理', type: '物理', year: '出版年份：2012' }\n            ],\n            2013: [\n                { name: '数据结构', type: '计算机', year: '出版年份：2013' },\n                { name: '微积分', type: '数学', year: '出版年份：2013' }\n            ]\n        };", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "aggregate", "params": [{ "title": "param", "desc": "要进行分类聚合的数组。一般是 JSON 数组。", "type": "Array", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "用于分类聚合的键，即要对 JSON 数组中的每项取哪个成员进行分类。<br />\n        可以提供一个字符串值，也可以提供一个函数以返回一个键值。<br />\n        如果提供的是函数，则会在参数中接收到当前处理的数组项和索引。", "type": "string|function", "name": "getKey", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "用于处理当前数组项的函数，返回一个新值代替原来的数组项。<br />\n        如果指定该参数，则会在参数中接收到当前处理的数组项和索引，然后返回一个新值来代替原来的数组项。<br />\n        注意：类似于 $.Array.map 的规定用法，<br />\n            当返回 null 时，则会 continue，忽略该返回值；<br />\n            当返回 undefined 时，则会 break，停止再迭代数组；", "type": "function", "name": "getValue", "isOptional": true, "defaultValue": "" }] }, { "type": "Array", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "从一个数组拷贝一份并添加一个项目，返回一个新的数组。", "alias": "MiniQuery.Array.add", "id": 217, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 从一个数组拷贝一份并添加一个项目，返回一个新的数组。", "param {Array} array 要进行拷贝的数组。 ", "param item 要进行添加的元素。", "return {Array} 返回一个包含新添加的元素的新数组。", "example\n        var a = ['a', 'b'];\n        var b = $.Array.add(a, 'c');\n        console.dir(a); //结果没变，仍为 ['a', 'b']\n        console.dir(b); //结果为 ['a', 'b', 'c'];\n\n    "], "src": "\n@desc 从一个数组拷贝一份并添加一个项目，返回一个新的数组。\n@param {Array} array 要进行拷贝的数组。 \n@param item 要进行添加的元素。\n@return {Array} 返回一个包含新添加的元素的新数组。\n@example\n        var a = ['a', 'b'];\n        var b = $.Array.add(a, 'c');\n        console.dir(a); //结果没变，仍为 ['a', 'b']\n        console.dir(b); //结果为 ['a', 'b', 'c'];\n\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "从一个数组拷贝一份并添加一个项目，返回一个新的数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行拷贝的数组。", "type": "Array", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行添加的元素。", "type": "", "name": "item", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个包含新添加的元素的新数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var a = ['a', 'b'];\n        var b = $.Array.add(a, 'c');\n        console.dir(a); //结果没变，仍为 ['a', 'b']\n        console.dir(b); //结果为 ['a', 'b', 'c'];", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [{ "title": "return", "desc": "返回一个包含新添加的元素的新数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "add", "_params": [{ "title": "param", "desc": "要进行拷贝的数组。", "type": "Array", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行添加的元素。", "type": "", "name": "item", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var a = ['a', 'b'];\n        var b = $.Array.add(a, 'c');\n        console.dir(a); //结果没变，仍为 ['a', 'b']\n        console.dir(b); //结果为 ['a', 'b', 'c'];", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "add", "params": [{ "title": "param", "desc": "要进行拷贝的数组。", "type": "Array", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行添加的元素。", "type": "", "name": "item", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "统计一个数组中特定的项的个数。", "alias": "MiniQuery.Array.count", "id": 219, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 统计一个数组中特定的项的个数。\n    "], "src": "\n@desc 统计一个数组中特定的项的个数。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "统计一个数组中特定的项的个数。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Array", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "FUNCTION", "_name": "count", "_params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "fn", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "count", "params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "fn", "isOptional": false, "defaultValue": "" }] }], "comment": { "tagTexts": ["desc 数组工具", "class\n"], "src": "\n@desc 数组工具\n@class\n", "meta": "", "tags": [{ "title": "desc", "desc": "数组工具", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "class", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Array.js", "exceptions": [], "isa": "CONSTRUCTOR", "_name": "Array", "_params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "Array", "params": [{ "title": "param", "desc": "", "type": "", "name": "array", "isOptional": false, "defaultValue": "" }] }, { "type": "MiniQuery.Boolean", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "Boolean 工具类", "alias": "MiniQuery.Boolean", "id": 322, "isStatic": true, "see": [], "methods": [{ "type": "boolean", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "解析指定的参数为 bool 值。\nnull、undefined、0、NaN、false、'' 及其相应的字符串形式会转成 false；\n其它的转成 true", "alias": "MiniQuery.Boolean.parse", "id": 325, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 解析指定的参数为 bool 值。\nnull、undefined、0、NaN、false、'' 及其相应的字符串形式会转成 false；\n其它的转成 true", "param {Object} arg 要进行进换的值，可以是任何类型。", "return {boolean} 返回一个 bool 值。", "example\n        $.Boolean.parse(null); //false;\n        $.Boolean.parse('null'); //false;\n        $.Boolean.parse(undefined); //false;\n        $.Boolean.parse('undefined'); //false;\n        $.Boolean.parse(0); //false;\n        $.Boolean.parse('0'); //false;\n        $.Boolean.parse(NaN); //false;\n        $.Boolean.parse('NaN'); //false;\n        $.Boolean.parse(false); //false;\n        $.Boolean.parse('false'); //false;\n        $.Boolean.parse(''); //false;\n        $.Boolean.parse(true); //true;\n        $.Boolean.parse({}); //true;\n    "], "src": "\n@desc 解析指定的参数为 bool 值。\nnull、undefined、0、NaN、false、'' 及其相应的字符串形式会转成 false；\n其它的转成 true\n@param {Object} arg 要进行进换的值，可以是任何类型。\n@return {boolean} 返回一个 bool 值。\n@example\n        $.Boolean.parse(null); //false;\n        $.Boolean.parse('null'); //false;\n        $.Boolean.parse(undefined); //false;\n        $.Boolean.parse('undefined'); //false;\n        $.Boolean.parse(0); //false;\n        $.Boolean.parse('0'); //false;\n        $.Boolean.parse(NaN); //false;\n        $.Boolean.parse('NaN'); //false;\n        $.Boolean.parse(false); //false;\n        $.Boolean.parse('false'); //false;\n        $.Boolean.parse(''); //false;\n        $.Boolean.parse(true); //true;\n        $.Boolean.parse({}); //true;\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "解析指定的参数为 bool 值。\nnull、undefined、0、NaN、false、'' 及其相应的字符串形式会转成 false；\n其它的转成 true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行进换的值，可以是任何类型。", "type": "Object", "name": "arg", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个 bool 值。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Boolean.parse(null); //false;\n        $.Boolean.parse('null'); //false;\n        $.Boolean.parse(undefined); //false;\n        $.Boolean.parse('undefined'); //false;\n        $.Boolean.parse(0); //false;\n        $.Boolean.parse('0'); //false;\n        $.Boolean.parse(NaN); //false;\n        $.Boolean.parse('NaN'); //false;\n        $.Boolean.parse(false); //false;\n        $.Boolean.parse('false'); //false;\n        $.Boolean.parse(''); //false;\n        $.Boolean.parse(true); //true;\n        $.Boolean.parse({}); //true;", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Boolean", "since": "", "returns": [{ "title": "return", "desc": "返回一个 bool 值。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Boolean.js", "exceptions": [], "isa": "FUNCTION", "_name": "parse", "_params": [{ "title": "param", "desc": "要进行进换的值，可以是任何类型。", "type": "Object", "name": "arg", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Boolean.parse(null); //false;\n        $.Boolean.parse('null'); //false;\n        $.Boolean.parse(undefined); //false;\n        $.Boolean.parse('undefined'); //false;\n        $.Boolean.parse(0); //false;\n        $.Boolean.parse('0'); //false;\n        $.Boolean.parse(NaN); //false;\n        $.Boolean.parse('NaN'); //false;\n        $.Boolean.parse(false); //false;\n        $.Boolean.parse('false'); //false;\n        $.Boolean.parse(''); //false;\n        $.Boolean.parse(true); //true;\n        $.Boolean.parse({}); //true;", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "parse", "params": [{ "title": "param", "desc": "要进行进换的值，可以是任何类型。", "type": "Object", "name": "arg", "isOptional": false, "defaultValue": "" }] }, { "type": "int", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "解析指定的参数为 int 值：0 或 1。\nnull、undefined、0、NaN、false、'' 及其相应的字符串形式会转成 0；\n其它的转成 1", "alias": "MiniQuery.Boolean.toInt", "id": 327, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 解析指定的参数为 int 值：0 或 1。\nnull、undefined、0、NaN、false、'' 及其相应的字符串形式会转成 0；\n其它的转成 1", "param {Object} 要进行转换的值，可以是任何类型。", "return {int} 返回一个整型值 0 或 1。", "example\n        $.Boolean.toInt(null); //0;\n        $.Boolean.toInt('null'); //0;\n        $.Boolean.toInt(undefined); //0;\n        $.Boolean.toInt('undefined'); //0;\n        $.Boolean.toInt(0); //0;\n        $.Boolean.toInt('0'); //0;\n        $.Boolean.toInt(NaN); //0;\n        $.Boolean.toInt('NaN'); //0;\n        $.Boolean.toInt(false); //0;\n        $.Boolean.toInt('false'); //0;\n        $.Boolean.toInt(''); //0;\n        $.Boolean.toInt(true); //1;\n        $.Boolean.toInt({}); //1;\n    "], "src": "\n@desc 解析指定的参数为 int 值：0 或 1。\nnull、undefined、0、NaN、false、'' 及其相应的字符串形式会转成 0；\n其它的转成 1\n@param {Object} 要进行转换的值，可以是任何类型。\n@return {int} 返回一个整型值 0 或 1。\n@example\n        $.Boolean.toInt(null); //0;\n        $.Boolean.toInt('null'); //0;\n        $.Boolean.toInt(undefined); //0;\n        $.Boolean.toInt('undefined'); //0;\n        $.Boolean.toInt(0); //0;\n        $.Boolean.toInt('0'); //0;\n        $.Boolean.toInt(NaN); //0;\n        $.Boolean.toInt('NaN'); //0;\n        $.Boolean.toInt(false); //0;\n        $.Boolean.toInt('false'); //0;\n        $.Boolean.toInt(''); //0;\n        $.Boolean.toInt(true); //1;\n        $.Boolean.toInt({}); //1;\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "解析指定的参数为 int 值：0 或 1。\nnull、undefined、0、NaN、false、'' 及其相应的字符串形式会转成 0；\n其它的转成 1", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "Object", "name": "要进行转换的值，可以是任何类型。", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个整型值 0 或 1。", "type": "int", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Boolean.toInt(null); //0;\n        $.Boolean.toInt('null'); //0;\n        $.Boolean.toInt(undefined); //0;\n        $.Boolean.toInt('undefined'); //0;\n        $.Boolean.toInt(0); //0;\n        $.Boolean.toInt('0'); //0;\n        $.Boolean.toInt(NaN); //0;\n        $.Boolean.toInt('NaN'); //0;\n        $.Boolean.toInt(false); //0;\n        $.Boolean.toInt('false'); //0;\n        $.Boolean.toInt(''); //0;\n        $.Boolean.toInt(true); //1;\n        $.Boolean.toInt({}); //1;", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Boolean", "since": "", "returns": [{ "title": "return", "desc": "返回一个整型值 0 或 1。", "type": "int", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Boolean.js", "exceptions": [], "isa": "FUNCTION", "_name": "toInt", "_params": [{ "title": "param", "desc": "", "type": "Object", "name": "要进行转换的值，可以是任何类型。", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Boolean.toInt(null); //0;\n        $.Boolean.toInt('null'); //0;\n        $.Boolean.toInt(undefined); //0;\n        $.Boolean.toInt('undefined'); //0;\n        $.Boolean.toInt(0); //0;\n        $.Boolean.toInt('0'); //0;\n        $.Boolean.toInt(NaN); //0;\n        $.Boolean.toInt('NaN'); //0;\n        $.Boolean.toInt(false); //0;\n        $.Boolean.toInt('false'); //0;\n        $.Boolean.toInt(''); //0;\n        $.Boolean.toInt(true); //1;\n        $.Boolean.toInt({}); //1;", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "toInt", "params": [{ "title": "param", "desc": "", "type": "Object", "name": "要进行转换的值，可以是任何类型。", "isOptional": false, "defaultValue": "" }] }, { "type": "int", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "反转一个 boolean 值，即 true 变成 false；false 变成 true。", "alias": "MiniQuery.Boolean.reverse", "id": 328, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 反转一个 boolean 值，即 true 变成 false；false 变成 true。", "param {Object} 要进行反转的值，可以是任何类型。", "return {int} 返回一个 bool 值。", "example\n        $.Boolean.reverse(null); //true;\n        $.Boolean.reverse('null'); //true;\n        $.Boolean.reverse(undefined); //true;\n        $.Boolean.reverse('undefined'); //true;\n        $.Boolean.reverse(0); //true;\n        $.Boolean.reverse('0'); //true;\n        $.Boolean.reverse(NaN); //true;\n        $.Boolean.reverse('NaN'); //true;\n        $.Boolean.reverse(false); //true;\n        $.Boolean.reverse('false'); //true;\n        $.Boolean.reverse(''); //true;\n        $.Boolean.reverse(true); //false;\n        $.Boolean.reverse({}); //false;\n    "], "src": "\n@desc 反转一个 boolean 值，即 true 变成 false；false 变成 true。\n@param {Object} 要进行反转的值，可以是任何类型。\n@return {int} 返回一个 bool 值。\n@example\n        $.Boolean.reverse(null); //true;\n        $.Boolean.reverse('null'); //true;\n        $.Boolean.reverse(undefined); //true;\n        $.Boolean.reverse('undefined'); //true;\n        $.Boolean.reverse(0); //true;\n        $.Boolean.reverse('0'); //true;\n        $.Boolean.reverse(NaN); //true;\n        $.Boolean.reverse('NaN'); //true;\n        $.Boolean.reverse(false); //true;\n        $.Boolean.reverse('false'); //true;\n        $.Boolean.reverse(''); //true;\n        $.Boolean.reverse(true); //false;\n        $.Boolean.reverse({}); //false;\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "反转一个 boolean 值，即 true 变成 false；false 变成 true。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "Object", "name": "要进行反转的值，可以是任何类型。", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个 bool 值。", "type": "int", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Boolean.reverse(null); //true;\n        $.Boolean.reverse('null'); //true;\n        $.Boolean.reverse(undefined); //true;\n        $.Boolean.reverse('undefined'); //true;\n        $.Boolean.reverse(0); //true;\n        $.Boolean.reverse('0'); //true;\n        $.Boolean.reverse(NaN); //true;\n        $.Boolean.reverse('NaN'); //true;\n        $.Boolean.reverse(false); //true;\n        $.Boolean.reverse('false'); //true;\n        $.Boolean.reverse(''); //true;\n        $.Boolean.reverse(true); //false;\n        $.Boolean.reverse({}); //false;", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Boolean", "since": "", "returns": [{ "title": "return", "desc": "返回一个 bool 值。", "type": "int", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Boolean.js", "exceptions": [], "isa": "FUNCTION", "_name": "reverse", "_params": [{ "title": "param", "desc": "", "type": "Object", "name": "要进行反转的值，可以是任何类型。", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Boolean.reverse(null); //true;\n        $.Boolean.reverse('null'); //true;\n        $.Boolean.reverse(undefined); //true;\n        $.Boolean.reverse('undefined'); //true;\n        $.Boolean.reverse(0); //true;\n        $.Boolean.reverse('0'); //true;\n        $.Boolean.reverse(NaN); //true;\n        $.Boolean.reverse('NaN'); //true;\n        $.Boolean.reverse(false); //true;\n        $.Boolean.reverse('false'); //true;\n        $.Boolean.reverse(''); //true;\n        $.Boolean.reverse(true); //false;\n        $.Boolean.reverse({}); //false;", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "reverse", "params": [{ "title": "param", "desc": "", "type": "Object", "name": "要进行反转的值，可以是任何类型。", "isOptional": false, "defaultValue": "" }] }, { "type": "boolean", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "产生一个随机布尔值。", "alias": "MiniQuery.Boolean.random", "id": 329, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 产生一个随机布尔值。", "return {boolean} 返回一个随机的 true 或 false。", "example\n        $.Boolean.random();\n    "], "src": "\n@desc 产生一个随机布尔值。\n@return {boolean} 返回一个随机的 true 或 false。\n@example\n        $.Boolean.random();\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "产生一个随机布尔值。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个随机的 true 或 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Boolean.random();", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Boolean", "since": "", "returns": [{ "title": "return", "desc": "返回一个随机的 true 或 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Boolean.js", "exceptions": [], "isa": "FUNCTION", "_name": "random", "_params": [], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Boolean.random();", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "random", "params": [] }], "comment": { "tagTexts": ["desc Boolean 工具类", "class", "param {Object} b 要进行进换的值，可以是任何类型。", "return {MiniQuery.Boolean} 返回一个 MiniQuery.Boolean 的实例。\n"], "src": "\n@desc Boolean 工具类\n@class\n@param {Object} b 要进行进换的值，可以是任何类型。\n@return {MiniQuery.Boolean} 返回一个 MiniQuery.Boolean 的实例。\n", "meta": "", "tags": [{ "title": "desc", "desc": "Boolean 工具类", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "class", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行进换的值，可以是任何类型。", "type": "Object", "name": "b", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个 MiniQuery.Boolean 的实例。", "type": "MiniQuery.Boolean", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery", "since": "", "returns": [{ "title": "return", "desc": "返回一个 MiniQuery.Boolean 的实例。", "type": "MiniQuery.Boolean", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Boolean.js", "exceptions": [], "isa": "CONSTRUCTOR", "_name": "Boolean", "_params": [{ "title": "param", "desc": "要进行进换的值，可以是任何类型。", "type": "Object", "name": "b", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "Boolean", "params": [{ "title": "param", "desc": "要进行进换的值，可以是任何类型。", "type": "Object", "name": "b", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "回调列表类。", "alias": "MiniQuery.Callbacks", "id": 949, "isStatic": true, "see": [], "methods": [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "添加一个回调函数到回调列表中。", "alias": "MiniQuery.Callbacks#add", "id": 955, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc 添加一个回调函数到回调列表中。", "param {function} fn 要添加的回调函数", "param {boolean} [isOnce=false] 指示回调函数是否只给调用一次。\n        如果要让回调函数给调用一次后被移除，请指定为 true；否则不指定或指定为 false。\n    "], "src": "\n@desc 添加一个回调函数到回调列表中。\n@param {function} fn 要添加的回调函数\n@param {boolean} [isOnce=false] 指示回调函数是否只给调用一次。\n        如果要让回调函数给调用一次后被移除，请指定为 true；否则不指定或指定为 false。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "添加一个回调函数到回调列表中。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要添加的回调函数", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示回调函数是否只给调用一次。\n        如果要让回调函数给调用一次后被移除，请指定为 true；否则不指定或指定为 false。", "type": "boolean", "name": "isOnce", "isOptional": true, "defaultValue": "false" }], "isUserComment": true }, "memberOf": "MiniQuery.Callbacks", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Callbacks.js", "exceptions": [], "isa": "FUNCTION", "_name": "add", "_params": [{ "title": "param", "desc": "要添加的回调函数", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示回调函数是否只给调用一次。\n        如果要让回调函数给调用一次后被移除，请指定为 true；否则不指定或指定为 false。", "type": "boolean", "name": "isOnce", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "add", "params": [{ "title": "param", "desc": "要添加的回调函数", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示回调函数是否只给调用一次。\n        如果要让回调函数给调用一次后被移除，请指定为 true；否则不指定或指定为 false。", "type": "boolean", "name": "isOnce", "isOptional": true, "defaultValue": "false" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "添加一个只调用一次的回调函数到回调列表中。", "alias": "MiniQuery.Callbacks#once", "id": 957, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc 添加一个只调用一次的回调函数到回调列表中。", "param {function} fn 要添加的回调函数。\n        该回调函数给调用一次后会被移除。\n    "], "src": "\n@desc 添加一个只调用一次的回调函数到回调列表中。\n@param {function} fn 要添加的回调函数。\n        该回调函数给调用一次后会被移除。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "添加一个只调用一次的回调函数到回调列表中。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要添加的回调函数。\n        该回调函数给调用一次后会被移除。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Callbacks", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Callbacks.js", "exceptions": [], "isa": "FUNCTION", "_name": "once", "_params": [{ "title": "param", "desc": "要添加的回调函数。\n        该回调函数给调用一次后会被移除。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "once", "params": [{ "title": "param", "desc": "要添加的回调函数。\n        该回调函数给调用一次后会被移除。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "从回调列表中移除指定的回调函数。", "alias": "MiniQuery.Callbacks#remove", "id": 959, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc 从回调列表中移除指定的回调函数。", "param {function} fn 要移除的回调函数。\n    "], "src": "\n@desc 从回调列表中移除指定的回调函数。\n@param {function} fn 要移除的回调函数。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "从回调列表中移除指定的回调函数。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要移除的回调函数。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Callbacks", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Callbacks.js", "exceptions": [], "isa": "FUNCTION", "_name": "remove", "_params": [{ "title": "param", "desc": "要移除的回调函数。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "remove", "params": [{ "title": "param", "desc": "要移除的回调函数。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }] }, { "type": "Array", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "调用回调列表中的回调函数，并可选地传递一些参数。", "alias": "MiniQuery.Callbacks#fire", "id": 961, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc 调用回调列表中的回调函数，并可选地传递一些参数。", "return {Array} 返回由被调用的回调函数的返回值所组成的数组。\n    "], "src": "\n@desc 调用回调列表中的回调函数，并可选地传递一些参数。\n@return {Array} 返回由被调用的回调函数的返回值所组成的数组。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "调用回调列表中的回调函数，并可选地传递一些参数。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回由被调用的回调函数的返回值所组成的数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Callbacks", "since": "", "returns": [{ "title": "return", "desc": "返回由被调用的回调函数的返回值所组成的数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Callbacks.js", "exceptions": [], "isa": "FUNCTION", "_name": "fire", "_params": [], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "fire", "params": [] }, { "type": "Array", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "切换到指定的上下文来调用回调列表中的回调函数，并可选传递一些参数。", "alias": "MiniQuery.Callbacks#fireWith", "id": 963, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc 切换到指定的上下文来调用回调列表中的回调函数，并可选传递一些参数。", "param {Object} context 要切换到上下文对象。\n        指定该参数后，回调函数中的 this 均指向该上下文对象。", "return {Array} 返回由被调用的回调函数的返回值所组成的数组。", "example\n        var callbacks = new $.Callbacks();\n        callbacks.add(function (a, b) {\n            console.log(this.value, a, b);\n        });\n        callbacks.fireWith({ value: 100 }, 'aa', 'bb'); //输出 100, 'aa', 'bb'\n    "], "src": "\n@desc 切换到指定的上下文来调用回调列表中的回调函数，并可选传递一些参数。\n@param {Object} context 要切换到上下文对象。\n        指定该参数后，回调函数中的 this 均指向该上下文对象。\n@return {Array} 返回由被调用的回调函数的返回值所组成的数组。\n@example\n        var callbacks = new $.Callbacks();\n        callbacks.add(function (a, b) {\n            console.log(this.value, a, b);\n        });\n        callbacks.fireWith({ value: 100 }, 'aa', 'bb'); //输出 100, 'aa', 'bb'\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "切换到指定的上下文来调用回调列表中的回调函数，并可选传递一些参数。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要切换到上下文对象。\n        指定该参数后，回调函数中的 this 均指向该上下文对象。", "type": "Object", "name": "context", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回由被调用的回调函数的返回值所组成的数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var callbacks = new $.Callbacks();\n        callbacks.add(function (a, b) {\n            console.log(this.value, a, b);\n        });\n        callbacks.fireWith({ value: 100 }, 'aa', 'bb'); //输出 100, 'aa', 'bb'", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Callbacks", "since": "", "returns": [{ "title": "return", "desc": "返回由被调用的回调函数的返回值所组成的数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Callbacks.js", "exceptions": [], "isa": "FUNCTION", "_name": "fireWith", "_params": [{ "title": "param", "desc": "要切换到上下文对象。\n        指定该参数后，回调函数中的 this 均指向该上下文对象。", "type": "Object", "name": "context", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var callbacks = new $.Callbacks();\n        callbacks.add(function (a, b) {\n            console.log(this.value, a, b);\n        });\n        callbacks.fireWith({ value: 100 }, 'aa', 'bb'); //输出 100, 'aa', 'bb'", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "fireWith", "params": [{ "title": "param", "desc": "要切换到上下文对象。\n        指定该参数后，回调函数中的 this 均指向该上下文对象。", "type": "Object", "name": "context", "isOptional": false, "defaultValue": "" }] }, { "type": "Array", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "调用回调列表中的回调函数直到某个回调函数返回指定的值为止，并可选地传递一些参数。", "alias": "MiniQuery.Callbacks#fireStop", "id": 968, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc 调用回调列表中的回调函数直到某个回调函数返回指定的值为止，并可选地传递一些参数。", "param {Object} stopValue 要使回调列表停止调用的值。\n        回调列表依次调用列表中的回调函数，当回调函数返回值为 stopValue 指定的值时，将会停止调用后面的。", "return {Array} 返回由被调用的回调函数的返回值所组成的数组。\n    "], "src": "\n@desc 调用回调列表中的回调函数直到某个回调函数返回指定的值为止，并可选地传递一些参数。\n@param {Object} stopValue 要使回调列表停止调用的值。\n        回调列表依次调用列表中的回调函数，当回调函数返回值为 stopValue 指定的值时，将会停止调用后面的。\n@return {Array} 返回由被调用的回调函数的返回值所组成的数组。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "调用回调列表中的回调函数直到某个回调函数返回指定的值为止，并可选地传递一些参数。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要使回调列表停止调用的值。\n        回调列表依次调用列表中的回调函数，当回调函数返回值为 stopValue 指定的值时，将会停止调用后面的。", "type": "Object", "name": "stopValue", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回由被调用的回调函数的返回值所组成的数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Callbacks", "since": "", "returns": [{ "title": "return", "desc": "返回由被调用的回调函数的返回值所组成的数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Callbacks.js", "exceptions": [], "isa": "FUNCTION", "_name": "fireStop", "_params": [{ "title": "param", "desc": "要使回调列表停止调用的值。\n        回调列表依次调用列表中的回调函数，当回调函数返回值为 stopValue 指定的值时，将会停止调用后面的。", "type": "Object", "name": "stopValue", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "fireStop", "params": [{ "title": "param", "desc": "要使回调列表停止调用的值。\n        回调列表依次调用列表中的回调函数，当回调函数返回值为 stopValue 指定的值时，将会停止调用后面的。", "type": "Object", "name": "stopValue", "isOptional": false, "defaultValue": "" }] }, { "type": "boolean", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "判断回调列表中是否包含指定的回调函数。", "alias": "MiniQuery.Callbacks#has", "id": 970, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc 判断回调列表中是否包含指定的回调函数。", "param {function} fn 要判断的回调函数。", "return {boolean} 如果回调列表中包含指定的回调函数，则返回 true；否则返回 false。\n    "], "src": "\n@desc 判断回调列表中是否包含指定的回调函数。\n@param {function} fn 要判断的回调函数。\n@return {boolean} 如果回调列表中包含指定的回调函数，则返回 true；否则返回 false。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "判断回调列表中是否包含指定的回调函数。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要判断的回调函数。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "如果回调列表中包含指定的回调函数，则返回 true；否则返回 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Callbacks", "since": "", "returns": [{ "title": "return", "desc": "如果回调列表中包含指定的回调函数，则返回 true；否则返回 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Callbacks.js", "exceptions": [], "isa": "FUNCTION", "_name": "has", "_params": [{ "title": "param", "desc": "要判断的回调函数。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "has", "params": [{ "title": "param", "desc": "要判断的回调函数。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "给回调列表添加/移除指定的回调函数。\n如果回调列表中存在该回调函数，则移除它；否则会添加它。", "alias": "MiniQuery.Callbacks#toggle", "id": 972, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc 给回调列表添加/移除指定的回调函数。\n如果回调列表中存在该回调函数，则移除它；否则会添加它。", "param {function} fn 回调函数。 ", "param {boolean} [isOnce=false] 指示回调函数是否只给调用一次。\n        如果要让回调函数给调用一次后被移除，请指定为 true；否则不指定或指定为 false。\n    "], "src": "\n@desc 给回调列表添加/移除指定的回调函数。\n如果回调列表中存在该回调函数，则移除它；否则会添加它。\n@param {function} fn 回调函数。 \n@param {boolean} [isOnce=false] 指示回调函数是否只给调用一次。\n        如果要让回调函数给调用一次后被移除，请指定为 true；否则不指定或指定为 false。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "给回调列表添加/移除指定的回调函数。\n如果回调列表中存在该回调函数，则移除它；否则会添加它。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "回调函数。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示回调函数是否只给调用一次。\n        如果要让回调函数给调用一次后被移除，请指定为 true；否则不指定或指定为 false。", "type": "boolean", "name": "isOnce", "isOptional": true, "defaultValue": "false" }], "isUserComment": true }, "memberOf": "MiniQuery.Callbacks", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Callbacks.js", "exceptions": [], "isa": "FUNCTION", "_name": "toggle", "_params": [{ "title": "param", "desc": "回调函数。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示回调函数是否只给调用一次。\n        如果要让回调函数给调用一次后被移除，请指定为 true；否则不指定或指定为 false。", "type": "boolean", "name": "isOnce", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "toggle", "params": [{ "title": "param", "desc": "回调函数。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示回调函数是否只给调用一次。\n        如果要让回调函数给调用一次后被移除，请指定为 true；否则不指定或指定为 false。", "type": "boolean", "name": "isOnce", "isOptional": true, "defaultValue": "false" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "给回调列表只添加一次指定的回调函数。\n只有当回调列表中不存在该回调函数时才添加它；否则会忽略。", "alias": "MiniQuery.Callbacks#unique", "id": 974, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc 给回调列表只添加一次指定的回调函数。\n只有当回调列表中不存在该回调函数时才添加它；否则会忽略。", "param {function} fn 要添加的回调函数。 ", "param {boolean} [isOnce=false] 指示回调函数是否只给调用一次。\n        如果要让回调函数给调用一次后被移除，请指定为 true；否则不指定或指定为 false。\n    "], "src": "\n@desc 给回调列表只添加一次指定的回调函数。\n只有当回调列表中不存在该回调函数时才添加它；否则会忽略。\n@param {function} fn 要添加的回调函数。 \n@param {boolean} [isOnce=false] 指示回调函数是否只给调用一次。\n        如果要让回调函数给调用一次后被移除，请指定为 true；否则不指定或指定为 false。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "给回调列表只添加一次指定的回调函数。\n只有当回调列表中不存在该回调函数时才添加它；否则会忽略。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要添加的回调函数。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示回调函数是否只给调用一次。\n        如果要让回调函数给调用一次后被移除，请指定为 true；否则不指定或指定为 false。", "type": "boolean", "name": "isOnce", "isOptional": true, "defaultValue": "false" }], "isUserComment": true }, "memberOf": "MiniQuery.Callbacks", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Callbacks.js", "exceptions": [], "isa": "FUNCTION", "_name": "unique", "_params": [{ "title": "param", "desc": "要添加的回调函数。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示回调函数是否只给调用一次。\n        如果要让回调函数给调用一次后被移除，请指定为 true；否则不指定或指定为 false。", "type": "boolean", "name": "isOnce", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "unique", "params": [{ "title": "param", "desc": "要添加的回调函数。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示回调函数是否只给调用一次。\n        如果要让回调函数给调用一次后被移除，请指定为 true；否则不指定或指定为 false。", "type": "boolean", "name": "isOnce", "isOptional": true, "defaultValue": "false" }] }], "comment": { "tagTexts": ["desc 回调列表类。", "class\n"], "src": "\n@desc 回调列表类。\n@class\n", "meta": "", "tags": [{ "title": "desc", "desc": "回调列表类。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "class", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Callbacks.js", "exceptions": [], "isa": "CONSTRUCTOR", "_name": "Callbacks", "_params": [{ "title": "param", "desc": "", "type": "", "name": "$", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "Mapper", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "scopeType": "INSTANCE", "properties": [], "name": "Callbacks", "params": [{ "title": "param", "desc": "", "type": "", "name": "$", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "Mapper", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": true, "augments": [], "fires": [], "desc": "提供创建类的工厂方法", "alias": "MiniQuery.Class", "id": 976, "isStatic": true, "see": [], "methods": [{ "type": "function", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "用工厂模式创建一个类。", "alias": "MiniQuery.Class.create", "id": 978, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 用工厂模式创建一个类。", "param {Object} instances 类中的实例成员，即 prototype 的中成员。", "param {function} [instances.constructor] 构造函数，要创建的类的真正的构造函数；\n        如果不提供，则使用一个默认的空函数实现。", "param {Object} [statics] 类中的静态成员。\n        如果想给类提供一些静态成员，则可指定此参数。", "return {function} 返回一个类的构造器。", "example\n        var Person = $.Class.create( { //实例成员\n            //构造函数\n            constructor: function(name, age) {\n                this.name = name;\n                this.age = age;\n                this.type = Person.getType();\n            },\n                \n            sayHi: function() {\n                console.log(' hi, my type is ' + this.type );\n                console.log(' and my name is ' + this.name );\n                console.log(' and I am ' + this.age + ' years old');\n            }\n    \n        }, { //静态成员\n            getType: function() {\n                return 'Person';\n            }\n        });\n            \n        var man = new Person('micty', 29);\n        man.sayHi();\n        console.log( Person.getType() );\n    "], "src": "\n@desc 用工厂模式创建一个类。\n@param {Object} instances 类中的实例成员，即 prototype 的中成员。\n@param {function} [instances.constructor] 构造函数，要创建的类的真正的构造函数；\n        如果不提供，则使用一个默认的空函数实现。\n@param {Object} [statics] 类中的静态成员。\n        如果想给类提供一些静态成员，则可指定此参数。\n@return {function} 返回一个类的构造器。\n@example\n        var Person = $.Class.create( { //实例成员\n            //构造函数\n            constructor: function(name, age) {\n                this.name = name;\n                this.age = age;\n                this.type = Person.getType();\n            },\n                \n            sayHi: function() {\n                console.log(' hi, my type is ' + this.type );\n                console.log(' and my name is ' + this.name );\n                console.log(' and I am ' + this.age + ' years old');\n            }\n    \n        }, { //静态成员\n            getType: function() {\n                return 'Person';\n            }\n        });\n            \n        var man = new Person('micty', 29);\n        man.sayHi();\n        console.log( Person.getType() );\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "用工厂模式创建一个类。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "类中的实例成员，即 prototype 的中成员。", "type": "Object", "name": "instances", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "构造函数，要创建的类的真正的构造函数；\n        如果不提供，则使用一个默认的空函数实现。", "type": "function", "name": "instances.constructor", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "类中的静态成员。\n        如果想给类提供一些静态成员，则可指定此参数。", "type": "Object", "name": "statics", "isOptional": true, "defaultValue": "" }, { "title": "return", "desc": "返回一个类的构造器。", "type": "function", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var Person = $.Class.create( { //实例成员\n            //构造函数\n            constructor: function(name, age) {\n                this.name = name;\n                this.age = age;\n                this.type = Person.getType();\n            },\n                \n            sayHi: function() {\n                console.log(' hi, my type is ' + this.type );\n                console.log(' and my name is ' + this.name );\n                console.log(' and I am ' + this.age + ' years old');\n            }\n    \n        }, { //静态成员\n            getType: function() {\n                return 'Person';\n            }\n        });\n            \n        var man = new Person('micty', 29);\n        man.sayHi();\n        console.log( Person.getType() );", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Class", "since": "", "returns": [{ "title": "return", "desc": "返回一个类的构造器。", "type": "function", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Class.js", "exceptions": [], "isa": "FUNCTION", "_name": "create", "_params": [{ "title": "param", "desc": "类中的实例成员，即 prototype 的中成员。", "type": "Object", "name": "instances", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "构造函数，要创建的类的真正的构造函数；\n        如果不提供，则使用一个默认的空函数实现。", "type": "function", "name": "instances.constructor", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "类中的静态成员。\n        如果想给类提供一些静态成员，则可指定此参数。", "type": "Object", "name": "statics", "isOptional": true, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var Person = $.Class.create( { //实例成员\n            //构造函数\n            constructor: function(name, age) {\n                this.name = name;\n                this.age = age;\n                this.type = Person.getType();\n            },\n                \n            sayHi: function() {\n                console.log(' hi, my type is ' + this.type );\n                console.log(' and my name is ' + this.name );\n                console.log(' and I am ' + this.age + ' years old');\n            }\n    \n        }, { //静态成员\n            getType: function() {\n                return 'Person';\n            }\n        });\n            \n        var man = new Person('micty', 29);\n        man.sayHi();\n        console.log( Person.getType() );", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "create", "params": [{ "title": "param", "desc": "类中的实例成员，即 prototype 的中成员。", "type": "Object", "name": "instances", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "构造函数，要创建的类的真正的构造函数；\n        如果不提供，则使用一个默认的空函数实现。", "type": "function", "name": "instances.constructor", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "类中的静态成员。\n        如果想给类提供一些静态成员，则可指定此参数。", "type": "Object", "name": "statics", "isOptional": true, "defaultValue": "" }] }, { "type": "function", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "用继续一个类的方式去创建一个新的类。", "alias": "MiniQuery.Class.inherit", "id": 983, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 用继续一个类的方式去创建一个新的类。", "param {function} SuperClass 要继续的超类，即父类。", "param {Object} instances 类中的实例成员，即 prototype 的中成员。", "param {function} [instances.constructor] 构造函数，要创建的类的真正的构造函数；\n        如果不提供，则使用一个默认的空函数实现。", "param {Object} [statics] 类中的静态成员。\n        如果想给类提供一些静态成员，则可指定此参数。", "return {function} 返回一个类的构造器。", "example\n        var Person = $.Class.create( { //实例成员\n            //构造函数\n            constructor: function(name, age) {\n                this.name = name;\n                this.age = age;\n                this.type = Person.getType();\n            },\n                \n            sayHi: function() {\n                console.log(' hi, my type is ' + this.type );\n                console.log(' and my name is ' + this.name );\n                console.log(' and I am ' + this.age + ' years old');\n            }\n        }, { //静态成员\n            getType: function() {\n                return 'Person';\n            }\n        });\n            \n        var Student = $.Class.inherit(Person, {\n            constructor: function(name, age, school) {\n                Person.call(this, name, age);\n                this.school = school;\n                this.type = Student.getType();\n            },\n                \n            sayHi: function() {\n                Person.prototype.sayHi.call(this);\n                console.log(' and I am at ' + this.school + ' school' );\n            }\n        }, {\n            \n            getType: function() {\n                return 'Student';\n            }\n        });\n            \n        var pp = new Person('abc', 31);\n        pp.sayHi();\n        console.log(Person.getType());\n            \n        var st = new Student('micty', 29, 'SZU');\n        st.sayHi();\n        console.log( Student.getType() );\n        console.log( st instanceof Student );   //true\n        console.log( st instanceof Person );    //true\n        console.log( st instanceof Object );    //true\n            \n    "], "src": "\n@desc 用继续一个类的方式去创建一个新的类。\n@param {function} SuperClass 要继续的超类，即父类。\n@param {Object} instances 类中的实例成员，即 prototype 的中成员。\n@param {function} [instances.constructor] 构造函数，要创建的类的真正的构造函数；\n        如果不提供，则使用一个默认的空函数实现。\n@param {Object} [statics] 类中的静态成员。\n        如果想给类提供一些静态成员，则可指定此参数。\n@return {function} 返回一个类的构造器。\n@example\n        var Person = $.Class.create( { //实例成员\n            //构造函数\n            constructor: function(name, age) {\n                this.name = name;\n                this.age = age;\n                this.type = Person.getType();\n            },\n                \n            sayHi: function() {\n                console.log(' hi, my type is ' + this.type );\n                console.log(' and my name is ' + this.name );\n                console.log(' and I am ' + this.age + ' years old');\n            }\n        }, { //静态成员\n            getType: function() {\n                return 'Person';\n            }\n        });\n            \n        var Student = $.Class.inherit(Person, {\n            constructor: function(name, age, school) {\n                Person.call(this, name, age);\n                this.school = school;\n                this.type = Student.getType();\n            },\n                \n            sayHi: function() {\n                Person.prototype.sayHi.call(this);\n                console.log(' and I am at ' + this.school + ' school' );\n            }\n        }, {\n            \n            getType: function() {\n                return 'Student';\n            }\n        });\n            \n        var pp = new Person('abc', 31);\n        pp.sayHi();\n        console.log(Person.getType());\n            \n        var st = new Student('micty', 29, 'SZU');\n        st.sayHi();\n        console.log( Student.getType() );\n        console.log( st instanceof Student );   //true\n        console.log( st instanceof Person );    //true\n        console.log( st instanceof Object );    //true\n            \n    ", "meta": "", "tags": [{ "title": "desc", "desc": "用继续一个类的方式去创建一个新的类。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要继续的超类，即父类。", "type": "function", "name": "SuperClass", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "类中的实例成员，即 prototype 的中成员。", "type": "Object", "name": "instances", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "构造函数，要创建的类的真正的构造函数；\n        如果不提供，则使用一个默认的空函数实现。", "type": "function", "name": "instances.constructor", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "类中的静态成员。\n        如果想给类提供一些静态成员，则可指定此参数。", "type": "Object", "name": "statics", "isOptional": true, "defaultValue": "" }, { "title": "return", "desc": "返回一个类的构造器。", "type": "function", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var Person = $.Class.create( { //实例成员\n            //构造函数\n            constructor: function(name, age) {\n                this.name = name;\n                this.age = age;\n                this.type = Person.getType();\n            },\n                \n            sayHi: function() {\n                console.log(' hi, my type is ' + this.type );\n                console.log(' and my name is ' + this.name );\n                console.log(' and I am ' + this.age + ' years old');\n            }\n        }, { //静态成员\n            getType: function() {\n                return 'Person';\n            }\n        });\n            \n        var Student = $.Class.inherit(Person, {\n            constructor: function(name, age, school) {\n                Person.call(this, name, age);\n                this.school = school;\n                this.type = Student.getType();\n            },\n                \n            sayHi: function() {\n                Person.prototype.sayHi.call(this);\n                console.log(' and I am at ' + this.school + ' school' );\n            }\n        }, {\n            \n            getType: function() {\n                return 'Student';\n            }\n        });\n            \n        var pp = new Person('abc', 31);\n        pp.sayHi();\n        console.log(Person.getType());\n            \n        var st = new Student('micty', 29, 'SZU');\n        st.sayHi();\n        console.log( Student.getType() );\n        console.log( st instanceof Student );   //true\n        console.log( st instanceof Person );    //true\n        console.log( st instanceof Object );    //true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Class", "since": "", "returns": [{ "title": "return", "desc": "返回一个类的构造器。", "type": "function", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Class.js", "exceptions": [], "isa": "FUNCTION", "_name": "inherit", "_params": [{ "title": "param", "desc": "要继续的超类，即父类。", "type": "function", "name": "SuperClass", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "类中的实例成员，即 prototype 的中成员。", "type": "Object", "name": "instances", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "构造函数，要创建的类的真正的构造函数；\n        如果不提供，则使用一个默认的空函数实现。", "type": "function", "name": "instances.constructor", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "类中的静态成员。\n        如果想给类提供一些静态成员，则可指定此参数。", "type": "Object", "name": "statics", "isOptional": true, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var Person = $.Class.create( { //实例成员\n            //构造函数\n            constructor: function(name, age) {\n                this.name = name;\n                this.age = age;\n                this.type = Person.getType();\n            },\n                \n            sayHi: function() {\n                console.log(' hi, my type is ' + this.type );\n                console.log(' and my name is ' + this.name );\n                console.log(' and I am ' + this.age + ' years old');\n            }\n        }, { //静态成员\n            getType: function() {\n                return 'Person';\n            }\n        });\n            \n        var Student = $.Class.inherit(Person, {\n            constructor: function(name, age, school) {\n                Person.call(this, name, age);\n                this.school = school;\n                this.type = Student.getType();\n            },\n                \n            sayHi: function() {\n                Person.prototype.sayHi.call(this);\n                console.log(' and I am at ' + this.school + ' school' );\n            }\n        }, {\n            \n            getType: function() {\n                return 'Student';\n            }\n        });\n            \n        var pp = new Person('abc', 31);\n        pp.sayHi();\n        console.log(Person.getType());\n            \n        var st = new Student('micty', 29, 'SZU');\n        st.sayHi();\n        console.log( Student.getType() );\n        console.log( st instanceof Student );   //true\n        console.log( st instanceof Person );    //true\n        console.log( st instanceof Object );    //true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "inherit", "params": [{ "title": "param", "desc": "要继续的超类，即父类。", "type": "function", "name": "SuperClass", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "类中的实例成员，即 prototype 的中成员。", "type": "Object", "name": "instances", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "构造函数，要创建的类的真正的构造函数；\n        如果不提供，则使用一个默认的空函数实现。", "type": "function", "name": "instances.constructor", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "类中的静态成员。\n        如果想给类提供一些静态成员，则可指定此参数。", "type": "Object", "name": "statics", "isOptional": true, "defaultValue": "" }] }], "comment": { "tagTexts": ["desc 提供创建类的工厂方法", "namespace\n"], "src": "\n@desc 提供创建类的工厂方法\n@namespace\n", "meta": "", "tags": [{ "title": "desc", "desc": "提供创建类的工厂方法", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "namespace", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Class.js", "exceptions": [], "isa": "OBJECT", "_name": "Class", "_params": [{ "title": "param", "desc": "", "type": "", "name": "$", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "This", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "scopeType": "INSTANCE", "properties": [], "name": "Class", "params": [{ "title": "param", "desc": "", "type": "", "name": "$", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "This", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": true, "augments": [], "fires": [], "desc": "Cookie 工具", "alias": "MiniQuery.Cookie", "id": 1246, "isStatic": true, "see": [], "methods": [{ "type": "Object", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把一个 cookie 字符串解析成等价的 Object 对象。", "alias": "MiniQuery.Cookie.toObject", "id": 1264, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 把一个 cookie 字符串解析成等价的 Object 对象。", "param {String} cookie 要进行解析的 cookie 字符串。", "param {boolean} [deep=false] 指定是否要进行深层次解析。\n        如果要对 cookie 中的值进行查询字符串方式的深层次解析，请指定 true；\n        否则请指定 false 或不指定。", "return {Object} 返回一个解析后的等价的 Object 对象。", "example \n        var obj = $.Cookie.toObject('A=1; B=2; C=a=100&b=200', true); //深层次解析\n        //得到\n        obj = {\n            A: 1,\n            B: 2,\n            C: {\n                a: 100,\n                b: 200\n            }\n        };\n\n        var obj = $.Cookie.toObject('A=1; B=2; C=a=100&b=200'); //浅解析\n        //得到\n        obj = {\n            A: 1,\n            B: 2,\n            C: 'a=100&b=200'\n        };\n\n        $.Cookie.toObject('a=1; b=2');\n        $.Cookie.toObject('a=1; b=2', true);\n        $.Cookie.toObject();\n        $.Cookie.toObject(true);\n\n    "], "src": "\n@desc 把一个 cookie 字符串解析成等价的 Object 对象。\n@param {String} cookie 要进行解析的 cookie 字符串。\n@param {boolean} [deep=false] 指定是否要进行深层次解析。\n        如果要对 cookie 中的值进行查询字符串方式的深层次解析，请指定 true；\n        否则请指定 false 或不指定。\n@return {Object} 返回一个解析后的等价的 Object 对象。\n@example \n        var obj = $.Cookie.toObject('A=1; B=2; C=a=100&b=200', true); //深层次解析\n        //得到\n        obj = {\n            A: 1,\n            B: 2,\n            C: {\n                a: 100,\n                b: 200\n            }\n        };\n\n        var obj = $.Cookie.toObject('A=1; B=2; C=a=100&b=200'); //浅解析\n        //得到\n        obj = {\n            A: 1,\n            B: 2,\n            C: 'a=100&b=200'\n        };\n\n        $.Cookie.toObject('a=1; b=2');\n        $.Cookie.toObject('a=1; b=2', true);\n        $.Cookie.toObject();\n        $.Cookie.toObject(true);\n\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把一个 cookie 字符串解析成等价的 Object 对象。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行解析的 cookie 字符串。", "type": "String", "name": "cookie", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指定是否要进行深层次解析。\n        如果要对 cookie 中的值进行查询字符串方式的深层次解析，请指定 true；\n        否则请指定 false 或不指定。", "type": "boolean", "name": "deep", "isOptional": true, "defaultValue": "false" }, { "title": "return", "desc": "返回一个解析后的等价的 Object 对象。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var obj = $.Cookie.toObject('A=1; B=2; C=a=100&b=200', true); //深层次解析\n        //得到\n        obj = {\n            A: 1,\n            B: 2,\n            C: {\n                a: 100,\n                b: 200\n            }\n        };\n\n        var obj = $.Cookie.toObject('A=1; B=2; C=a=100&b=200'); //浅解析\n        //得到\n        obj = {\n            A: 1,\n            B: 2,\n            C: 'a=100&b=200'\n        };\n\n        $.Cookie.toObject('a=1; b=2');\n        $.Cookie.toObject('a=1; b=2', true);\n        $.Cookie.toObject();\n        $.Cookie.toObject(true);", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Cookie", "since": "", "returns": [{ "title": "return", "desc": "返回一个解析后的等价的 Object 对象。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\Cookie.js", "exceptions": [], "isa": "FUNCTION", "_name": "toObject", "_params": [{ "title": "param", "desc": "要进行解析的 cookie 字符串。", "type": "String", "name": "cookie", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指定是否要进行深层次解析。\n        如果要对 cookie 中的值进行查询字符串方式的深层次解析，请指定 true；\n        否则请指定 false 或不指定。", "type": "boolean", "name": "deep", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var obj = $.Cookie.toObject('A=1; B=2; C=a=100&b=200', true); //深层次解析\n        //得到\n        obj = {\n            A: 1,\n            B: 2,\n            C: {\n                a: 100,\n                b: 200\n            }\n        };\n\n        var obj = $.Cookie.toObject('A=1; B=2; C=a=100&b=200'); //浅解析\n        //得到\n        obj = {\n            A: 1,\n            B: 2,\n            C: 'a=100&b=200'\n        };\n\n        $.Cookie.toObject('a=1; b=2');\n        $.Cookie.toObject('a=1; b=2', true);\n        $.Cookie.toObject();\n        $.Cookie.toObject(true);", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "toObject", "params": [{ "title": "param", "desc": "要进行解析的 cookie 字符串。", "type": "String", "name": "cookie", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指定是否要进行深层次解析。\n        如果要对 cookie 中的值进行查询字符串方式的深层次解析，请指定 true；\n        否则请指定 false 或不指定。", "type": "boolean", "name": "deep", "isOptional": true, "defaultValue": "false" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "从当前 document.cookie 中获取指定名称和键所对应的值。", "alias": "MiniQuery.Cookie.get", "id": 1279, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 从当前 document.cookie 中获取指定名称和键所对应的值。", "param {boolean} [name] 要获取的项的名称。\n        当不指定该参数时，全量返回 document.cookie 字符串。", "param {String} [key] 要获取的项的键。\n        当不指定该参数时，返回参数 name 对应的项。", "return 返回指定项的值。", "example \n        $.Cookie.get();\n        $.Cookie.get(true);\n        $.Cookie.get('A');\n        $.Cookie.get('A', true);\n        $.Cookie.get('A', 'b');\n    "], "src": "\n@desc 从当前 document.cookie 中获取指定名称和键所对应的值。\n@param {boolean} [name] 要获取的项的名称。\n        当不指定该参数时，全量返回 document.cookie 字符串。\n@param {String} [key] 要获取的项的键。\n        当不指定该参数时，返回参数 name 对应的项。\n@return 返回指定项的值。\n@example \n        $.Cookie.get();\n        $.Cookie.get(true);\n        $.Cookie.get('A');\n        $.Cookie.get('A', true);\n        $.Cookie.get('A', 'b');\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "从当前 document.cookie 中获取指定名称和键所对应的值。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要获取的项的名称。\n        当不指定该参数时，全量返回 document.cookie 字符串。", "type": "boolean", "name": "name", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "要获取的项的键。\n        当不指定该参数时，返回参数 name 对应的项。", "type": "String", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "return", "desc": "返回指定项的值。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Cookie.get();\n        $.Cookie.get(true);\n        $.Cookie.get('A');\n        $.Cookie.get('A', true);\n        $.Cookie.get('A', 'b');", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Cookie", "since": "", "returns": [{ "title": "return", "desc": "返回指定项的值。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\Cookie.js", "exceptions": [], "isa": "FUNCTION", "_name": "get", "_params": [{ "title": "param", "desc": "要获取的项的名称。\n        当不指定该参数时，全量返回 document.cookie 字符串。", "type": "boolean", "name": "name", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "要获取的项的键。\n        当不指定该参数时，返回参数 name 对应的项。", "type": "String", "name": "key", "isOptional": true, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Cookie.get();\n        $.Cookie.get(true);\n        $.Cookie.get('A');\n        $.Cookie.get('A', true);\n        $.Cookie.get('A', 'b');", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "get", "params": [{ "title": "param", "desc": "要获取的项的名称。\n        当不指定该参数时，全量返回 document.cookie 字符串。", "type": "boolean", "name": "name", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "要获取的项的键。\n        当不指定该参数时，返回参数 name 对应的项。", "type": "String", "name": "key", "isOptional": true, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "给当前的 document.cookie 设置一个 Cookie。", "alias": "MiniQuery.Cookie.set", "id": 1286, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 给当前的 document.cookie 设置一个 Cookie。", "param {Document} document 要进行操作的 Document 对象。", "param {String} name 要设置的 Cookie 名称。", "param {String|Object} value 要设置的 Cookie 值。\n        当传入一个 Object 对象时，会对它进行查询字符串的编码以获取一个 String 类型值。", "param {String|Number|Date} [expires] 过期时间。\n        参数 expires 接受以下格式的字符串：\n            y: 年\n            M: 月\n            w: 周\n            d: 天\n            h: 小时\n            m: 分钟\n            s: 秒\n            ms: 毫秒\n        或传入一个 $.Date.parse 识别的格式字符串，并会被解析成一个实际的日期实例。", "example \n        //设置一个 A=100 的 Cookie，过期时间为12天后\n        $.Cookie.set('A', 100, '12d'); \n\n        //设置一个 B=200 的 Cookie，过期时间为2周后\n        $.Cookie.set('B', 200, '2w'); \n\n        //设置一个 C=300 的 Cookie，过期时间为 '2014-9-10'\n        $.Cookie.set('C', 300, '2014-9-10'); \n\n        $.Cookie.set({\n            name: 'A',\n            value: 100,\n            expires: '2w',\n            path: '/',\n            domain: 'localhost',\n            secure: true\n        });\n    "], "src": "\n@desc 给当前的 document.cookie 设置一个 Cookie。\n@param {Document} document 要进行操作的 Document 对象。\n@param {String} name 要设置的 Cookie 名称。\n@param {String|Object} value 要设置的 Cookie 值。\n        当传入一个 Object 对象时，会对它进行查询字符串的编码以获取一个 String 类型值。\n@param {String|Number|Date} [expires] 过期时间。\n        参数 expires 接受以下格式的字符串：\n            y: 年\n            M: 月\n            w: 周\n            d: 天\n            h: 小时\n            m: 分钟\n            s: 秒\n            ms: 毫秒\n        或传入一个 $.Date.parse 识别的格式字符串，并会被解析成一个实际的日期实例。\n@example \n        //设置一个 A=100 的 Cookie，过期时间为12天后\n        $.Cookie.set('A', 100, '12d'); \n\n        //设置一个 B=200 的 Cookie，过期时间为2周后\n        $.Cookie.set('B', 200, '2w'); \n\n        //设置一个 C=300 的 Cookie，过期时间为 '2014-9-10'\n        $.Cookie.set('C', 300, '2014-9-10'); \n\n        $.Cookie.set({\n            name: 'A',\n            value: 100,\n            expires: '2w',\n            path: '/',\n            domain: 'localhost',\n            secure: true\n        });\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "给当前的 document.cookie 设置一个 Cookie。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行操作的 Document 对象。", "type": "Document", "name": "document", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要设置的 Cookie 名称。", "type": "String", "name": "name", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要设置的 Cookie 值。\n        当传入一个 Object 对象时，会对它进行查询字符串的编码以获取一个 String 类型值。", "type": "String|Object", "name": "value", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "过期时间。\n        参数 expires 接受以下格式的字符串：\n            y: 年\n            M: 月\n            w: 周\n            d: 天\n            h: 小时\n            m: 分钟\n            s: 秒\n            ms: 毫秒\n        或传入一个 $.Date.parse 识别的格式字符串，并会被解析成一个实际的日期实例。", "type": "String|Number|Date", "name": "expires", "isOptional": true, "defaultValue": "" }, { "title": "example", "desc": "\n        //设置一个 A=100 的 Cookie，过期时间为12天后\n        $.Cookie.set('A', 100, '12d'); \n\n        //设置一个 B=200 的 Cookie，过期时间为2周后\n        $.Cookie.set('B', 200, '2w'); \n\n        //设置一个 C=300 的 Cookie，过期时间为 '2014-9-10'\n        $.Cookie.set('C', 300, '2014-9-10'); \n\n        $.Cookie.set({\n            name: 'A',\n            value: 100,\n            expires: '2w',\n            path: '/',\n            domain: 'localhost',\n            secure: true\n        });", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Cookie", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\Cookie.js", "exceptions": [], "isa": "FUNCTION", "_name": "set", "_params": [{ "title": "param", "desc": "要进行操作的 Document 对象。", "type": "Document", "name": "document", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要设置的 Cookie 名称。", "type": "String", "name": "name", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要设置的 Cookie 值。\n        当传入一个 Object 对象时，会对它进行查询字符串的编码以获取一个 String 类型值。", "type": "String|Object", "name": "value", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "过期时间。\n        参数 expires 接受以下格式的字符串：\n            y: 年\n            M: 月\n            w: 周\n            d: 天\n            h: 小时\n            m: 分钟\n            s: 秒\n            ms: 毫秒\n        或传入一个 $.Date.parse 识别的格式字符串，并会被解析成一个实际的日期实例。", "type": "String|Number|Date", "name": "expires", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "domain", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "secure", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        //设置一个 A=100 的 Cookie，过期时间为12天后\n        $.Cookie.set('A', 100, '12d'); \n\n        //设置一个 B=200 的 Cookie，过期时间为2周后\n        $.Cookie.set('B', 200, '2w'); \n\n        //设置一个 C=300 的 Cookie，过期时间为 '2014-9-10'\n        $.Cookie.set('C', 300, '2014-9-10'); \n\n        $.Cookie.set({\n            name: 'A',\n            value: 100,\n            expires: '2w',\n            path: '/',\n            domain: 'localhost',\n            secure: true\n        });", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "set", "params": [{ "title": "param", "desc": "要进行操作的 Document 对象。", "type": "Document", "name": "document", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要设置的 Cookie 名称。", "type": "String", "name": "name", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要设置的 Cookie 值。\n        当传入一个 Object 对象时，会对它进行查询字符串的编码以获取一个 String 类型值。", "type": "String|Object", "name": "value", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "过期时间。\n        参数 expires 接受以下格式的字符串：\n            y: 年\n            M: 月\n            w: 周\n            d: 天\n            h: 小时\n            m: 分钟\n            s: 秒\n            ms: 毫秒\n        或传入一个 $.Date.parse 识别的格式字符串，并会被解析成一个实际的日期实例。", "type": "String|Number|Date", "name": "expires", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "domain", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "secure", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "从当前的 document.cookie 中移除指定名称的 Cookie。", "alias": "MiniQuery.Cookie.remove", "id": 1300, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 从当前的 document.cookie 中移除指定名称的 Cookie。", "param {String} [name] 要移除的 Cookie 的名称。\n        当不指定参数 name 时，则会把所有的 Cookie 都移除。", "example \n        //给 document 名称为 A 的 Cookie 移除\n        $.Cookie.remove(document, 'A'); \n\n        //把 document 的所有 Cookie 都移除\n        $.Cookie.remove(document); \n    "], "src": "\n@desc 从当前的 document.cookie 中移除指定名称的 Cookie。\n@param {String} [name] 要移除的 Cookie 的名称。\n        当不指定参数 name 时，则会把所有的 Cookie 都移除。\n@example \n        //给 document 名称为 A 的 Cookie 移除\n        $.Cookie.remove(document, 'A'); \n\n        //把 document 的所有 Cookie 都移除\n        $.Cookie.remove(document); \n    ", "meta": "", "tags": [{ "title": "desc", "desc": "从当前的 document.cookie 中移除指定名称的 Cookie。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要移除的 Cookie 的名称。\n        当不指定参数 name 时，则会把所有的 Cookie 都移除。", "type": "String", "name": "name", "isOptional": true, "defaultValue": "" }, { "title": "example", "desc": "\n        //给 document 名称为 A 的 Cookie 移除\n        $.Cookie.remove(document, 'A'); \n\n        //把 document 的所有 Cookie 都移除\n        $.Cookie.remove(document);", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Cookie", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\Cookie.js", "exceptions": [], "isa": "FUNCTION", "_name": "remove", "_params": [{ "title": "param", "desc": "要移除的 Cookie 的名称。\n        当不指定参数 name 时，则会把所有的 Cookie 都移除。", "type": "String", "name": "name", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "path", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "domain", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "secure", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        //给 document 名称为 A 的 Cookie 移除\n        $.Cookie.remove(document, 'A'); \n\n        //把 document 的所有 Cookie 都移除\n        $.Cookie.remove(document);", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "remove", "params": [{ "title": "param", "desc": "要移除的 Cookie 的名称。\n        当不指定参数 name 时，则会把所有的 Cookie 都移除。", "type": "String", "name": "name", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "path", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "domain", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "secure", "isOptional": false, "defaultValue": "" }] }], "comment": { "tagTexts": ["desc Cookie 工具", "namespace\n"], "src": "\n@desc Cookie 工具\n@namespace\n", "meta": "", "tags": [{ "title": "desc", "desc": "Cookie 工具", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "namespace", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\Cookie.js", "exceptions": [], "isa": "OBJECT", "_name": "Cookie", "_params": [{ "title": "param", "desc": "", "type": "", "name": "$", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "This", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "scopeType": "INSTANCE", "properties": [], "name": "Cookie", "params": [{ "title": "param", "desc": "", "type": "", "name": "$", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "This", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "日期时间工具", "alias": "MiniQuery.Date", "id": 344, "isStatic": true, "see": [], "methods": [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "获取当前系统时间。", "alias": "MiniQuery.Date.now", "id": 348, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 获取当前系统时间。", "return 返回当前系统时间实例。", "example\n        $.Date.now();\n    "], "src": "\n@desc 获取当前系统时间。\n@return 返回当前系统时间实例。\n@example\n        $.Date.now();\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "获取当前系统时间。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回当前系统时间实例。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Date.now();", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Date", "since": "", "returns": [{ "title": "return", "desc": "返回当前系统时间实例。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Date.js", "exceptions": [], "isa": "FUNCTION", "_name": "now", "_params": [], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Date.now();", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "now", "params": [] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把参数 value 解析成等价的日期时间实例。\n当无法解析时，返回 null。", "alias": "MiniQuery.Date.parse", "id": 349, "isStatic": true, "see": [], "methods": [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.Date.parse-GetDate", "id": 351, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.Date.parse", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Date.js", "exceptions": [], "isa": "FUNCTION", "_name": "GetDate", "_params": [{ "title": "param", "desc": "", "type": "", "name": "s", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "GetDate", "params": [{ "title": "param", "desc": "", "type": "", "name": "s", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.Date.parse-GetTime", "id": 358, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.Date.parse", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Date.js", "exceptions": [], "isa": "FUNCTION", "_name": "GetTime", "_params": [{ "title": "param", "desc": "", "type": "", "name": "s", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "GetTime", "params": [{ "title": "param", "desc": "", "type": "", "name": "s", "isOptional": false, "defaultValue": "" }] }], "comment": { "tagTexts": ["desc 把参数 value 解析成等价的日期时间实例。\n当无法解析时，返回 null。", "param {Date|string} value 要进行解析的参数，可接受的类型为：\n  1.Date 实例<br />\n  2.string 字符串，包括调用 Date 实例的 toString 方法得到的字符串，也包括以下格式: \n        <pre>\n            yyyy-MM-dd\n            yyyy.MM.dd\n            yyyy/MM/dd\n            yyyy_MM_dd\n                \n            HH:mm:ss\n                \n            yyyy-MM-dd HH:mm:ss\n            yyyy.MM.dd HH:mm:ss\n            yyyy/MM/dd HH:mm:ss\n            yyyy_MM_dd HH:mm:ss\n        </pre>", "return 返回一个日期时间的实例。", "example\n        $.Date.parse('2013-04-29 09:31:20');\n    "], "src": "\n@desc 把参数 value 解析成等价的日期时间实例。\n当无法解析时，返回 null。\n@param {Date|string} value 要进行解析的参数，可接受的类型为：\n  1.Date 实例<br />\n  2.string 字符串，包括调用 Date 实例的 toString 方法得到的字符串，也包括以下格式: \n        <pre>\n            yyyy-MM-dd\n            yyyy.MM.dd\n            yyyy/MM/dd\n            yyyy_MM_dd\n                \n            HH:mm:ss\n                \n            yyyy-MM-dd HH:mm:ss\n            yyyy.MM.dd HH:mm:ss\n            yyyy/MM/dd HH:mm:ss\n            yyyy_MM_dd HH:mm:ss\n        </pre>\n@return 返回一个日期时间的实例。\n@example\n        $.Date.parse('2013-04-29 09:31:20');\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把参数 value 解析成等价的日期时间实例。\n当无法解析时，返回 null。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行解析的参数，可接受的类型为：\n  1.Date 实例<br />\n  2.string 字符串，包括调用 Date 实例的 toString 方法得到的字符串，也包括以下格式: \n        <pre>\n            yyyy-MM-dd\n            yyyy.MM.dd\n            yyyy/MM/dd\n            yyyy_MM_dd\n                \n            HH:mm:ss\n                \n            yyyy-MM-dd HH:mm:ss\n            yyyy.MM.dd HH:mm:ss\n            yyyy/MM/dd HH:mm:ss\n            yyyy_MM_dd HH:mm:ss\n        </pre>", "type": "Date|string", "name": "value", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个日期时间的实例。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Date.parse('2013-04-29 09:31:20');", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Date", "since": "", "returns": [{ "title": "return", "desc": "返回一个日期时间的实例。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Date.js", "exceptions": [], "isa": "FUNCTION", "_name": "parse", "_params": [{ "title": "param", "desc": "要进行解析的参数，可接受的类型为：\n  1.Date 实例<br />\n  2.string 字符串，包括调用 Date 实例的 toString 方法得到的字符串，也包括以下格式: \n        <pre>\n            yyyy-MM-dd\n            yyyy.MM.dd\n            yyyy/MM/dd\n            yyyy_MM_dd\n                \n            HH:mm:ss\n                \n            yyyy-MM-dd HH:mm:ss\n            yyyy.MM.dd HH:mm:ss\n            yyyy/MM/dd HH:mm:ss\n            yyyy_MM_dd HH:mm:ss\n        </pre>", "type": "Date|string", "name": "value", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Date.parse('2013-04-29 09:31:20');", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "parse", "params": [{ "title": "param", "desc": "要进行解析的参数，可接受的类型为：\n  1.Date 实例<br />\n  2.string 字符串，包括调用 Date 实例的 toString 方法得到的字符串，也包括以下格式: \n        <pre>\n            yyyy-MM-dd\n            yyyy.MM.dd\n            yyyy/MM/dd\n            yyyy_MM_dd\n                \n            HH:mm:ss\n                \n            yyyy-MM-dd HH:mm:ss\n            yyyy.MM.dd HH:mm:ss\n            yyyy/MM/dd HH:mm:ss\n            yyyy_MM_dd HH:mm:ss\n        </pre>", "type": "Date|string", "name": "value", "isOptional": false, "defaultValue": "" }] }, { "type": "string", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把日期时间格式化指定格式的字符串。", "alias": "MiniQuery.Date.format", "id": 372, "isStatic": true, "see": [], "methods": [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.Date.format-padLeft", "id": 379, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.Date.format", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Date.js", "exceptions": [], "isa": "FUNCTION", "_name": "padLeft", "_params": [{ "title": "param", "desc": "", "type": "", "name": "value", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "length", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "padLeft", "params": [{ "title": "param", "desc": "", "type": "", "name": "value", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "length", "isOptional": false, "defaultValue": "" }] }], "comment": { "tagTexts": ["desc 把日期时间格式化指定格式的字符串。", "param {Date} datetime 要进行格式化的日期时间。", "param {string} formater 格式化的字符串。<br />\n        其中保留的占位符有：\n    <pre>\n        'yyyy': 4位数年份\n        'yy': 2位数年份\n        'MM': 2位数的月份(01-12)\n        'M': 1位数的月份(1-12)\n        'dddd': '星期日|一|二|三|四|五|六'\n        'dd': 2位数的日份(01-31)\n        'd': 1位数的日份(1-31)\n        'HH': 24小时制的2位数小时数(00-23)\n        'H': 24小时制的1位数小时数(0-23)\n        'hh': 12小时制的2位数小时数(00-12)\n        'h': 12小时制的1位数小时数(0-12)\n        'mm': 2位数的分钟数(00-59)\n        'm': 1位数的分钟数(0-59)\n        'ss': 2位数的秒钟数(00-59)\n        's': 1位数的秒数(0-59)\n        'tt': 上午：'AM'；下午: 'PM'\n        't': 上午：'A'；下午: 'P'\n        'TT': 上午： '上午'； 下午: '下午'\n        'T': 上午： '上'； 下午: '下'\n    </pre>", "return {string} 返回一个格式化的字符串。", "example\n        //返回当前时间的格式字符串，类似 '2013年4月29日 9:21:59 星期一'\n        $.Date.format(new Date(), 'yyyy年M月d日 h:m:s dddd')\n    "], "src": "\n@desc 把日期时间格式化指定格式的字符串。\n@param {Date} datetime 要进行格式化的日期时间。\n@param {string} formater 格式化的字符串。<br />\n        其中保留的占位符有：\n    <pre>\n        'yyyy': 4位数年份\n        'yy': 2位数年份\n        'MM': 2位数的月份(01-12)\n        'M': 1位数的月份(1-12)\n        'dddd': '星期日|一|二|三|四|五|六'\n        'dd': 2位数的日份(01-31)\n        'd': 1位数的日份(1-31)\n        'HH': 24小时制的2位数小时数(00-23)\n        'H': 24小时制的1位数小时数(0-23)\n        'hh': 12小时制的2位数小时数(00-12)\n        'h': 12小时制的1位数小时数(0-12)\n        'mm': 2位数的分钟数(00-59)\n        'm': 1位数的分钟数(0-59)\n        'ss': 2位数的秒钟数(00-59)\n        's': 1位数的秒数(0-59)\n        'tt': 上午：'AM'；下午: 'PM'\n        't': 上午：'A'；下午: 'P'\n        'TT': 上午： '上午'； 下午: '下午'\n        'T': 上午： '上'； 下午: '下'\n    </pre>\n@return {string} 返回一个格式化的字符串。\n@example\n        //返回当前时间的格式字符串，类似 '2013年4月29日 9:21:59 星期一'\n        $.Date.format(new Date(), 'yyyy年M月d日 h:m:s dddd')\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把日期时间格式化指定格式的字符串。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行格式化的日期时间。", "type": "Date", "name": "datetime", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "格式化的字符串。<br />\n        其中保留的占位符有：\n    <pre>\n        'yyyy': 4位数年份\n        'yy': 2位数年份\n        'MM': 2位数的月份(01-12)\n        'M': 1位数的月份(1-12)\n        'dddd': '星期日|一|二|三|四|五|六'\n        'dd': 2位数的日份(01-31)\n        'd': 1位数的日份(1-31)\n        'HH': 24小时制的2位数小时数(00-23)\n        'H': 24小时制的1位数小时数(0-23)\n        'hh': 12小时制的2位数小时数(00-12)\n        'h': 12小时制的1位数小时数(0-12)\n        'mm': 2位数的分钟数(00-59)\n        'm': 1位数的分钟数(0-59)\n        'ss': 2位数的秒钟数(00-59)\n        's': 1位数的秒数(0-59)\n        'tt': 上午：'AM'；下午: 'PM'\n        't': 上午：'A'；下午: 'P'\n        'TT': 上午： '上午'； 下午: '下午'\n        'T': 上午： '上'； 下午: '下'\n    </pre>", "type": "string", "name": "formater", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个格式化的字符串。", "type": "string", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        //返回当前时间的格式字符串，类似 '2013年4月29日 9:21:59 星期一'\n        $.Date.format(new Date(), 'yyyy年M月d日 h:m:s dddd')", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Date", "since": "", "returns": [{ "title": "return", "desc": "返回一个格式化的字符串。", "type": "string", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Date.js", "exceptions": [], "isa": "FUNCTION", "_name": "format", "_params": [{ "title": "param", "desc": "要进行格式化的日期时间。", "type": "Date", "name": "datetime", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "格式化的字符串。<br />\n        其中保留的占位符有：\n    <pre>\n        'yyyy': 4位数年份\n        'yy': 2位数年份\n        'MM': 2位数的月份(01-12)\n        'M': 1位数的月份(1-12)\n        'dddd': '星期日|一|二|三|四|五|六'\n        'dd': 2位数的日份(01-31)\n        'd': 1位数的日份(1-31)\n        'HH': 24小时制的2位数小时数(00-23)\n        'H': 24小时制的1位数小时数(0-23)\n        'hh': 12小时制的2位数小时数(00-12)\n        'h': 12小时制的1位数小时数(0-12)\n        'mm': 2位数的分钟数(00-59)\n        'm': 1位数的分钟数(0-59)\n        'ss': 2位数的秒钟数(00-59)\n        's': 1位数的秒数(0-59)\n        'tt': 上午：'AM'；下午: 'PM'\n        't': 上午：'A'；下午: 'P'\n        'TT': 上午： '上午'； 下午: '下午'\n        'T': 上午： '上'； 下午: '下'\n    </pre>", "type": "string", "name": "formater", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        //返回当前时间的格式字符串，类似 '2013年4月29日 9:21:59 星期一'\n        $.Date.format(new Date(), 'yyyy年M月d日 h:m:s dddd')", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "format", "params": [{ "title": "param", "desc": "要进行格式化的日期时间。", "type": "Date", "name": "datetime", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "格式化的字符串。<br />\n        其中保留的占位符有：\n    <pre>\n        'yyyy': 4位数年份\n        'yy': 2位数年份\n        'MM': 2位数的月份(01-12)\n        'M': 1位数的月份(1-12)\n        'dddd': '星期日|一|二|三|四|五|六'\n        'dd': 2位数的日份(01-31)\n        'd': 1位数的日份(1-31)\n        'HH': 24小时制的2位数小时数(00-23)\n        'H': 24小时制的1位数小时数(0-23)\n        'hh': 12小时制的2位数小时数(00-12)\n        'h': 12小时制的1位数小时数(0-12)\n        'mm': 2位数的分钟数(00-59)\n        'm': 1位数的分钟数(0-59)\n        'ss': 2位数的秒钟数(00-59)\n        's': 1位数的秒数(0-59)\n        'tt': 上午：'AM'；下午: 'PM'\n        't': 上午：'A'；下午: 'P'\n        'TT': 上午： '上午'； 下午: '下午'\n        'T': 上午： '上'； 下午: '下'\n    </pre>", "type": "string", "name": "formater", "isOptional": false, "defaultValue": "" }] }, { "type": "Date", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "将指定的年份数加到指定的 Date 实例上。", "alias": "MiniQuery.Date.addYears", "id": 390, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 将指定的年份数加到指定的 Date 实例上。", "param {Date} [datetime=new Date()] 要进行操作的日期时间，如果不指定则默认为当前时间。", "param {Number} value 要增加/减少的年份数。可以为正数，也可以为负数。", "return {Date} 返回一个新的日期实例。\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。", "example\n        $.Date.addYear(new Date(), 5); //假如当前时间是2013年，则返回的日期实例的年份为2018\n        $.Date.addYear(-5);//假如当前时间是2013年，则返回的日期实例的年份为2008\n    "], "src": "\n@desc 将指定的年份数加到指定的 Date 实例上。\n@param {Date} [datetime=new Date()] 要进行操作的日期时间，如果不指定则默认为当前时间。\n@param {Number} value 要增加/减少的年份数。可以为正数，也可以为负数。\n@return {Date} 返回一个新的日期实例。\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。\n@example\n        $.Date.addYear(new Date(), 5); //假如当前时间是2013年，则返回的日期实例的年份为2018\n        $.Date.addYear(-5);//假如当前时间是2013年，则返回的日期实例的年份为2008\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "将指定的年份数加到指定的 Date 实例上。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行操作的日期时间，如果不指定则默认为当前时间。", "type": "Date", "name": "datetime", "isOptional": true, "defaultValue": "new Date()" }, { "title": "param", "desc": "要增加/减少的年份数。可以为正数，也可以为负数。", "type": "Number", "name": "value", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个新的日期实例。\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。", "type": "Date", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Date.addYear(new Date(), 5); //假如当前时间是2013年，则返回的日期实例的年份为2018\n        $.Date.addYear(-5);//假如当前时间是2013年，则返回的日期实例的年份为2008", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Date", "since": "", "returns": [{ "title": "return", "desc": "返回一个新的日期实例。\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。", "type": "Date", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Date.js", "exceptions": [], "isa": "FUNCTION", "_name": "addYears", "_params": [{ "title": "param", "desc": "要进行操作的日期时间，如果不指定则默认为当前时间。", "type": "Date", "name": "datetime", "isOptional": true, "defaultValue": "new Date()" }, { "title": "param", "desc": "要增加/减少的年份数。可以为正数，也可以为负数。", "type": "Number", "name": "value", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Date.addYear(new Date(), 5); //假如当前时间是2013年，则返回的日期实例的年份为2018\n        $.Date.addYear(-5);//假如当前时间是2013年，则返回的日期实例的年份为2008", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "addYears", "params": [{ "title": "param", "desc": "要进行操作的日期时间，如果不指定则默认为当前时间。", "type": "Date", "name": "datetime", "isOptional": true, "defaultValue": "new Date()" }, { "title": "param", "desc": "要增加/减少的年份数。可以为正数，也可以为负数。", "type": "Number", "name": "value", "isOptional": false, "defaultValue": "" }] }, { "type": "Date", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "将指定的月份数加到指定的 Date 实例上。", "alias": "MiniQuery.Date.addMonths", "id": 392, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 将指定的月份数加到指定的 Date 实例上。", "param {Date} [datetime=new Date()] 要进行操作的日期时间，如果不指定则默认为当前时间。", "param {Number} value 要增加/减少的月份数。可以为正数，也可以为负数。", "return {Date} 返回一个新的日期实例。\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。", "example\n        $.Date.addMonths(new Date(), 15); //给当前时间加上15个月\n    "], "src": "\n@desc 将指定的月份数加到指定的 Date 实例上。\n@param {Date} [datetime=new Date()] 要进行操作的日期时间，如果不指定则默认为当前时间。\n@param {Number} value 要增加/减少的月份数。可以为正数，也可以为负数。\n@return {Date} 返回一个新的日期实例。\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。\n@example\n        $.Date.addMonths(new Date(), 15); //给当前时间加上15个月\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "将指定的月份数加到指定的 Date 实例上。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行操作的日期时间，如果不指定则默认为当前时间。", "type": "Date", "name": "datetime", "isOptional": true, "defaultValue": "new Date()" }, { "title": "param", "desc": "要增加/减少的月份数。可以为正数，也可以为负数。", "type": "Number", "name": "value", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个新的日期实例。\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。", "type": "Date", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Date.addMonths(new Date(), 15); //给当前时间加上15个月", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Date", "since": "", "returns": [{ "title": "return", "desc": "返回一个新的日期实例。\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。", "type": "Date", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Date.js", "exceptions": [], "isa": "FUNCTION", "_name": "addMonths", "_params": [{ "title": "param", "desc": "要进行操作的日期时间，如果不指定则默认为当前时间。", "type": "Date", "name": "datetime", "isOptional": true, "defaultValue": "new Date()" }, { "title": "param", "desc": "要增加/减少的月份数。可以为正数，也可以为负数。", "type": "Number", "name": "value", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Date.addMonths(new Date(), 15); //给当前时间加上15个月", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "addMonths", "params": [{ "title": "param", "desc": "要进行操作的日期时间，如果不指定则默认为当前时间。", "type": "Date", "name": "datetime", "isOptional": true, "defaultValue": "new Date()" }, { "title": "param", "desc": "要增加/减少的月份数。可以为正数，也可以为负数。", "type": "Number", "name": "value", "isOptional": false, "defaultValue": "" }] }, { "type": "Date", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "将指定的周数加到指定的 Date 实例上。", "alias": "MiniQuery.Date.addWeeks", "id": 396, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 将指定的周数加到指定的 Date 实例上。", "param {Date} datetime 要进行操作的日期时间，如果不指定则默认为当前时间。", "param {Number} value 要增加/减少的周数。可以为正数，也可以为负数。", "return {Date} 返回一个新的日期实例。\n        此方法不更改参数 datetime 的值。 而是返回一个新的 Date，其值是此运算的结果。", "example\n        $.Date.addWeeks(new Date(), 3); //给当前时间加上3周\n    "], "src": "\n@desc 将指定的周数加到指定的 Date 实例上。\n@param {Date} datetime 要进行操作的日期时间，如果不指定则默认为当前时间。\n@param {Number} value 要增加/减少的周数。可以为正数，也可以为负数。\n@return {Date} 返回一个新的日期实例。\n        此方法不更改参数 datetime 的值。 而是返回一个新的 Date，其值是此运算的结果。\n@example\n        $.Date.addWeeks(new Date(), 3); //给当前时间加上3周\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "将指定的周数加到指定的 Date 实例上。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行操作的日期时间，如果不指定则默认为当前时间。", "type": "Date", "name": "datetime", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要增加/减少的周数。可以为正数，也可以为负数。", "type": "Number", "name": "value", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个新的日期实例。\n        此方法不更改参数 datetime 的值。 而是返回一个新的 Date，其值是此运算的结果。", "type": "Date", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Date.addWeeks(new Date(), 3); //给当前时间加上3周", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Date", "since": "", "returns": [{ "title": "return", "desc": "返回一个新的日期实例。\n        此方法不更改参数 datetime 的值。 而是返回一个新的 Date，其值是此运算的结果。", "type": "Date", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Date.js", "exceptions": [], "isa": "FUNCTION", "_name": "addWeeks", "_params": [{ "title": "param", "desc": "要进行操作的日期时间，如果不指定则默认为当前时间。", "type": "Date", "name": "datetime", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要增加/减少的周数。可以为正数，也可以为负数。", "type": "Number", "name": "value", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Date.addWeeks(new Date(), 3); //给当前时间加上3周", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "addWeeks", "params": [{ "title": "param", "desc": "要进行操作的日期时间，如果不指定则默认为当前时间。", "type": "Date", "name": "datetime", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要增加/减少的周数。可以为正数，也可以为负数。", "type": "Number", "name": "value", "isOptional": false, "defaultValue": "" }] }, { "type": "Date", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "将指定的天数加到指定的 Date 实例上。", "alias": "MiniQuery.Date.addDays", "id": 398, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 将指定的天数加到指定的 Date 实例上。", "param {Date} datetime 要进行操作的日期时间，如果不指定则默认为当前时间。", "param {Number} value 要增加/减少的天数。可以为正数，也可以为负数。", "return {Date} 返回一个新的日期实例。。<br />\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。", "example\n        $.Date.addDays(new Date(), 35); //给当前时间加上35天\n    "], "src": "\n@desc 将指定的天数加到指定的 Date 实例上。\n@param {Date} datetime 要进行操作的日期时间，如果不指定则默认为当前时间。\n@param {Number} value 要增加/减少的天数。可以为正数，也可以为负数。\n@return {Date} 返回一个新的日期实例。。<br />\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。\n@example\n        $.Date.addDays(new Date(), 35); //给当前时间加上35天\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "将指定的天数加到指定的 Date 实例上。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行操作的日期时间，如果不指定则默认为当前时间。", "type": "Date", "name": "datetime", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要增加/减少的天数。可以为正数，也可以为负数。", "type": "Number", "name": "value", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个新的日期实例。。<br />\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。", "type": "Date", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Date.addDays(new Date(), 35); //给当前时间加上35天", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Date", "since": "", "returns": [{ "title": "return", "desc": "返回一个新的日期实例。。<br />\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。", "type": "Date", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Date.js", "exceptions": [], "isa": "FUNCTION", "_name": "addDays", "_params": [{ "title": "param", "desc": "要进行操作的日期时间，如果不指定则默认为当前时间。", "type": "Date", "name": "datetime", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要增加/减少的天数。可以为正数，也可以为负数。", "type": "Number", "name": "value", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Date.addDays(new Date(), 35); //给当前时间加上35天", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "addDays", "params": [{ "title": "param", "desc": "要进行操作的日期时间，如果不指定则默认为当前时间。", "type": "Date", "name": "datetime", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要增加/减少的天数。可以为正数，也可以为负数。", "type": "Number", "name": "value", "isOptional": false, "defaultValue": "" }] }, { "type": "Date", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "将指定的小时数加到指定的 Date 实例上。", "alias": "MiniQuery.Date.addHours", "id": 402, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 将指定的小时数加到指定的 Date 实例上。", "param {Date} datetime 要进行操作的日期时间，如果不指定则默认为当前时间。", "param {Number} value 要增加/减少的小时数。可以为正数，也可以为负数。", "return {Date} 返回一个新的日期实例。<br />\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。", "example\n        $.Date.addHours(new Date(), 35); //给当前时间加上35小时\n    "], "src": "\n@desc 将指定的小时数加到指定的 Date 实例上。\n@param {Date} datetime 要进行操作的日期时间，如果不指定则默认为当前时间。\n@param {Number} value 要增加/减少的小时数。可以为正数，也可以为负数。\n@return {Date} 返回一个新的日期实例。<br />\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。\n@example\n        $.Date.addHours(new Date(), 35); //给当前时间加上35小时\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "将指定的小时数加到指定的 Date 实例上。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行操作的日期时间，如果不指定则默认为当前时间。", "type": "Date", "name": "datetime", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要增加/减少的小时数。可以为正数，也可以为负数。", "type": "Number", "name": "value", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个新的日期实例。<br />\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。", "type": "Date", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Date.addHours(new Date(), 35); //给当前时间加上35小时", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Date", "since": "", "returns": [{ "title": "return", "desc": "返回一个新的日期实例。<br />\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。", "type": "Date", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Date.js", "exceptions": [], "isa": "FUNCTION", "_name": "addHours", "_params": [{ "title": "param", "desc": "要进行操作的日期时间，如果不指定则默认为当前时间。", "type": "Date", "name": "datetime", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要增加/减少的小时数。可以为正数，也可以为负数。", "type": "Number", "name": "value", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Date.addHours(new Date(), 35); //给当前时间加上35小时", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "addHours", "params": [{ "title": "param", "desc": "要进行操作的日期时间，如果不指定则默认为当前时间。", "type": "Date", "name": "datetime", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要增加/减少的小时数。可以为正数，也可以为负数。", "type": "Number", "name": "value", "isOptional": false, "defaultValue": "" }] }, { "type": "Date", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "将指定的分钟数加到指定的 Date 实例上。", "alias": "MiniQuery.Date.addMinutes", "id": 406, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 将指定的分钟数加到指定的 Date 实例上。", "param {Date} datetime 要进行操作的日期时间，如果不指定则默认为当前时间。", "param {Number} value 要增加/减少的分钟数。可以为正数，也可以为负数。", "return {Date} 返回一个新的日期实例。<br />\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。", "example\n        $.Date.addMinutes(new Date(), 90); //给当前时间加上90分钟\n    "], "src": "\n@desc 将指定的分钟数加到指定的 Date 实例上。\n@param {Date} datetime 要进行操作的日期时间，如果不指定则默认为当前时间。\n@param {Number} value 要增加/减少的分钟数。可以为正数，也可以为负数。\n@return {Date} 返回一个新的日期实例。<br />\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。\n@example\n        $.Date.addMinutes(new Date(), 90); //给当前时间加上90分钟\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "将指定的分钟数加到指定的 Date 实例上。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行操作的日期时间，如果不指定则默认为当前时间。", "type": "Date", "name": "datetime", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要增加/减少的分钟数。可以为正数，也可以为负数。", "type": "Number", "name": "value", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个新的日期实例。<br />\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。", "type": "Date", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Date.addMinutes(new Date(), 90); //给当前时间加上90分钟", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Date", "since": "", "returns": [{ "title": "return", "desc": "返回一个新的日期实例。<br />\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。", "type": "Date", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Date.js", "exceptions": [], "isa": "FUNCTION", "_name": "addMinutes", "_params": [{ "title": "param", "desc": "要进行操作的日期时间，如果不指定则默认为当前时间。", "type": "Date", "name": "datetime", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要增加/减少的分钟数。可以为正数，也可以为负数。", "type": "Number", "name": "value", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Date.addMinutes(new Date(), 90); //给当前时间加上90分钟", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "addMinutes", "params": [{ "title": "param", "desc": "要进行操作的日期时间，如果不指定则默认为当前时间。", "type": "Date", "name": "datetime", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要增加/减少的分钟数。可以为正数，也可以为负数。", "type": "Number", "name": "value", "isOptional": false, "defaultValue": "" }] }, { "type": "Date", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "将指定的秒数加到指定的 Date 实例上。", "alias": "MiniQuery.Date.addSeconds", "id": 410, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 将指定的秒数加到指定的 Date 实例上。", "param {Date} datetime 要进行操作的日期时间，如果不指定则默认为当前时间。", "param {Number} value 要增加/减少的秒数。可以为正数，也可以为负数。", "return {Date} 返回一个新的日期实例。<br />\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。", "example\n        $.Date.addSeconds(new Date(), 90); //给当前时间加上90秒\n    "], "src": "\n@desc 将指定的秒数加到指定的 Date 实例上。\n@param {Date} datetime 要进行操作的日期时间，如果不指定则默认为当前时间。\n@param {Number} value 要增加/减少的秒数。可以为正数，也可以为负数。\n@return {Date} 返回一个新的日期实例。<br />\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。\n@example\n        $.Date.addSeconds(new Date(), 90); //给当前时间加上90秒\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "将指定的秒数加到指定的 Date 实例上。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行操作的日期时间，如果不指定则默认为当前时间。", "type": "Date", "name": "datetime", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要增加/减少的秒数。可以为正数，也可以为负数。", "type": "Number", "name": "value", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个新的日期实例。<br />\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。", "type": "Date", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Date.addSeconds(new Date(), 90); //给当前时间加上90秒", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Date", "since": "", "returns": [{ "title": "return", "desc": "返回一个新的日期实例。<br />\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。", "type": "Date", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Date.js", "exceptions": [], "isa": "FUNCTION", "_name": "addSeconds", "_params": [{ "title": "param", "desc": "要进行操作的日期时间，如果不指定则默认为当前时间。", "type": "Date", "name": "datetime", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要增加/减少的秒数。可以为正数，也可以为负数。", "type": "Number", "name": "value", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Date.addSeconds(new Date(), 90); //给当前时间加上90秒", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "addSeconds", "params": [{ "title": "param", "desc": "要进行操作的日期时间，如果不指定则默认为当前时间。", "type": "Date", "name": "datetime", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要增加/减少的秒数。可以为正数，也可以为负数。", "type": "Number", "name": "value", "isOptional": false, "defaultValue": "" }] }, { "type": "Date", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "将指定的毫秒数加到指定的 Date 实例上。", "alias": "MiniQuery.Date.addMilliseconds", "id": 414, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 将指定的毫秒数加到指定的 Date 实例上。", "param {Date} datetime 要进行操作的日期时间，如果不指定则默认为当前时间。", "param {Number} value 要增加/减少的毫秒数。可以为正数，也可以为负数。", "return {Date} 返回一个新的日期实例。<br />\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。", "example\n        $.Date.addMilliseconds(new Date(), 2000); //给当前时间加上2000毫秒\n    "], "src": "\n@desc 将指定的毫秒数加到指定的 Date 实例上。\n@param {Date} datetime 要进行操作的日期时间，如果不指定则默认为当前时间。\n@param {Number} value 要增加/减少的毫秒数。可以为正数，也可以为负数。\n@return {Date} 返回一个新的日期实例。<br />\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。\n@example\n        $.Date.addMilliseconds(new Date(), 2000); //给当前时间加上2000毫秒\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "将指定的毫秒数加到指定的 Date 实例上。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行操作的日期时间，如果不指定则默认为当前时间。", "type": "Date", "name": "datetime", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要增加/减少的毫秒数。可以为正数，也可以为负数。", "type": "Number", "name": "value", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个新的日期实例。<br />\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。", "type": "Date", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Date.addMilliseconds(new Date(), 2000); //给当前时间加上2000毫秒", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Date", "since": "", "returns": [{ "title": "return", "desc": "返回一个新的日期实例。<br />\n        此方法不更改参数 datetime 的值。而是返回一个新的 Date，其值是此运算的结果。", "type": "Date", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Date.js", "exceptions": [], "isa": "FUNCTION", "_name": "addMilliseconds", "_params": [{ "title": "param", "desc": "要进行操作的日期时间，如果不指定则默认为当前时间。", "type": "Date", "name": "datetime", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要增加/减少的毫秒数。可以为正数，也可以为负数。", "type": "Number", "name": "value", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Date.addMilliseconds(new Date(), 2000); //给当前时间加上2000毫秒", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "addMilliseconds", "params": [{ "title": "param", "desc": "要进行操作的日期时间，如果不指定则默认为当前时间。", "type": "Date", "name": "datetime", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要增加/减少的毫秒数。可以为正数，也可以为负数。", "type": "Number", "name": "value", "isOptional": false, "defaultValue": "" }] }], "comment": { "tagTexts": ["desc 日期时间工具", "class\n"], "src": "\n@desc 日期时间工具\n@class\n", "meta": "", "tags": [{ "title": "desc", "desc": "日期时间工具", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "class", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Date.js", "exceptions": [], "isa": "CONSTRUCTOR", "_name": "Date", "_params": [{ "title": "param", "desc": "", "type": "", "name": "date", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "Date", "params": [{ "title": "param", "desc": "", "type": "", "name": "date", "isOptional": false, "defaultValue": "" }] }, { "type": "MiniQuery.Event", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "自定义事件工具类。\n该模式也叫观察者模式，该模式的另外一个别名是 订阅/发布 模式。\n设计这种模式背后的主要动机是促进松散耦合。\n在这种模式中，并不是一个对象调用另一对象的方法，\n而是一个对象订阅另一个对象的特定活动并在该活动发生改变后获得通知。\n订阅者也称之为观察者，而被观察的对象成为发布者。\n当发生了一个重要的事件时，发布者将通知（调用）所有订阅者并且以事件对象的形式传递消息。", "alias": "MiniQuery.Event", "id": 986, "isStatic": true, "see": [], "methods": [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "给指定的对象绑定指定类型的事件处理函数。", "alias": "MiniQuery.Event.bind", "id": 991, "isStatic": true, "see": [], "methods": [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.Event.bind-bindItem", "id": 997, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.Event.bind", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Event.js", "exceptions": [], "isa": "FUNCTION", "_name": "bindItem", "_params": [{ "title": "param", "desc": "", "type": "", "name": "eventName", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "fn", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "bindItem", "params": [{ "title": "param", "desc": "", "type": "", "name": "eventName", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "fn", "isOptional": false, "defaultValue": "" }] }], "comment": { "tagTexts": ["desc 给指定的对象绑定指定类型的事件处理函数。", "param {Object} obj 要进行绑定事件的目标对象。", "param {string} eventName 要绑定的事件名称。", "param {function} fn 事件处理函数。 \n        在处理函数内部， this 指向参数 obj 对象。", "param {boolean} [isOnce=false] 指示是否只执行一次事件处理函数，\n        如果指定为 true，则执行事件处理函数后会将该处理函数从事件列表中移除。", "example\n        var obj = { value: 100 };\n        $.Event.bind(obj, 'show', function(){\n            console.log(this.value); // this 指向 obj\n        });\n        $.Event.bind(obj, {\n            myEvent: function(){\n                console.log(this.value);\n            },\n            add: function(value1, value2){\n                this.value += (value1 * value2);\n            }\n        });\n        $.Event.trigger(obj, 'show'); //输出 100\n        $.Event.trigger(obj, 'add', [2, 3]);\n        $.Event.trigger(obj, 'myEvent'); //输出 106\n    "], "src": "\n@desc 给指定的对象绑定指定类型的事件处理函数。\n@param {Object} obj 要进行绑定事件的目标对象。\n@param {string} eventName 要绑定的事件名称。\n@param {function} fn 事件处理函数。 \n        在处理函数内部， this 指向参数 obj 对象。\n@param {boolean} [isOnce=false] 指示是否只执行一次事件处理函数，\n        如果指定为 true，则执行事件处理函数后会将该处理函数从事件列表中移除。\n@example\n        var obj = { value: 100 };\n        $.Event.bind(obj, 'show', function(){\n            console.log(this.value); // this 指向 obj\n        });\n        $.Event.bind(obj, {\n            myEvent: function(){\n                console.log(this.value);\n            },\n            add: function(value1, value2){\n                this.value += (value1 * value2);\n            }\n        });\n        $.Event.trigger(obj, 'show'); //输出 100\n        $.Event.trigger(obj, 'add', [2, 3]);\n        $.Event.trigger(obj, 'myEvent'); //输出 106\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "给指定的对象绑定指定类型的事件处理函数。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行绑定事件的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要绑定的事件名称。", "type": "string", "name": "eventName", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "事件处理函数。 \n        在处理函数内部， this 指向参数 obj 对象。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否只执行一次事件处理函数，\n        如果指定为 true，则执行事件处理函数后会将该处理函数从事件列表中移除。", "type": "boolean", "name": "isOnce", "isOptional": true, "defaultValue": "false" }, { "title": "example", "desc": "\n        var obj = { value: 100 };\n        $.Event.bind(obj, 'show', function(){\n            console.log(this.value); // this 指向 obj\n        });\n        $.Event.bind(obj, {\n            myEvent: function(){\n                console.log(this.value);\n            },\n            add: function(value1, value2){\n                this.value += (value1 * value2);\n            }\n        });\n        $.Event.trigger(obj, 'show'); //输出 100\n        $.Event.trigger(obj, 'add', [2, 3]);\n        $.Event.trigger(obj, 'myEvent'); //输出 106", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Event", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Event.js", "exceptions": [], "isa": "FUNCTION", "_name": "bind", "_params": [{ "title": "param", "desc": "要进行绑定事件的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要绑定的事件名称。", "type": "string", "name": "eventName", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "事件处理函数。 \n        在处理函数内部， this 指向参数 obj 对象。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否只执行一次事件处理函数，\n        如果指定为 true，则执行事件处理函数后会将该处理函数从事件列表中移除。", "type": "boolean", "name": "isOnce", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var obj = { value: 100 };\n        $.Event.bind(obj, 'show', function(){\n            console.log(this.value); // this 指向 obj\n        });\n        $.Event.bind(obj, {\n            myEvent: function(){\n                console.log(this.value);\n            },\n            add: function(value1, value2){\n                this.value += (value1 * value2);\n            }\n        });\n        $.Event.trigger(obj, 'show'); //输出 100\n        $.Event.trigger(obj, 'add', [2, 3]);\n        $.Event.trigger(obj, 'myEvent'); //输出 106", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "bind", "params": [{ "title": "param", "desc": "要进行绑定事件的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要绑定的事件名称。", "type": "string", "name": "eventName", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "事件处理函数。 \n        在处理函数内部， this 指向参数 obj 对象。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否只执行一次事件处理函数，\n        如果指定为 true，则执行事件处理函数后会将该处理函数从事件列表中移除。", "type": "boolean", "name": "isOnce", "isOptional": true, "defaultValue": "false" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "给指定的对象绑定一个一次性的事件处理函数。", "alias": "MiniQuery.Event.once", "id": 1001, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 给指定的对象绑定一个一次性的事件处理函数。", "param {Object} obj 要进行绑定事件的目标对象。", "param {string} eventName 要绑定的事件名称。", "param {function} fn 事件处理函数。\n        在函数内部，this 指向参数 obj 对象。\n    "], "src": "\n@desc 给指定的对象绑定一个一次性的事件处理函数。\n@param {Object} obj 要进行绑定事件的目标对象。\n@param {string} eventName 要绑定的事件名称。\n@param {function} fn 事件处理函数。\n        在函数内部，this 指向参数 obj 对象。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "给指定的对象绑定一个一次性的事件处理函数。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行绑定事件的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要绑定的事件名称。", "type": "string", "name": "eventName", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "事件处理函数。\n        在函数内部，this 指向参数 obj 对象。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Event", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Event.js", "exceptions": [], "isa": "FUNCTION", "_name": "once", "_params": [{ "title": "param", "desc": "要进行绑定事件的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要绑定的事件名称。", "type": "string", "name": "eventName", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "事件处理函数。\n        在函数内部，this 指向参数 obj 对象。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "once", "params": [{ "title": "param", "desc": "要进行绑定事件的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要绑定的事件名称。", "type": "string", "name": "eventName", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "事件处理函数。\n        在函数内部，this 指向参数 obj 对象。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "给指定的对象解除绑定指定类型的事件处理函数。", "alias": "MiniQuery.Event.unbind", "id": 1003, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 给指定的对象解除绑定指定类型的事件处理函数。", "param {Object} obj 要进行解除绑定事件的目标对象。", "param {string} [eventName] 要解除绑定的事件名称。\n        如果不指定该参数，则移除所有的事件。\n        如果指定了该参数，其类型必须为 string，否则会抛出异常。", "param {function} [fn] 要解除绑定事件处理函数。\n        如果不指定，则移除 eventName 所关联的所有事件。\n    "], "src": "\n@desc 给指定的对象解除绑定指定类型的事件处理函数。\n@param {Object} obj 要进行解除绑定事件的目标对象。\n@param {string} [eventName] 要解除绑定的事件名称。\n        如果不指定该参数，则移除所有的事件。\n        如果指定了该参数，其类型必须为 string，否则会抛出异常。\n@param {function} [fn] 要解除绑定事件处理函数。\n        如果不指定，则移除 eventName 所关联的所有事件。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "给指定的对象解除绑定指定类型的事件处理函数。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行解除绑定事件的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要解除绑定的事件名称。\n        如果不指定该参数，则移除所有的事件。\n        如果指定了该参数，其类型必须为 string，否则会抛出异常。", "type": "string", "name": "eventName", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "要解除绑定事件处理函数。\n        如果不指定，则移除 eventName 所关联的所有事件。", "type": "function", "name": "fn", "isOptional": true, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Event", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Event.js", "exceptions": [], "isa": "FUNCTION", "_name": "unbind", "_params": [{ "title": "param", "desc": "要进行解除绑定事件的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要解除绑定的事件名称。\n        如果不指定该参数，则移除所有的事件。\n        如果指定了该参数，其类型必须为 string，否则会抛出异常。", "type": "string", "name": "eventName", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "要解除绑定事件处理函数。\n        如果不指定，则移除 eventName 所关联的所有事件。", "type": "function", "name": "fn", "isOptional": true, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "unbind", "params": [{ "title": "param", "desc": "要进行解除绑定事件的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要解除绑定的事件名称。\n        如果不指定该参数，则移除所有的事件。\n        如果指定了该参数，其类型必须为 string，否则会抛出异常。", "type": "string", "name": "eventName", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "要解除绑定事件处理函数。\n        如果不指定，则移除 eventName 所关联的所有事件。", "type": "function", "name": "fn", "isOptional": true, "defaultValue": "" }] }, { "type": "Array", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "触发指定的对象上的特定类型事件。", "alias": "MiniQuery.Event.trigger", "id": 1007, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 触发指定的对象上的特定类型事件。", "param {Object} obj 要触发事件的目标对象。", "param {string} eventName 要触发的事件名称。", "param {Array} [args] 要向事件处理函数传递的参数数组。", "return {Array} 返回所有事件处理函数的返回值所组成的一个数组。\n    "], "src": "\n@desc 触发指定的对象上的特定类型事件。\n@param {Object} obj 要触发事件的目标对象。\n@param {string} eventName 要触发的事件名称。\n@param {Array} [args] 要向事件处理函数传递的参数数组。\n@return {Array} 返回所有事件处理函数的返回值所组成的一个数组。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "触发指定的对象上的特定类型事件。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要触发事件的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要触发的事件名称。", "type": "string", "name": "eventName", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要向事件处理函数传递的参数数组。", "type": "Array", "name": "args", "isOptional": true, "defaultValue": "" }, { "title": "return", "desc": "返回所有事件处理函数的返回值所组成的一个数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Event", "since": "", "returns": [{ "title": "return", "desc": "返回所有事件处理函数的返回值所组成的一个数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Event.js", "exceptions": [], "isa": "FUNCTION", "_name": "trigger", "_params": [{ "title": "param", "desc": "要触发事件的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要触发的事件名称。", "type": "string", "name": "eventName", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要向事件处理函数传递的参数数组。", "type": "Array", "name": "args", "isOptional": true, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "trigger", "params": [{ "title": "param", "desc": "要触发事件的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要触发的事件名称。", "type": "string", "name": "eventName", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要向事件处理函数传递的参数数组。", "type": "Array", "name": "args", "isOptional": true, "defaultValue": "" }] }, { "type": "Array", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "触发指定的对象上的特定类型事件，当事件处理函数返回指定的值时将停止继续调用。", "alias": "MiniQuery.Event.triggerStop", "id": 1014, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 触发指定的对象上的特定类型事件，当事件处理函数返回指定的值时将停止继续调用。", "param {Object} obj 要触发事件的目标对象。", "param {string} eventName 要触发的事件名称。", "param {Array} [args] 要向事件处理函数传递的参数数组。", "param [stopValue=false] 要停止继续调用时的返回值。\n        当事件处理函数返回参数 stopValue 所指定的值时，将停止调用后面的处理函数。", "return {Array} 返回已调用的事件处理函数的返回值所组成的一个数组。\n    "], "src": "\n@desc 触发指定的对象上的特定类型事件，当事件处理函数返回指定的值时将停止继续调用。\n@param {Object} obj 要触发事件的目标对象。\n@param {string} eventName 要触发的事件名称。\n@param {Array} [args] 要向事件处理函数传递的参数数组。\n@param [stopValue=false] 要停止继续调用时的返回值。\n        当事件处理函数返回参数 stopValue 所指定的值时，将停止调用后面的处理函数。\n@return {Array} 返回已调用的事件处理函数的返回值所组成的一个数组。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "触发指定的对象上的特定类型事件，当事件处理函数返回指定的值时将停止继续调用。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要触发事件的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要触发的事件名称。", "type": "string", "name": "eventName", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要向事件处理函数传递的参数数组。", "type": "Array", "name": "args", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "要停止继续调用时的返回值。\n        当事件处理函数返回参数 stopValue 所指定的值时，将停止调用后面的处理函数。", "type": "", "name": "stopValue", "isOptional": true, "defaultValue": "false" }, { "title": "return", "desc": "返回已调用的事件处理函数的返回值所组成的一个数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Event", "since": "", "returns": [{ "title": "return", "desc": "返回已调用的事件处理函数的返回值所组成的一个数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Event.js", "exceptions": [], "isa": "FUNCTION", "_name": "triggerStop", "_params": [{ "title": "param", "desc": "要触发事件的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要触发的事件名称。", "type": "string", "name": "eventName", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要向事件处理函数传递的参数数组。", "type": "Array", "name": "args", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "要停止继续调用时的返回值。\n        当事件处理函数返回参数 stopValue 所指定的值时，将停止调用后面的处理函数。", "type": "", "name": "stopValue", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "triggerStop", "params": [{ "title": "param", "desc": "要触发事件的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要触发的事件名称。", "type": "string", "name": "eventName", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要向事件处理函数传递的参数数组。", "type": "Array", "name": "args", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "要停止继续调用时的返回值。\n        当事件处理函数返回参数 stopValue 所指定的值时，将停止调用后面的处理函数。", "type": "", "name": "stopValue", "isOptional": true, "defaultValue": "false" }] }, { "type": "boolean", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "检测指定的对象上是否包含特定类型的事件。", "alias": "MiniQuery.Event.has", "id": 1026, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 检测指定的对象上是否包含特定类型的事件。", "param {Object} obj 要检测的目标对象。", "param {string} [eventName] 要检测的事件名称。\n        当不指定时，则判断是否包含了任意类型的事件。", "param {function} [fn] 要检测的事件处理函数。", "return {boolean} 返回一个布尔值，该布尔值指示目标对象上是否包含指否类型的事件以及指定的处理函数。\n        如果是则返回 true；否则返回 false。\n    "], "src": "\n@desc 检测指定的对象上是否包含特定类型的事件。\n@param {Object} obj 要检测的目标对象。\n@param {string} [eventName] 要检测的事件名称。\n        当不指定时，则判断是否包含了任意类型的事件。\n@param {function} [fn] 要检测的事件处理函数。\n@return {boolean} 返回一个布尔值，该布尔值指示目标对象上是否包含指否类型的事件以及指定的处理函数。\n        如果是则返回 true；否则返回 false。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "检测指定的对象上是否包含特定类型的事件。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要检测的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要检测的事件名称。\n        当不指定时，则判断是否包含了任意类型的事件。", "type": "string", "name": "eventName", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "要检测的事件处理函数。", "type": "function", "name": "fn", "isOptional": true, "defaultValue": "" }, { "title": "return", "desc": "返回一个布尔值，该布尔值指示目标对象上是否包含指否类型的事件以及指定的处理函数。\n        如果是则返回 true；否则返回 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Event", "since": "", "returns": [{ "title": "return", "desc": "返回一个布尔值，该布尔值指示目标对象上是否包含指否类型的事件以及指定的处理函数。\n        如果是则返回 true；否则返回 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Event.js", "exceptions": [], "isa": "FUNCTION", "_name": "has", "_params": [{ "title": "param", "desc": "要检测的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要检测的事件名称。\n        当不指定时，则判断是否包含了任意类型的事件。", "type": "string", "name": "eventName", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "要检测的事件处理函数。", "type": "function", "name": "fn", "isOptional": true, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "has", "params": [{ "title": "param", "desc": "要检测的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要检测的事件名称。\n        当不指定时，则判断是否包含了任意类型的事件。", "type": "string", "name": "eventName", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "要检测的事件处理函数。", "type": "function", "name": "fn", "isOptional": true, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "给指定的对象绑定/解除绑定指定类型的事件处理函数。\n如果目标对象的指定类型事件中存在该处理函数，则移除它；否则会添加它。", "alias": "MiniQuery.Event.toggle", "id": 1033, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 给指定的对象绑定/解除绑定指定类型的事件处理函数。\n如果目标对象的指定类型事件中存在该处理函数，则移除它；否则会添加它。", "param {Object} obj 要进行绑定/解除绑定事件的目标对象。", "param {string} eventName 要绑定/解除绑定的事件名称。", "param {function} fn 事件处理函数。 ", "param {boolean} [isOnce=false] 指示是否只执行一次事件处理函数，\n        如果指定为 true，则执行事件处理函数后会将该处理函数从事件列表中移除。", "example\n        var obj = { value: 100 };\n        var fn = function() {\n            console.log(this.value); // this 指向 obj\n        }\n        $.Event.bind(obj, 'show', fn);\n        $.Event.trigger(obj, 'show'); //输出 100\n\n        $.Event.toggle(obj, 'show', fn); //因为 'show' 事件列表中已存在 fn 函数，所以会给移除\n        $.Event.trigger(obj, 'show'); //fn 函数已给移除，因为不产生输出\n    "], "src": "\n@desc 给指定的对象绑定/解除绑定指定类型的事件处理函数。\n如果目标对象的指定类型事件中存在该处理函数，则移除它；否则会添加它。\n@param {Object} obj 要进行绑定/解除绑定事件的目标对象。\n@param {string} eventName 要绑定/解除绑定的事件名称。\n@param {function} fn 事件处理函数。 \n@param {boolean} [isOnce=false] 指示是否只执行一次事件处理函数，\n        如果指定为 true，则执行事件处理函数后会将该处理函数从事件列表中移除。\n@example\n        var obj = { value: 100 };\n        var fn = function() {\n            console.log(this.value); // this 指向 obj\n        }\n        $.Event.bind(obj, 'show', fn);\n        $.Event.trigger(obj, 'show'); //输出 100\n\n        $.Event.toggle(obj, 'show', fn); //因为 'show' 事件列表中已存在 fn 函数，所以会给移除\n        $.Event.trigger(obj, 'show'); //fn 函数已给移除，因为不产生输出\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "给指定的对象绑定/解除绑定指定类型的事件处理函数。\n如果目标对象的指定类型事件中存在该处理函数，则移除它；否则会添加它。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行绑定/解除绑定事件的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要绑定/解除绑定的事件名称。", "type": "string", "name": "eventName", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "事件处理函数。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否只执行一次事件处理函数，\n        如果指定为 true，则执行事件处理函数后会将该处理函数从事件列表中移除。", "type": "boolean", "name": "isOnce", "isOptional": true, "defaultValue": "false" }, { "title": "example", "desc": "\n        var obj = { value: 100 };\n        var fn = function() {\n            console.log(this.value); // this 指向 obj\n        }\n        $.Event.bind(obj, 'show', fn);\n        $.Event.trigger(obj, 'show'); //输出 100\n\n        $.Event.toggle(obj, 'show', fn); //因为 'show' 事件列表中已存在 fn 函数，所以会给移除\n        $.Event.trigger(obj, 'show'); //fn 函数已给移除，因为不产生输出", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Event", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Event.js", "exceptions": [], "isa": "FUNCTION", "_name": "toggle", "_params": [{ "title": "param", "desc": "要进行绑定/解除绑定事件的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要绑定/解除绑定的事件名称。", "type": "string", "name": "eventName", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "事件处理函数。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否只执行一次事件处理函数，\n        如果指定为 true，则执行事件处理函数后会将该处理函数从事件列表中移除。", "type": "boolean", "name": "isOnce", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var obj = { value: 100 };\n        var fn = function() {\n            console.log(this.value); // this 指向 obj\n        }\n        $.Event.bind(obj, 'show', fn);\n        $.Event.trigger(obj, 'show'); //输出 100\n\n        $.Event.toggle(obj, 'show', fn); //因为 'show' 事件列表中已存在 fn 函数，所以会给移除\n        $.Event.trigger(obj, 'show'); //fn 函数已给移除，因为不产生输出", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "toggle", "params": [{ "title": "param", "desc": "要进行绑定/解除绑定事件的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要绑定/解除绑定的事件名称。", "type": "string", "name": "eventName", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "事件处理函数。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否只执行一次事件处理函数，\n        如果指定为 true，则执行事件处理函数后会将该处理函数从事件列表中移除。", "type": "boolean", "name": "isOnce", "isOptional": true, "defaultValue": "false" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "给指定的对象只绑定一次指定类型的事件处理函数。\n只有当目标对象的指定类型事件中不存在该处理函数时才添加；否则忽略操作。", "alias": "MiniQuery.Event.unique", "id": 1034, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 给指定的对象只绑定一次指定类型的事件处理函数。\n只有当目标对象的指定类型事件中不存在该处理函数时才添加；否则忽略操作。", "param {Object} obj 要进行绑定事件的目标对象。", "param {string} eventName 要绑定的事件名称。", "param {function} fn 事件处理函数。 ", "param {boolean} [isOnce=false] 指示是否只执行一次事件处理函数，\n        如果指定为 true，则执行事件处理函数后会将该处理函数从事件列表中移除。", "example\n        var obj = { value: 100 };\n        var fn = function() {\n            console.log(this.value); // this 指向 obj\n        }\n        $.Event.bind(obj, 'show', fn);\n        $.Event.trigger(obj, 'show'); //输出 100\n\n        $.Event.unique(obj, 'show', fn); //因为 'show' 事件列表中已存在 fn 函数，所以不会重复绑定\n        $.Event.trigger(obj, 'show'); //依然只输出 100\n    "], "src": "\n@desc 给指定的对象只绑定一次指定类型的事件处理函数。\n只有当目标对象的指定类型事件中不存在该处理函数时才添加；否则忽略操作。\n@param {Object} obj 要进行绑定事件的目标对象。\n@param {string} eventName 要绑定的事件名称。\n@param {function} fn 事件处理函数。 \n@param {boolean} [isOnce=false] 指示是否只执行一次事件处理函数，\n        如果指定为 true，则执行事件处理函数后会将该处理函数从事件列表中移除。\n@example\n        var obj = { value: 100 };\n        var fn = function() {\n            console.log(this.value); // this 指向 obj\n        }\n        $.Event.bind(obj, 'show', fn);\n        $.Event.trigger(obj, 'show'); //输出 100\n\n        $.Event.unique(obj, 'show', fn); //因为 'show' 事件列表中已存在 fn 函数，所以不会重复绑定\n        $.Event.trigger(obj, 'show'); //依然只输出 100\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "给指定的对象只绑定一次指定类型的事件处理函数。\n只有当目标对象的指定类型事件中不存在该处理函数时才添加；否则忽略操作。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行绑定事件的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要绑定的事件名称。", "type": "string", "name": "eventName", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "事件处理函数。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否只执行一次事件处理函数，\n        如果指定为 true，则执行事件处理函数后会将该处理函数从事件列表中移除。", "type": "boolean", "name": "isOnce", "isOptional": true, "defaultValue": "false" }, { "title": "example", "desc": "\n        var obj = { value: 100 };\n        var fn = function() {\n            console.log(this.value); // this 指向 obj\n        }\n        $.Event.bind(obj, 'show', fn);\n        $.Event.trigger(obj, 'show'); //输出 100\n\n        $.Event.unique(obj, 'show', fn); //因为 'show' 事件列表中已存在 fn 函数，所以不会重复绑定\n        $.Event.trigger(obj, 'show'); //依然只输出 100", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Event", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Event.js", "exceptions": [], "isa": "FUNCTION", "_name": "unique", "_params": [{ "title": "param", "desc": "要进行绑定事件的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要绑定的事件名称。", "type": "string", "name": "eventName", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "事件处理函数。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否只执行一次事件处理函数，\n        如果指定为 true，则执行事件处理函数后会将该处理函数从事件列表中移除。", "type": "boolean", "name": "isOnce", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var obj = { value: 100 };\n        var fn = function() {\n            console.log(this.value); // this 指向 obj\n        }\n        $.Event.bind(obj, 'show', fn);\n        $.Event.trigger(obj, 'show'); //输出 100\n\n        $.Event.unique(obj, 'show', fn); //因为 'show' 事件列表中已存在 fn 函数，所以不会重复绑定\n        $.Event.trigger(obj, 'show'); //依然只输出 100", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "unique", "params": [{ "title": "param", "desc": "要进行绑定事件的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要绑定的事件名称。", "type": "string", "name": "eventName", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "事件处理函数。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否只执行一次事件处理函数，\n        如果指定为 true，则执行事件处理函数后会将该处理函数从事件列表中移除。", "type": "boolean", "name": "isOnce", "isOptional": true, "defaultValue": "false" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "创建一个通用事件类的实例。\n该实例内部会创建一个具有 guid 的对象用来管理事件。", "alias": "MiniQuery.Event.create", "id": 1035, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 创建一个通用事件类的实例。\n该实例内部会创建一个具有 guid 的对象用来管理事件。", "example\n        var event = $.Event.create();\n        event.on('myEvent', function () {  });\n    "], "src": "\n@desc 创建一个通用事件类的实例。\n该实例内部会创建一个具有 guid 的对象用来管理事件。\n@example\n        var event = $.Event.create();\n        event.on('myEvent', function () {  });\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "创建一个通用事件类的实例。\n该实例内部会创建一个具有 guid 的对象用来管理事件。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var event = $.Event.create();\n        event.on('myEvent', function () {  });", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Event", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Event.js", "exceptions": [], "isa": "FUNCTION", "_name": "create", "_params": [], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var event = $.Event.create();\n        event.on('myEvent', function () {  });", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "create", "params": [] }], "comment": { "tagTexts": ["desc 自定义事件工具类。\n该模式也叫观察者模式，该模式的另外一个别名是 订阅/发布 模式。\n设计这种模式背后的主要动机是促进松散耦合。\n在这种模式中，并不是一个对象调用另一对象的方法，\n而是一个对象订阅另一个对象的特定活动并在该活动发生改变后获得通知。\n订阅者也称之为观察者，而被观察的对象成为发布者。\n当发生了一个重要的事件时，发布者将通知（调用）所有订阅者并且以事件对象的形式传递消息。", "class", "param {Object} obj 要进行绑定事件的目标对象。", "return {MiniQuery.Event} 返回一个 MiniQuery.Event 的实例。\n"], "src": "\n@desc 自定义事件工具类。\n该模式也叫观察者模式，该模式的另外一个别名是 订阅/发布 模式。\n设计这种模式背后的主要动机是促进松散耦合。\n在这种模式中，并不是一个对象调用另一对象的方法，\n而是一个对象订阅另一个对象的特定活动并在该活动发生改变后获得通知。\n订阅者也称之为观察者，而被观察的对象成为发布者。\n当发生了一个重要的事件时，发布者将通知（调用）所有订阅者并且以事件对象的形式传递消息。\n@class\n@param {Object} obj 要进行绑定事件的目标对象。\n@return {MiniQuery.Event} 返回一个 MiniQuery.Event 的实例。\n", "meta": "", "tags": [{ "title": "desc", "desc": "自定义事件工具类。\n该模式也叫观察者模式，该模式的另外一个别名是 订阅/发布 模式。\n设计这种模式背后的主要动机是促进松散耦合。\n在这种模式中，并不是一个对象调用另一对象的方法，\n而是一个对象订阅另一个对象的特定活动并在该活动发生改变后获得通知。\n订阅者也称之为观察者，而被观察的对象成为发布者。\n当发生了一个重要的事件时，发布者将通知（调用）所有订阅者并且以事件对象的形式传递消息。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "class", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行绑定事件的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个 MiniQuery.Event 的实例。", "type": "MiniQuery.Event", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery", "since": "", "returns": [{ "title": "return", "desc": "返回一个 MiniQuery.Event 的实例。", "type": "MiniQuery.Event", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Event.js", "exceptions": [], "isa": "CONSTRUCTOR", "_name": "Event", "_params": [{ "title": "param", "desc": "要进行绑定事件的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "Event", "params": [{ "title": "param", "desc": "要进行绑定事件的目标对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": true, "augments": [], "fires": [], "desc": "全局唯一标识符工具类（GUID: Globally Unique Identifier）。\n提供全局 ID 生成和管理的方法，可用于给组件创建 ID。", "alias": "MiniQuery.Guid", "id": 1071, "isStatic": true, "see": [], "methods": [{ "type": "int", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "获取指定分组的下一个计数器。\n如果尚未存在该分组，则从 1 开始计数。", "alias": "MiniQuery.Guid.next", "id": 1076, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 获取指定分组的下一个计数器。\n如果尚未存在该分组，则从 1 开始计数。", "param {string} groupName 分组的名称。 ", "return {int} 返回一个整数。", "example \n        $.Guid.next('group1'); //1\n        $.Guid.next('group2'); //1\n        $.Guid.next('group2'); //2\n        $.Guid.next('group1'); //2\n        $.Guid.next(); //1\n        $.Guid.next(); //2\n    "], "src": "\n@desc 获取指定分组的下一个计数器。\n如果尚未存在该分组，则从 1 开始计数。\n@param {string} groupName 分组的名称。 \n@return {int} 返回一个整数。\n@example \n        $.Guid.next('group1'); //1\n        $.Guid.next('group2'); //1\n        $.Guid.next('group2'); //2\n        $.Guid.next('group1'); //2\n        $.Guid.next(); //1\n        $.Guid.next(); //2\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "获取指定分组的下一个计数器。\n如果尚未存在该分组，则从 1 开始计数。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "分组的名称。", "type": "string", "name": "groupName", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个整数。", "type": "int", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Guid.next('group1'); //1\n        $.Guid.next('group2'); //1\n        $.Guid.next('group2'); //2\n        $.Guid.next('group1'); //2\n        $.Guid.next(); //1\n        $.Guid.next(); //2", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Guid", "since": "", "returns": [{ "title": "return", "desc": "返回一个整数。", "type": "int", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Guid.js", "exceptions": [], "isa": "FUNCTION", "_name": "next", "_params": [{ "title": "param", "desc": "分组的名称。", "type": "string", "name": "groupName", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Guid.next('group1'); //1\n        $.Guid.next('group2'); //1\n        $.Guid.next('group2'); //2\n        $.Guid.next('group1'); //2\n        $.Guid.next(); //1\n        $.Guid.next(); //2", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "next", "params": [{ "title": "param", "desc": "分组的名称。", "type": "string", "name": "groupName", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "给指定分组的下计数器清零。\n如果尚未存在该分组，则先创建该分组。", "alias": "MiniQuery.Guid.reset", "id": 1080, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 给指定分组的下计数器清零。\n如果尚未存在该分组，则先创建该分组。", "param {string} groupName 分组的名称。 ", "example \n        $.Guid.reset('group1');\n        $.Guid.reset('group2');\n        $.Guid.reset();\n    "], "src": "\n@desc 给指定分组的下计数器清零。\n如果尚未存在该分组，则先创建该分组。\n@param {string} groupName 分组的名称。 \n@example \n        $.Guid.reset('group1');\n        $.Guid.reset('group2');\n        $.Guid.reset();\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "给指定分组的下计数器清零。\n如果尚未存在该分组，则先创建该分组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "分组的名称。", "type": "string", "name": "groupName", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Guid.reset('group1');\n        $.Guid.reset('group2');\n        $.Guid.reset();", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Guid", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Guid.js", "exceptions": [], "isa": "FUNCTION", "_name": "reset", "_params": [{ "title": "param", "desc": "分组的名称。", "type": "string", "name": "groupName", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Guid.reset('group1');\n        $.Guid.reset('group2');\n        $.Guid.reset();", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "reset", "params": [{ "title": "param", "desc": "分组的名称。", "type": "string", "name": "groupName", "isOptional": false, "defaultValue": "" }] }, { "type": "string", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "获取指定分组的并且按指定字符串格式化的 id 值。\n如果尚未存在该分组，则从 1 开始计数。", "alias": "MiniQuery.Guid.get", "id": 1082, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 获取指定分组的并且按指定字符串格式化的 id 值。\n如果尚未存在该分组，则从 1 开始计数。", "param {string} groupName 分组的名称。 ", "param {string} [formater='{0}'] 要填充的格式化字符串。", "return {string} 返回格式化后的 id 字符串。", "example \n        $.Guid.get('group1', 'label_{0}_{1}'); // 'label_1_2'\n        $.Guid.get('group1', 'label_{0}_{1}'); // 'label_3_4'\n        $.Guid.get('group2', 'button_{0}_{1}'); // 'button_1_2'\n        $.Guid.get('group2', 'button_{0}_{0}'); // 'button_3_3'\n    "], "src": "\n@desc 获取指定分组的并且按指定字符串格式化的 id 值。\n如果尚未存在该分组，则从 1 开始计数。\n@param {string} groupName 分组的名称。 \n@param {string} [formater='{0}'] 要填充的格式化字符串。\n@return {string} 返回格式化后的 id 字符串。\n@example \n        $.Guid.get('group1', 'label_{0}_{1}'); // 'label_1_2'\n        $.Guid.get('group1', 'label_{0}_{1}'); // 'label_3_4'\n        $.Guid.get('group2', 'button_{0}_{1}'); // 'button_1_2'\n        $.Guid.get('group2', 'button_{0}_{0}'); // 'button_3_3'\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "获取指定分组的并且按指定字符串格式化的 id 值。\n如果尚未存在该分组，则从 1 开始计数。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "分组的名称。", "type": "string", "name": "groupName", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要填充的格式化字符串。", "type": "string", "name": "formater", "isOptional": true, "defaultValue": "'{0}'" }, { "title": "return", "desc": "返回格式化后的 id 字符串。", "type": "string", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Guid.get('group1', 'label_{0}_{1}'); // 'label_1_2'\n        $.Guid.get('group1', 'label_{0}_{1}'); // 'label_3_4'\n        $.Guid.get('group2', 'button_{0}_{1}'); // 'button_1_2'\n        $.Guid.get('group2', 'button_{0}_{0}'); // 'button_3_3'", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Guid", "since": "", "returns": [{ "title": "return", "desc": "返回格式化后的 id 字符串。", "type": "string", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Guid.js", "exceptions": [], "isa": "FUNCTION", "_name": "get", "_params": [{ "title": "param", "desc": "分组的名称。", "type": "string", "name": "groupName", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要填充的格式化字符串。", "type": "string", "name": "formater", "isOptional": true, "defaultValue": "'{0}'" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Guid.get('group1', 'label_{0}_{1}'); // 'label_1_2'\n        $.Guid.get('group1', 'label_{0}_{1}'); // 'label_3_4'\n        $.Guid.get('group2', 'button_{0}_{1}'); // 'button_1_2'\n        $.Guid.get('group2', 'button_{0}_{0}'); // 'button_3_3'", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "get", "params": [{ "title": "param", "desc": "分组的名称。", "type": "string", "name": "groupName", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要填充的格式化字符串。", "type": "string", "name": "formater", "isOptional": true, "defaultValue": "'{0}'" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把指定的 id 值添加(注册)到 guid 列表中，以表示该 id 已被占用。", "alias": "MiniQuery.Guid.add", "id": 1089, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 把指定的 id 值添加(注册)到 guid 列表中，以表示该 id 已被占用。", "param {string} id 字符串的 ID 值。", "example \n        $.Guid.add('myId');\n    "], "src": "\n@desc 把指定的 id 值添加(注册)到 guid 列表中，以表示该 id 已被占用。\n@param {string} id 字符串的 ID 值。\n@example \n        $.Guid.add('myId');\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把指定的 id 值添加(注册)到 guid 列表中，以表示该 id 已被占用。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "字符串的 ID 值。", "type": "string", "name": "id", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Guid.add('myId');", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Guid", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Guid.js", "exceptions": [], "isa": "FUNCTION", "_name": "add", "_params": [{ "title": "param", "desc": "字符串的 ID 值。", "type": "string", "name": "id", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Guid.add('myId');", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "add", "params": [{ "title": "param", "desc": "字符串的 ID 值。", "type": "string", "name": "id", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把指定的 id 值从 guid 列表中移除，以表示该 id 已被释放。", "alias": "MiniQuery.Guid.remove", "id": 1090, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 把指定的 id 值从 guid 列表中移除，以表示该 id 已被释放。", "param {string} id 字符串的 ID 值。", "example \n        $.Guid.remove('myId');\n    "], "src": "\n@desc 把指定的 id 值从 guid 列表中移除，以表示该 id 已被释放。\n@param {string} id 字符串的 ID 值。\n@example \n        $.Guid.remove('myId');\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把指定的 id 值从 guid 列表中移除，以表示该 id 已被释放。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "字符串的 ID 值。", "type": "string", "name": "id", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Guid.remove('myId');", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Guid", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Guid.js", "exceptions": [], "isa": "FUNCTION", "_name": "remove", "_params": [{ "title": "param", "desc": "字符串的 ID 值。", "type": "string", "name": "id", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Guid.remove('myId');", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "remove", "params": [{ "title": "param", "desc": "字符串的 ID 值。", "type": "string", "name": "id", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "判断指定的 id 值已给占用。", "alias": "MiniQuery.Guid.exist", "id": 1091, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 判断指定的 id 值已给占用。", "param {string} id 字符串的 ID 值。", "example \n        $.Guid.exist('myId');\n    "], "src": "\n@desc 判断指定的 id 值已给占用。\n@param {string} id 字符串的 ID 值。\n@example \n        $.Guid.exist('myId');\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "判断指定的 id 值已给占用。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "字符串的 ID 值。", "type": "string", "name": "id", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Guid.exist('myId');", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Guid", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Guid.js", "exceptions": [], "isa": "FUNCTION", "_name": "exist", "_params": [{ "title": "param", "desc": "字符串的 ID 值。", "type": "string", "name": "id", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Guid.exist('myId');", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "exist", "params": [{ "title": "param", "desc": "字符串的 ID 值。", "type": "string", "name": "id", "isOptional": false, "defaultValue": "" }] }], "comment": { "tagTexts": ["desc 全局唯一标识符工具类（GUID: Globally Unique Identifier）。\n提供全局 ID 生成和管理的方法，可用于给组件创建 ID。", "namespace\n"], "src": "\n@desc 全局唯一标识符工具类（GUID: Globally Unique Identifier）。\n提供全局 ID 生成和管理的方法，可用于给组件创建 ID。\n@namespace\n", "meta": "", "tags": [{ "title": "desc", "desc": "全局唯一标识符工具类（GUID: Globally Unique Identifier）。\n提供全局 ID 生成和管理的方法，可用于给组件创建 ID。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "namespace", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Guid.js", "exceptions": [], "isa": "OBJECT", "_name": "Guid", "_params": [{ "title": "param", "desc": "", "type": "", "name": "$", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "This", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "scopeType": "INSTANCE", "properties": [], "name": "Guid", "params": [{ "title": "param", "desc": "", "type": "", "name": "$", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "This", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": true, "augments": [], "fires": [], "desc": "本地存储工具类", "alias": "MiniQuery.LocalStorage", "id": 1312, "isStatic": true, "see": [], "methods": [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.LocalStorage-set", "id": 1316, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.LocalStorage", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\LocalStorage.js", "exceptions": [], "isa": "FUNCTION", "_name": "set", "_params": [{ "title": "param", "desc": "", "type": "", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "value", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "set", "params": [{ "title": "param", "desc": "", "type": "", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "value", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.LocalStorage-get", "id": 1318, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.LocalStorage", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\LocalStorage.js", "exceptions": [], "isa": "FUNCTION", "_name": "get", "_params": [{ "title": "param", "desc": "", "type": "", "name": "key", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "get", "params": [{ "title": "param", "desc": "", "type": "", "name": "key", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.LocalStorage-remove", "id": 1319, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.LocalStorage", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\LocalStorage.js", "exceptions": [], "isa": "FUNCTION", "_name": "remove", "_params": [{ "title": "param", "desc": "", "type": "", "name": "key", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "remove", "params": [{ "title": "param", "desc": "", "type": "", "name": "key", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.LocalStorage-clear", "id": 1321, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.LocalStorage", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\LocalStorage.js", "exceptions": [], "isa": "FUNCTION", "_name": "clear", "_params": [], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "clear", "params": [] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.LocalStorage-each", "id": 1324, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.LocalStorage", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\LocalStorage.js", "exceptions": [], "isa": "FUNCTION", "_name": "each", "_params": [{ "title": "param", "desc": "", "type": "", "name": "fn", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "each", "params": [{ "title": "param", "desc": "", "type": "", "name": "fn", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.LocalStorage-length", "id": 1325, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.LocalStorage", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\LocalStorage.js", "exceptions": [], "isa": "FUNCTION", "_name": "length", "_params": [], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "length", "params": [] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.LocalStorage-keys", "id": 1326, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.LocalStorage", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\LocalStorage.js", "exceptions": [], "isa": "FUNCTION", "_name": "keys", "_params": [], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "keys", "params": [] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.LocalStorage-key", "id": 1328, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.LocalStorage", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\LocalStorage.js", "exceptions": [], "isa": "FUNCTION", "_name": "key", "_params": [{ "title": "param", "desc": "", "type": "", "name": "index", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "key", "params": [{ "title": "param", "desc": "", "type": "", "name": "index", "isOptional": false, "defaultValue": "" }] }], "comment": { "tagTexts": ["desc 本地存储工具类", "namespace\n"], "src": "\n@desc 本地存储工具类\n@namespace\n", "meta": "", "tags": [{ "title": "desc", "desc": "本地存储工具类", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "namespace", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\LocalStorage.js", "exceptions": [], "isa": "OBJECT", "_name": "LocalStorage", "_params": [{ "title": "param", "desc": "", "type": "", "name": "localStorage", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "scopeType": "INSTANCE", "properties": [], "name": "LocalStorage", "params": [{ "title": "param", "desc": "", "type": "", "name": "localStorage", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "映射器工具类。\n实现任意类型的两个变量的关联。", "alias": "MiniQuery.Mapper", "id": 1092, "isStatic": true, "see": [], "methods": [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.Mapper-getString", "id": 1097, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.Mapper", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Mapper.js", "exceptions": [], "isa": "FUNCTION", "_name": "getString", "_params": [{ "title": "param", "desc": "", "type": "", "name": "obj", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "getString", "params": [{ "title": "param", "desc": "", "type": "", "name": "obj", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.Mapper.getGuidKey", "id": 1100, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.Mapper", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Mapper.js", "exceptions": [], "isa": "FUNCTION", "_name": "getGuidKey", "_params": [], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "getGuidKey", "params": [] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "设置一对映射关系。", "alias": "MiniQuery.Mapper#set", "id": 1102, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc 设置一对映射关系。", "param src 映射关系的键，可以是任何类型。", "param target 映射关系要关联的值，可是任何类型。", "return 返回第二个参数 target。", "example\n            var obj = { a: 1, b: 2 };\n            var fn = function(a, b) {\n                console.log(a+b);\n            };\n            var mapper = new $.Mapper();\n            mapper.set(obj, fn);\n            mapper.set('a', 100);\n            mapper.set(100, 'abc');\n            mapper.set('100', 'ABC');\n            mapper.set(null, 'abc');\n            \n        "], "src": "\n@desc 设置一对映射关系。\n@param src 映射关系的键，可以是任何类型。\n@param target 映射关系要关联的值，可是任何类型。\n@return 返回第二个参数 target。\n@example\n            var obj = { a: 1, b: 2 };\n            var fn = function(a, b) {\n                console.log(a+b);\n            };\n            var mapper = new $.Mapper();\n            mapper.set(obj, fn);\n            mapper.set('a', 100);\n            mapper.set(100, 'abc');\n            mapper.set('100', 'ABC');\n            mapper.set(null, 'abc');\n            \n        ", "meta": "", "tags": [{ "title": "desc", "desc": "设置一对映射关系。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "映射关系的键，可以是任何类型。", "type": "", "name": "src", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "映射关系要关联的值，可是任何类型。", "type": "", "name": "target", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回第二个参数 target。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n            var obj = { a: 1, b: 2 };\n            var fn = function(a, b) {\n                console.log(a+b);\n            };\n            var mapper = new $.Mapper();\n            mapper.set(obj, fn);\n            mapper.set('a', 100);\n            mapper.set(100, 'abc');\n            mapper.set('100', 'ABC');\n            mapper.set(null, 'abc');", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Mapper", "since": "", "returns": [{ "title": "return", "desc": "返回第二个参数 target。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Mapper.js", "exceptions": [], "isa": "FUNCTION", "_name": "set", "_params": [{ "title": "param", "desc": "映射关系的键，可以是任何类型。", "type": "", "name": "src", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "映射关系要关联的值，可是任何类型。", "type": "", "name": "target", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n            var obj = { a: 1, b: 2 };\n            var fn = function(a, b) {\n                console.log(a+b);\n            };\n            var mapper = new $.Mapper();\n            mapper.set(obj, fn);\n            mapper.set('a', 100);\n            mapper.set(100, 'abc');\n            mapper.set('100', 'ABC');\n            mapper.set(null, 'abc');", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "set", "params": [{ "title": "param", "desc": "映射关系的键，可以是任何类型。", "type": "", "name": "src", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "映射关系要关联的值，可是任何类型。", "type": "", "name": "target", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "批量设置映射关系。", "alias": "MiniQuery.Mapper#setBatch", "id": 1111, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc 批量设置映射关系。", "param {Array} list 映射关系的列表，是一个二维数组，每个数组项为[src, target] 的格式。", "example\n            var mapper = new $.Mapper();\n            mapper.setBatch([\n                ['a', 100],\n                ['b', 200]\n                ['c', false]\n            ]);\n        "], "src": "\n@desc 批量设置映射关系。\n@param {Array} list 映射关系的列表，是一个二维数组，每个数组项为[src, target] 的格式。\n@example\n            var mapper = new $.Mapper();\n            mapper.setBatch([\n                ['a', 100],\n                ['b', 200]\n                ['c', false]\n            ]);\n        ", "meta": "", "tags": [{ "title": "desc", "desc": "批量设置映射关系。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "映射关系的列表，是一个二维数组，每个数组项为[src, target] 的格式。", "type": "Array", "name": "list", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n            var mapper = new $.Mapper();\n            mapper.setBatch([\n                ['a', 100],\n                ['b', 200]\n                ['c', false]\n            ]);", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Mapper", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Mapper.js", "exceptions": [], "isa": "FUNCTION", "_name": "setBatch", "_params": [{ "title": "param", "desc": "映射关系的列表，是一个二维数组，每个数组项为[src, target] 的格式。", "type": "Array", "name": "list", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n            var mapper = new $.Mapper();\n            mapper.setBatch([\n                ['a', 100],\n                ['b', 200]\n                ['c', false]\n            ]);", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "setBatch", "params": [{ "title": "param", "desc": "映射关系的列表，是一个二维数组，每个数组项为[src, target] 的格式。", "type": "Array", "name": "list", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "获取一对映射关系所关联的值。<br />\n注意：根据映射关系的键查找所关联的值时，对键使用的是全等比较，即区分数据类型。", "alias": "MiniQuery.Mapper#get", "id": 1114, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc 获取一对映射关系所关联的值。<br />\n注意：根据映射关系的键查找所关联的值时，对键使用的是全等比较，即区分数据类型。", "param src 映射关系的键，可以是任何类型。", "return 返回映射关系所关联的值。", "example\n            var obj = { a: 1, b: 2 };\n            var fn = function(a, b) {\n                console.log(a+b);\n            };\n            \n            var mapper = new $.Mapper();\n            mapper.set(obj, fn);\n            \n            var myFn = mapper.get(obj); //获取到之前关联的 fn\n            myFn(100, 200);\n        "], "src": "\n@desc 获取一对映射关系所关联的值。<br />\n注意：根据映射关系的键查找所关联的值时，对键使用的是全等比较，即区分数据类型。\n@param src 映射关系的键，可以是任何类型。\n@return 返回映射关系所关联的值。\n@example\n            var obj = { a: 1, b: 2 };\n            var fn = function(a, b) {\n                console.log(a+b);\n            };\n            \n            var mapper = new $.Mapper();\n            mapper.set(obj, fn);\n            \n            var myFn = mapper.get(obj); //获取到之前关联的 fn\n            myFn(100, 200);\n        ", "meta": "", "tags": [{ "title": "desc", "desc": "获取一对映射关系所关联的值。<br />\n注意：根据映射关系的键查找所关联的值时，对键使用的是全等比较，即区分数据类型。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "映射关系的键，可以是任何类型。", "type": "", "name": "src", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回映射关系所关联的值。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n            var obj = { a: 1, b: 2 };\n            var fn = function(a, b) {\n                console.log(a+b);\n            };\n            \n            var mapper = new $.Mapper();\n            mapper.set(obj, fn);\n            \n            var myFn = mapper.get(obj); //获取到之前关联的 fn\n            myFn(100, 200);", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Mapper", "since": "", "returns": [{ "title": "return", "desc": "返回映射关系所关联的值。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Mapper.js", "exceptions": [], "isa": "FUNCTION", "_name": "get", "_params": [{ "title": "param", "desc": "映射关系的键，可以是任何类型。", "type": "", "name": "src", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n            var obj = { a: 1, b: 2 };\n            var fn = function(a, b) {\n                console.log(a+b);\n            };\n            \n            var mapper = new $.Mapper();\n            mapper.set(obj, fn);\n            \n            var myFn = mapper.get(obj); //获取到之前关联的 fn\n            myFn(100, 200);", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "get", "params": [{ "title": "param", "desc": "映射关系的键，可以是任何类型。", "type": "", "name": "src", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "根据给定的键移除一对映射关系。\n注意：根据映射关系的键查找所关联的值时，对键使用的是全等比较，即区分数据类型。", "alias": "MiniQuery.Mapper#remove", "id": 1122, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc 根据给定的键移除一对映射关系。\n注意：根据映射关系的键查找所关联的值时，对键使用的是全等比较，即区分数据类型。", "param src 映射关系的键，可以是任何类型。", "example\n            var obj = { a: 1, b: 2 };\n            var fn = function(a, b) {\n                console.log(a+b);\n            };\n            \n            var mapper = new $.Mapper();\n            mapper.set(obj, fn);\n            \n            mapper.remove(obj);\n            fn = mapper.get(obj);\n            console.log( typeof fn); // undefined\n        "], "src": "\n@desc 根据给定的键移除一对映射关系。\n注意：根据映射关系的键查找所关联的值时，对键使用的是全等比较，即区分数据类型。\n@param src 映射关系的键，可以是任何类型。\n@example\n            var obj = { a: 1, b: 2 };\n            var fn = function(a, b) {\n                console.log(a+b);\n            };\n            \n            var mapper = new $.Mapper();\n            mapper.set(obj, fn);\n            \n            mapper.remove(obj);\n            fn = mapper.get(obj);\n            console.log( typeof fn); // undefined\n        ", "meta": "", "tags": [{ "title": "desc", "desc": "根据给定的键移除一对映射关系。\n注意：根据映射关系的键查找所关联的值时，对键使用的是全等比较，即区分数据类型。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "映射关系的键，可以是任何类型。", "type": "", "name": "src", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n            var obj = { a: 1, b: 2 };\n            var fn = function(a, b) {\n                console.log(a+b);\n            };\n            \n            var mapper = new $.Mapper();\n            mapper.set(obj, fn);\n            \n            mapper.remove(obj);\n            fn = mapper.get(obj);\n            console.log( typeof fn); // undefined", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Mapper", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Mapper.js", "exceptions": [], "isa": "FUNCTION", "_name": "remove", "_params": [{ "title": "param", "desc": "映射关系的键，可以是任何类型。", "type": "", "name": "src", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n            var obj = { a: 1, b: 2 };\n            var fn = function(a, b) {\n                console.log(a+b);\n            };\n            \n            var mapper = new $.Mapper();\n            mapper.set(obj, fn);\n            \n            mapper.remove(obj);\n            fn = mapper.get(obj);\n            console.log( typeof fn); // undefined", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "remove", "params": [{ "title": "param", "desc": "映射关系的键，可以是任何类型。", "type": "", "name": "src", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "销毁本实例。\n这会移除所有的映射关系，并且移除本实例内部使用的存放映射关系的容器对象。", "alias": "MiniQuery.Mapper#dispose", "id": 1129, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc 销毁本实例。\n这会移除所有的映射关系，并且移除本实例内部使用的存放映射关系的容器对象。\n        "], "src": "\n@desc 销毁本实例。\n这会移除所有的映射关系，并且移除本实例内部使用的存放映射关系的容器对象。\n        ", "meta": "", "tags": [{ "title": "desc", "desc": "销毁本实例。\n这会移除所有的映射关系，并且移除本实例内部使用的存放映射关系的容器对象。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Mapper", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Mapper.js", "exceptions": [], "isa": "FUNCTION", "_name": "dispose", "_params": [], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "dispose", "params": [] }], "comment": { "tagTexts": ["desc 映射器工具类。\n实现任意类型的两个变量的关联。", "class", "param", "example\n    var mapper = new $.Mapper();\n"], "src": "\n@desc 映射器工具类。\n实现任意类型的两个变量的关联。\n@class\n@param\n@example\n    var mapper = new $.Mapper();\n", "meta": "", "tags": [{ "title": "desc", "desc": "映射器工具类。\n实现任意类型的两个变量的关联。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "class", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n    var mapper = new $.Mapper();", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Mapper.js", "exceptions": [], "isa": "CONSTRUCTOR", "_name": "Mapper", "_params": [{ "title": "param", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n    var mapper = new $.Mapper();", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "scopeType": "INSTANCE", "properties": [], "name": "Mapper", "params": [{ "title": "param", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": true, "augments": [], "fires": [], "desc": "数学工具类", "alias": "MiniQuery.Math", "id": 442, "isStatic": true, "see": [], "methods": [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "产生指定闭区间的随机整数。", "alias": "MiniQuery.Math.randomInt", "id": 444, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 产生指定闭区间的随机整数。", "param {number} [minValue=0] 闭区间的左端值。\n        当只指定一个参数时，minValue 默认为 0；", "param {number} [maxValue] 闭区间的右端值。", "return 返回一个整数。<br />\n        当不指定任何参数时，则用 Math.random() 产生一个已移除了小数点的随机整数。", "example\n        $.Math.randomInt(100, 200); //产生一个区间为 [100, 200] 的随机整数。\n        $.Math.randomInt(100); //产生一个区间为 [0, 200] 的随机整数。\n        $.Math.randomInt(); //产生一个随机整数。\n    "], "src": "\n@desc 产生指定闭区间的随机整数。\n@param {number} [minValue=0] 闭区间的左端值。\n        当只指定一个参数时，minValue 默认为 0；\n@param {number} [maxValue] 闭区间的右端值。\n@return 返回一个整数。<br />\n        当不指定任何参数时，则用 Math.random() 产生一个已移除了小数点的随机整数。\n@example\n        $.Math.randomInt(100, 200); //产生一个区间为 [100, 200] 的随机整数。\n        $.Math.randomInt(100); //产生一个区间为 [0, 200] 的随机整数。\n        $.Math.randomInt(); //产生一个随机整数。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "产生指定闭区间的随机整数。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "闭区间的左端值。\n        当只指定一个参数时，minValue 默认为 0；", "type": "number", "name": "minValue", "isOptional": true, "defaultValue": "0" }, { "title": "param", "desc": "闭区间的右端值。", "type": "number", "name": "maxValue", "isOptional": true, "defaultValue": "" }, { "title": "return", "desc": "返回一个整数。<br />\n        当不指定任何参数时，则用 Math.random() 产生一个已移除了小数点的随机整数。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Math.randomInt(100, 200); //产生一个区间为 [100, 200] 的随机整数。\n        $.Math.randomInt(100); //产生一个区间为 [0, 200] 的随机整数。\n        $.Math.randomInt(); //产生一个随机整数。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Math", "since": "", "returns": [{ "title": "return", "desc": "返回一个整数。<br />\n        当不指定任何参数时，则用 Math.random() 产生一个已移除了小数点的随机整数。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Math.js", "exceptions": [], "isa": "FUNCTION", "_name": "randomInt", "_params": [{ "title": "param", "desc": "闭区间的左端值。\n        当只指定一个参数时，minValue 默认为 0；", "type": "number", "name": "minValue", "isOptional": true, "defaultValue": "0" }, { "title": "param", "desc": "闭区间的右端值。", "type": "number", "name": "maxValue", "isOptional": true, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Math.randomInt(100, 200); //产生一个区间为 [100, 200] 的随机整数。\n        $.Math.randomInt(100); //产生一个区间为 [0, 200] 的随机整数。\n        $.Math.randomInt(); //产生一个随机整数。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "randomInt", "params": [{ "title": "param", "desc": "闭区间的左端值。\n        当只指定一个参数时，minValue 默认为 0；", "type": "number", "name": "minValue", "isOptional": true, "defaultValue": "0" }, { "title": "param", "desc": "闭区间的右端值。", "type": "number", "name": "maxValue", "isOptional": true, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "圆形求模方法。\n即用圆形链表的方式滑动一个数，返回一个新的数。\n即可正可负的双方向求模。\n可指定圆形链表的长度(size) 和滑动的步长(step)，滑动步长的正负号指示了滑动方向", "alias": "MiniQuery.Math.slide", "id": 448, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 圆形求模方法。\n即用圆形链表的方式滑动一个数，返回一个新的数。\n即可正可负的双方向求模。\n可指定圆形链表的长度(size) 和滑动的步长(step)，滑动步长的正负号指示了滑动方向\n    "], "src": "\n@desc 圆形求模方法。\n即用圆形链表的方式滑动一个数，返回一个新的数。\n即可正可负的双方向求模。\n可指定圆形链表的长度(size) 和滑动的步长(step)，滑动步长的正负号指示了滑动方向\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "圆形求模方法。\n即用圆形链表的方式滑动一个数，返回一个新的数。\n即可正可负的双方向求模。\n可指定圆形链表的长度(size) 和滑动的步长(step)，滑动步长的正负号指示了滑动方向", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Math", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Math.js", "exceptions": [], "isa": "FUNCTION", "_name": "slide", "_params": [{ "title": "param", "desc": "", "type": "", "name": "index", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "size", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "step", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "slide", "params": [{ "title": "param", "desc": "", "type": "", "name": "index", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "size", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "step", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "下一个求模数", "alias": "MiniQuery.Math.next", "id": 450, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 下一个求模数\n    "], "src": "\n@desc 下一个求模数\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "下一个求模数", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Math", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Math.js", "exceptions": [], "isa": "FUNCTION", "_name": "next", "_params": [{ "title": "param", "desc": "", "type": "", "name": "index", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "size", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "next", "params": [{ "title": "param", "desc": "", "type": "", "name": "index", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "size", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "上一个求模数", "alias": "MiniQuery.Math.previous", "id": 451, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 上一个求模数\n    "], "src": "\n@desc 上一个求模数\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "上一个求模数", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Math", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Math.js", "exceptions": [], "isa": "FUNCTION", "_name": "previous", "_params": [{ "title": "param", "desc": "", "type": "", "name": "index", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "size", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "step", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "previous", "params": [{ "title": "param", "desc": "", "type": "", "name": "index", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "size", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "step", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把一个字符串解析成十进制的整型", "alias": "MiniQuery.Math.parseInt", "id": 452, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 把一个字符串解析成十进制的整型\n    "], "src": "\n@desc 把一个字符串解析成十进制的整型\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把一个字符串解析成十进制的整型", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Math", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Math.js", "exceptions": [], "isa": "FUNCTION", "_name": "parseInt", "_params": [{ "title": "param", "desc": "", "type": "", "name": "string", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "parseInt", "params": [{ "title": "param", "desc": "", "type": "", "name": "string", "isOptional": false, "defaultValue": "" }] }, { "type": "Number", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把一个含有百分号的字符串解析成等值的小数。", "alias": "MiniQuery.Math.parsePercent", "id": 453, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 把一个含有百分号的字符串解析成等值的小数。", "param {string} v 要解析的参数。\n        期望得到 string 类型，实际可传任何类型。", "return {Number} 返回一个小数。\n        只有参数是字符串，并且去掉前后空格后以百分号结尾才会进行转换；否则直接返回参数。\n        如果解析失败，则返回 NaN。\n    "], "src": "\n@desc 把一个含有百分号的字符串解析成等值的小数。\n@param {string} v 要解析的参数。\n        期望得到 string 类型，实际可传任何类型。\n@return {Number} 返回一个小数。\n        只有参数是字符串，并且去掉前后空格后以百分号结尾才会进行转换；否则直接返回参数。\n        如果解析失败，则返回 NaN。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把一个含有百分号的字符串解析成等值的小数。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要解析的参数。\n        期望得到 string 类型，实际可传任何类型。", "type": "string", "name": "v", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个小数。\n        只有参数是字符串，并且去掉前后空格后以百分号结尾才会进行转换；否则直接返回参数。\n        如果解析失败，则返回 NaN。", "type": "Number", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Math", "since": "", "returns": [{ "title": "return", "desc": "返回一个小数。\n        只有参数是字符串，并且去掉前后空格后以百分号结尾才会进行转换；否则直接返回参数。\n        如果解析失败，则返回 NaN。", "type": "Number", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Math.js", "exceptions": [], "isa": "FUNCTION", "_name": "parsePercent", "_params": [{ "title": "param", "desc": "要解析的参数。\n        期望得到 string 类型，实际可传任何类型。", "type": "string", "name": "v", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "parsePercent", "params": [{ "title": "param", "desc": "要解析的参数。\n        期望得到 string 类型，实际可传任何类型。", "type": "string", "name": "v", "isOptional": false, "defaultValue": "" }] }], "comment": { "tagTexts": ["desc 数学工具类", "namespace\n"], "src": "\n@desc 数学工具类\n@namespace\n", "meta": "", "tags": [{ "title": "desc", "desc": "数学工具类", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "namespace", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Math.js", "exceptions": [], "isa": "OBJECT", "_name": "Math", "_params": [{ "title": "param", "desc": "", "type": "", "name": "$", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "This", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "scopeType": "INSTANCE", "properties": [], "name": "Math", "params": [{ "title": "param", "desc": "", "type": "", "name": "$", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "This", "isOptional": false, "defaultValue": "" }] }, { "type": "MiniQuery.Object", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "对象工具", "alias": "MiniQuery.Object", "id": 476, "isStatic": true, "see": [], "methods": [{ "type": "Object", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "用一个或多个其他对象来扩展一个对象，返回被扩展的对象。", "alias": "MiniQuery.Object.extend", "id": 479, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 用一个或多个其他对象来扩展一个对象，返回被扩展的对象。", "function", "param {Object} arguments[0] 要进行扩展的对象 ", "param {Object} arguments[1] 要进行复制的第1个对象", "param {Object} arguments[n] 要进行复制的第n个对象，依次类推", "return {Object} 返回被扩展的对象，即第一个参数。\n        如果参数为空，则返回 {}。\n        如果只有一个参数，则直接返回该参数。\n        否则：把第二个参数到最后一个参数的成员拷贝到第一个参数对应中去，并返回第一个参数。", "example \n        var obj = {\n            a: 1, \n            b: 2\n        };\n        var obj2 = $.Object.extend(obj, {b:3}, {c:4});\n        //结果：\n        obj = {a:1, b:3, c:4}; \n        //并且 \n        obj === obj2 //为 true\n    "], "src": "\n@desc 用一个或多个其他对象来扩展一个对象，返回被扩展的对象。\n@function\n@param {Object} arguments[0] 要进行扩展的对象 \n@param {Object} arguments[1] 要进行复制的第1个对象\n@param {Object} arguments[n] 要进行复制的第n个对象，依次类推\n@return {Object} 返回被扩展的对象，即第一个参数。\n        如果参数为空，则返回 {}。\n        如果只有一个参数，则直接返回该参数。\n        否则：把第二个参数到最后一个参数的成员拷贝到第一个参数对应中去，并返回第一个参数。\n@example \n        var obj = {\n            a: 1, \n            b: 2\n        };\n        var obj2 = $.Object.extend(obj, {b:3}, {c:4});\n        //结果：\n        obj = {a:1, b:3, c:4}; \n        //并且 \n        obj === obj2 //为 true\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "用一个或多个其他对象来扩展一个对象，返回被扩展的对象。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "function", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行扩展的对象", "type": "Object", "name": "arguments[0]", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行复制的第1个对象", "type": "Object", "name": "arguments[1]", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行复制的第n个对象，依次类推", "type": "Object", "name": "arguments[n]", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回被扩展的对象，即第一个参数。\n        如果参数为空，则返回 {}。\n        如果只有一个参数，则直接返回该参数。\n        否则：把第二个参数到最后一个参数的成员拷贝到第一个参数对应中去，并返回第一个参数。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var obj = {\n            a: 1, \n            b: 2\n        };\n        var obj2 = $.Object.extend(obj, {b:3}, {c:4});\n        //结果：\n        obj = {a:1, b:3, c:4}; \n        //并且 \n        obj === obj2 //为 true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "返回被扩展的对象，即第一个参数。\n        如果参数为空，则返回 {}。\n        如果只有一个参数，则直接返回该参数。\n        否则：把第二个参数到最后一个参数的成员拷贝到第一个参数对应中去，并返回第一个参数。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "extend", "_params": [{ "title": "param", "desc": "要进行扩展的对象", "type": "Object", "name": "arguments[0]", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行复制的第1个对象", "type": "Object", "name": "arguments[1]", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行复制的第n个对象，依次类推", "type": "Object", "name": "arguments[n]", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var obj = {\n            a: 1, \n            b: 2\n        };\n        var obj2 = $.Object.extend(obj, {b:3}, {c:4});\n        //结果：\n        obj = {a:1, b:3, c:4}; \n        //并且 \n        obj === obj2 //为 true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "extend", "params": [{ "title": "param", "desc": "要进行扩展的对象", "type": "Object", "name": "arguments[0]", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行复制的第1个对象", "type": "Object", "name": "arguments[1]", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行复制的第n个对象，依次类推", "type": "Object", "name": "arguments[n]", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "用一种安全的方式来扩展对象。\n当目标对象不存在指定的成员时，才给该目标对象添加(扩展)该成员。", "alias": "MiniQuery.Object.extendSafely", "id": 480, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 用一种安全的方式来扩展对象。\n当目标对象不存在指定的成员时，才给该目标对象添加(扩展)该成员。\n    "], "src": "\n@desc 用一种安全的方式来扩展对象。\n当目标对象不存在指定的成员时，才给该目标对象添加(扩展)该成员。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "用一种安全的方式来扩展对象。\n当目标对象不存在指定的成员时，才给该目标对象添加(扩展)该成员。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "extendSafely", "_params": [], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "extendSafely", "params": [] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "用多个对象深度扩展一个对象。", "alias": "MiniQuery.Object.extendDeeply", "id": 485, "isStatic": true, "see": [], "methods": [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.Object.extendDeeply-fn", "id": 486, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.Object.extendDeeply", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "fn", "_params": [{ "title": "param", "desc": "", "type": "", "name": "A", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "B", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "fn", "params": [{ "title": "param", "desc": "", "type": "", "name": "A", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "B", "isOptional": false, "defaultValue": "" }] }], "comment": { "tagTexts": ["desc 用多个对象深度扩展一个对象。\n    "], "src": "\n@desc 用多个对象深度扩展一个对象。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "用多个对象深度扩展一个对象。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "extendDeeply", "_params": [{ "title": "param", "desc": "", "type": "", "name": "target", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "obj1", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "obj2", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "extendDeeply", "params": [{ "title": "param", "desc": "", "type": "", "name": "target", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "obj1", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "obj2", "isOptional": false, "defaultValue": "" }] }, { "type": "Object|Array", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "深度克隆一个纯对象或数组。", "alias": "MiniQuery.Object.clone", "id": 497, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 深度克隆一个纯对象或数组。", "param {Object|Array} obj 要进行克隆的对象或数组。\n        如果 obj 是数组，则返回一个拷贝数组，并且会对数组中的每项调用 clone 。\n        如果 obj 不是纯对象，则直接返回该对象，不进行克隆。", "return {Object|Array} 克隆后的对象或数组。", "example\n        var obj = {a: 1, b: 2, c: {a: 10, b: 20} };\n        var obj2 = $.Object.clone( obj );\n        console.dir( obj2 );          //与 obj 一致\n        console.log( obj2 === obj );  //false\n    "], "src": "\n@desc 深度克隆一个纯对象或数组。\n@param {Object|Array} obj 要进行克隆的对象或数组。\n        如果 obj 是数组，则返回一个拷贝数组，并且会对数组中的每项调用 clone 。\n        如果 obj 不是纯对象，则直接返回该对象，不进行克隆。\n@return {Object|Array} 克隆后的对象或数组。\n@example\n        var obj = {a: 1, b: 2, c: {a: 10, b: 20} };\n        var obj2 = $.Object.clone( obj );\n        console.dir( obj2 );          //与 obj 一致\n        console.log( obj2 === obj );  //false\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "深度克隆一个纯对象或数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行克隆的对象或数组。\n        如果 obj 是数组，则返回一个拷贝数组，并且会对数组中的每项调用 clone 。\n        如果 obj 不是纯对象，则直接返回该对象，不进行克隆。", "type": "Object|Array", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "克隆后的对象或数组。", "type": "Object|Array", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var obj = {a: 1, b: 2, c: {a: 10, b: 20} };\n        var obj2 = $.Object.clone( obj );\n        console.dir( obj2 );          //与 obj 一致\n        console.log( obj2 === obj );  //false", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "克隆后的对象或数组。", "type": "Object|Array", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "clone", "_params": [{ "title": "param", "desc": "要进行克隆的对象或数组。\n        如果 obj 是数组，则返回一个拷贝数组，并且会对数组中的每项调用 clone 。\n        如果 obj 不是纯对象，则直接返回该对象，不进行克隆。", "type": "Object|Array", "name": "obj", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var obj = {a: 1, b: 2, c: {a: 10, b: 20} };\n        var obj2 = $.Object.clone( obj );\n        console.dir( obj2 );          //与 obj 一致\n        console.log( obj2 === obj );  //false", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "clone", "params": [{ "title": "param", "desc": "要进行克隆的对象或数组。\n        如果 obj 是数组，则返回一个拷贝数组，并且会对数组中的每项调用 clone 。\n        如果 obj 不是纯对象，则直接返回该对象，不进行克隆。", "type": "Object|Array", "name": "obj", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "对一个对象进行迭代。\n该方法可以代替 for in 的语句。\n只有在回调函数中明确返回 false 才停止循环。", "alias": "MiniQuery.Object.each", "id": 503, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 对一个对象进行迭代。\n该方法可以代替 for in 的语句。\n只有在回调函数中明确返回 false 才停止循环。", "param {Object} obj 要进行迭代处理的对象", "param {function} fn 要进行迭代处理的回调函数，该函数中会接收到当前对象迭代的到 key 和 value 作为参数", "param {boolean} [isDeep=false] \n        指示是否要进行深层次的迭代，如果是，请指定 true；\n        否则请指定 false 或不指定。默认为 false，即浅迭代", "example\n        var obj = {a: 1, b: 2, c: {A: 11, B: 22} };\n        $.Object.each(obj, function(key, value) {\n            console.log(key, ': ', value);\n        }, true);\n    输出：\n        a: 1,\n        b: 2,\n        A: 11,\n        B: 22\n    "], "src": "\n@desc 对一个对象进行迭代。\n该方法可以代替 for in 的语句。\n只有在回调函数中明确返回 false 才停止循环。\n@param {Object} obj 要进行迭代处理的对象\n@param {function} fn 要进行迭代处理的回调函数，该函数中会接收到当前对象迭代的到 key 和 value 作为参数\n@param {boolean} [isDeep=false] \n        指示是否要进行深层次的迭代，如果是，请指定 true；\n        否则请指定 false 或不指定。默认为 false，即浅迭代\n@example\n        var obj = {a: 1, b: 2, c: {A: 11, B: 22} };\n        $.Object.each(obj, function(key, value) {\n            console.log(key, ': ', value);\n        }, true);\n    输出：\n        a: 1,\n        b: 2,\n        A: 11,\n        B: 22\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "对一个对象进行迭代。\n该方法可以代替 for in 的语句。\n只有在回调函数中明确返回 false 才停止循环。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行迭代处理的对象", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行迭代处理的回调函数，该函数中会接收到当前对象迭代的到 key 和 value 作为参数", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否要进行深层次的迭代，如果是，请指定 true；\n        否则请指定 false 或不指定。默认为 false，即浅迭代", "type": "boolean", "name": "isDeep", "isOptional": true, "defaultValue": "false" }, { "title": "example", "desc": "\n        var obj = {a: 1, b: 2, c: {A: 11, B: 22} };\n        $.Object.each(obj, function(key, value) {\n            console.log(key, ': ', value);\n        }, true);\n    输出：\n        a: 1,\n        b: 2,\n        A: 11,\n        B: 22", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "each", "_params": [{ "title": "param", "desc": "要进行迭代处理的对象", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行迭代处理的回调函数，该函数中会接收到当前对象迭代的到 key 和 value 作为参数", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否要进行深层次的迭代，如果是，请指定 true；\n        否则请指定 false 或不指定。默认为 false，即浅迭代", "type": "boolean", "name": "isDeep", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var obj = {a: 1, b: 2, c: {A: 11, B: 22} };\n        $.Object.each(obj, function(key, value) {\n            console.log(key, ': ', value);\n        }, true);\n    输出：\n        a: 1,\n        b: 2,\n        A: 11,\n        B: 22", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "each", "params": [{ "title": "param", "desc": "要进行迭代处理的对象", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行迭代处理的回调函数，该函数中会接收到当前对象迭代的到 key 和 value 作为参数", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否要进行深层次的迭代，如果是，请指定 true；\n        否则请指定 false 或不指定。默认为 false，即浅迭代", "type": "boolean", "name": "isDeep", "isOptional": true, "defaultValue": "false" }] }, { "type": "String", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "获取一个对象的真实类型的字符串描述。", "alias": "MiniQuery.Object.getType", "id": 506, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 获取一个对象的真实类型的字符串描述。", "param obj 要检测的对象，可以是任何类型。", "return {String} 返回该对象的类型的字符串描述。\n        当参数为 null、undefined 时，返回 null、undefined；<br />\n        当参数为 string、number、boolean 的值类型时，返回 string、number、boolean；<br />\n        否则返回参数的实际类型的字符串描述(构造函数的名称)：<br />\n        如 Array、String、Number、Boolean、Object、Function、RegExp、Date 等", "example\n        $.Object.getType();         //'undefined'\n        $.Object.getType(null);     //'null'\n        $.Object.getType('hello');  //'string'\n        $.Object.getType(100);      //'number'\n        $.Object.getType(false);    //'boolean'\n        $.Object.getType({});       //'Object'\n        $.Object.getType(function(){});//'Function'\n        $.Object.getType([0, 1, 2]);   //'Array'\n    "], "src": "\n@desc 获取一个对象的真实类型的字符串描述。\n@param obj 要检测的对象，可以是任何类型。\n@return {String} 返回该对象的类型的字符串描述。\n        当参数为 null、undefined 时，返回 null、undefined；<br />\n        当参数为 string、number、boolean 的值类型时，返回 string、number、boolean；<br />\n        否则返回参数的实际类型的字符串描述(构造函数的名称)：<br />\n        如 Array、String、Number、Boolean、Object、Function、RegExp、Date 等\n@example\n        $.Object.getType();         //'undefined'\n        $.Object.getType(null);     //'null'\n        $.Object.getType('hello');  //'string'\n        $.Object.getType(100);      //'number'\n        $.Object.getType(false);    //'boolean'\n        $.Object.getType({});       //'Object'\n        $.Object.getType(function(){});//'Function'\n        $.Object.getType([0, 1, 2]);   //'Array'\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "获取一个对象的真实类型的字符串描述。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要检测的对象，可以是任何类型。", "type": "", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回该对象的类型的字符串描述。\n        当参数为 null、undefined 时，返回 null、undefined；<br />\n        当参数为 string、number、boolean 的值类型时，返回 string、number、boolean；<br />\n        否则返回参数的实际类型的字符串描述(构造函数的名称)：<br />\n        如 Array、String、Number、Boolean、Object、Function、RegExp、Date 等", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Object.getType();         //'undefined'\n        $.Object.getType(null);     //'null'\n        $.Object.getType('hello');  //'string'\n        $.Object.getType(100);      //'number'\n        $.Object.getType(false);    //'boolean'\n        $.Object.getType({});       //'Object'\n        $.Object.getType(function(){});//'Function'\n        $.Object.getType([0, 1, 2]);   //'Array'", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "返回该对象的类型的字符串描述。\n        当参数为 null、undefined 时，返回 null、undefined；<br />\n        当参数为 string、number、boolean 的值类型时，返回 string、number、boolean；<br />\n        否则返回参数的实际类型的字符串描述(构造函数的名称)：<br />\n        如 Array、String、Number、Boolean、Object、Function、RegExp、Date 等", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "getType", "_params": [{ "title": "param", "desc": "要检测的对象，可以是任何类型。", "type": "", "name": "obj", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Object.getType();         //'undefined'\n        $.Object.getType(null);     //'null'\n        $.Object.getType('hello');  //'string'\n        $.Object.getType(100);      //'number'\n        $.Object.getType(false);    //'boolean'\n        $.Object.getType({});       //'Object'\n        $.Object.getType(function(){});//'Function'\n        $.Object.getType([0, 1, 2]);   //'Array'", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "getType", "params": [{ "title": "param", "desc": "要检测的对象，可以是任何类型。", "type": "", "name": "obj", "isOptional": false, "defaultValue": "" }] }, { "type": "boolean", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "判断一个对象是否为数组类型。<br />\n注意：如果是跨窗口取得的数组，请使用非严格判断。<br />\n由于 IE 的兼容性问题，对于跨窗口取得的数组，请在使用其实例方法之前把它转成真正的数组，否则会报错。", "alias": "MiniQuery.Object.isArray", "id": 507, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 判断一个对象是否为数组类型。<br />\n注意：如果是跨窗口取得的数组，请使用非严格判断。<br />\n由于 IE 的兼容性问题，对于跨窗口取得的数组，请在使用其实例方法之前把它转成真正的数组，否则会报错。", "param {Object} obj 要进行判断的对象，可以是任何类型", "param {boolean} [useStrict] 指定是否要进行严格判断，如果是请传入 true；否则当成非严格判断", "return {boolean} 一个判断结果，如果为数组则返回 true；否则返回 false", "example\n        $.Object.isArray([]) //true\n        $.Object.isArray({}) //false\n    "], "src": "\n@desc 判断一个对象是否为数组类型。<br />\n注意：如果是跨窗口取得的数组，请使用非严格判断。<br />\n由于 IE 的兼容性问题，对于跨窗口取得的数组，请在使用其实例方法之前把它转成真正的数组，否则会报错。\n@param {Object} obj 要进行判断的对象，可以是任何类型\n@param {boolean} [useStrict] 指定是否要进行严格判断，如果是请传入 true；否则当成非严格判断\n@return {boolean} 一个判断结果，如果为数组则返回 true；否则返回 false\n@example\n        $.Object.isArray([]) //true\n        $.Object.isArray({}) //false\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "判断一个对象是否为数组类型。<br />\n注意：如果是跨窗口取得的数组，请使用非严格判断。<br />\n由于 IE 的兼容性问题，对于跨窗口取得的数组，请在使用其实例方法之前把它转成真正的数组，否则会报错。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行判断的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指定是否要进行严格判断，如果是请传入 true；否则当成非严格判断", "type": "boolean", "name": "useStrict", "isOptional": true, "defaultValue": "" }, { "title": "return", "desc": "一个判断结果，如果为数组则返回 true；否则返回 false", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Object.isArray([]) //true\n        $.Object.isArray({}) //false", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "一个判断结果，如果为数组则返回 true；否则返回 false", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "isArray", "_params": [{ "title": "param", "desc": "要进行判断的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指定是否要进行严格判断，如果是请传入 true；否则当成非严格判断", "type": "boolean", "name": "useStrict", "isOptional": true, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Object.isArray([]) //true\n        $.Object.isArray({}) //false", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "isArray", "params": [{ "title": "param", "desc": "要进行判断的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指定是否要进行严格判断，如果是请传入 true；否则当成非严格判断", "type": "boolean", "name": "useStrict", "isOptional": true, "defaultValue": "" }] }, { "type": "boolean", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "判断一个对象是否为字符串字类型。", "alias": "MiniQuery.Object.isString", "id": 508, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 判断一个对象是否为字符串字类型。", "param {Object} obj 要进行判断的对象，可以是任何类型。", "return {boolean} 一个判断结果，如果为字符串则返回 true；否则返回 false。", "example\n        $.Object.isString( new String(100) ) //false\n        $.Object.isString( '100' ) //true\n    "], "src": "\n@desc 判断一个对象是否为字符串字类型。\n@param {Object} obj 要进行判断的对象，可以是任何类型。\n@return {boolean} 一个判断结果，如果为字符串则返回 true；否则返回 false。\n@example\n        $.Object.isString( new String(100) ) //false\n        $.Object.isString( '100' ) //true\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "判断一个对象是否为字符串字类型。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行判断的对象，可以是任何类型。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "一个判断结果，如果为字符串则返回 true；否则返回 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Object.isString( new String(100) ) //false\n        $.Object.isString( '100' ) //true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "一个判断结果，如果为字符串则返回 true；否则返回 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "isString", "_params": [{ "title": "param", "desc": "要进行判断的对象，可以是任何类型。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Object.isString( new String(100) ) //false\n        $.Object.isString( '100' ) //true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "isString", "params": [{ "title": "param", "desc": "要进行判断的对象，可以是任何类型。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }] }, { "type": "boolean", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "判断一个对象是否为数字类型。", "alias": "MiniQuery.Object.isNumber", "id": 509, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 判断一个对象是否为数字类型。", "param {Object} obj 要进行判断的对象，可以是任何类型。", "return {boolean} 一个判断结果，如果为数字则返回 true；否则返回 false。", "example\n        $.Object.isNumber( new Number(100) ) //false\n        $.Object.isNumber( 100 ) //true\n    "], "src": "\n@desc 判断一个对象是否为数字类型。\n@param {Object} obj 要进行判断的对象，可以是任何类型。\n@return {boolean} 一个判断结果，如果为数字则返回 true；否则返回 false。\n@example\n        $.Object.isNumber( new Number(100) ) //false\n        $.Object.isNumber( 100 ) //true\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "判断一个对象是否为数字类型。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行判断的对象，可以是任何类型。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "一个判断结果，如果为数字则返回 true；否则返回 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Object.isNumber( new Number(100) ) //false\n        $.Object.isNumber( 100 ) //true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "一个判断结果，如果为数字则返回 true；否则返回 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "isNumber", "_params": [{ "title": "param", "desc": "要进行判断的对象，可以是任何类型。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Object.isNumber( new Number(100) ) //false\n        $.Object.isNumber( 100 ) //true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "isNumber", "params": [{ "title": "param", "desc": "要进行判断的对象，可以是任何类型。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }] }, { "type": "boolean", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "判断一个对象是否为函数类型。", "alias": "MiniQuery.Object.isFunction", "id": 510, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 判断一个对象是否为函数类型。", "param {Object} obj 要进行判断的对象，可以是任何类型。", "return {boolean} 一个判断结果，如果为函数则返回 true；否则返回 false。", "example\n        $.Object.isFunction([]) //false\n        $.Object.isFunction(function(){}) //true\n    "], "src": "\n@desc 判断一个对象是否为函数类型。\n@param {Object} obj 要进行判断的对象，可以是任何类型。\n@return {boolean} 一个判断结果，如果为函数则返回 true；否则返回 false。\n@example\n        $.Object.isFunction([]) //false\n        $.Object.isFunction(function(){}) //true\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "判断一个对象是否为函数类型。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行判断的对象，可以是任何类型。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "一个判断结果，如果为函数则返回 true；否则返回 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Object.isFunction([]) //false\n        $.Object.isFunction(function(){}) //true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "一个判断结果，如果为函数则返回 true；否则返回 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "isFunction", "_params": [{ "title": "param", "desc": "要进行判断的对象，可以是任何类型。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Object.isFunction([]) //false\n        $.Object.isFunction(function(){}) //true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "isFunction", "params": [{ "title": "param", "desc": "要进行判断的对象，可以是任何类型。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }] }, { "type": "boolean", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "判断一个对象是否为内置类型。<br />\n内置类型是指 String, Number, Boolean, Array, Date, RegExp, Function。", "alias": "MiniQuery.Object.isBuiltinType", "id": 511, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 判断一个对象是否为内置类型。<br />\n内置类型是指 String, Number, Boolean, Array, Date, RegExp, Function。", "param {Object} obj 要进行判断的对象，可以是任何类型", "return {boolean} 一个判断结果，如果为内置类型则返回 true；否则返回 false", "example\n        $.Object.isBuiltinType( 100 );   //false\n        $.Object.isBuiltinType( new Number(100) ); //true\n        $.Object.isBuiltinType( {} );    //false\n        $.Object.isBuiltinType( [] );    //true\n    "], "src": "\n@desc 判断一个对象是否为内置类型。<br />\n内置类型是指 String, Number, Boolean, Array, Date, RegExp, Function。\n@param {Object} obj 要进行判断的对象，可以是任何类型\n@return {boolean} 一个判断结果，如果为内置类型则返回 true；否则返回 false\n@example\n        $.Object.isBuiltinType( 100 );   //false\n        $.Object.isBuiltinType( new Number(100) ); //true\n        $.Object.isBuiltinType( {} );    //false\n        $.Object.isBuiltinType( [] );    //true\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "判断一个对象是否为内置类型。<br />\n内置类型是指 String, Number, Boolean, Array, Date, RegExp, Function。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行判断的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "一个判断结果，如果为内置类型则返回 true；否则返回 false", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Object.isBuiltinType( 100 );   //false\n        $.Object.isBuiltinType( new Number(100) ); //true\n        $.Object.isBuiltinType( {} );    //false\n        $.Object.isBuiltinType( [] );    //true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "一个判断结果，如果为内置类型则返回 true；否则返回 false", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "isBuiltinType", "_params": [{ "title": "param", "desc": "要进行判断的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Object.isBuiltinType( 100 );   //false\n        $.Object.isBuiltinType( new Number(100) ); //true\n        $.Object.isBuiltinType( {} );    //false\n        $.Object.isBuiltinType( [] );    //true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "isBuiltinType", "params": [{ "title": "param", "desc": "要进行判断的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }] }, { "type": "boolean", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "检测对象是否是空对象(不包含任何属性)。<br />\n该方法既检测对象本身的属性，也检测从原型继承的属性(因此没有使用 hasOwnProperty )。<br />\n该实现为 jQuery 的版本。", "alias": "MiniQuery.Object.isEmpty", "id": 515, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 检测对象是否是空对象(不包含任何属性)。<br />\n该方法既检测对象本身的属性，也检测从原型继承的属性(因此没有使用 hasOwnProperty )。<br />\n该实现为 jQuery 的版本。", "param {Object} obj 要进行检测的对象，可以是任何类型", "return {boolean} 一个检测结果，如果为空对象则返回 true；否则返回 false", "example\n        $.Object.isEmpty( {} );      //true\n        \n        function Person(){ }\n        Person.prototype.name = 'abc';\n        var p = new Person();\n        $.Object.isEmpty( p );   //false\n    "], "src": "\n@desc 检测对象是否是空对象(不包含任何属性)。<br />\n该方法既检测对象本身的属性，也检测从原型继承的属性(因此没有使用 hasOwnProperty )。<br />\n该实现为 jQuery 的版本。\n@param {Object} obj 要进行检测的对象，可以是任何类型\n@return {boolean} 一个检测结果，如果为空对象则返回 true；否则返回 false\n@example\n        $.Object.isEmpty( {} );      //true\n        \n        function Person(){ }\n        Person.prototype.name = 'abc';\n        var p = new Person();\n        $.Object.isEmpty( p );   //false\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "检测对象是否是空对象(不包含任何属性)。<br />\n该方法既检测对象本身的属性，也检测从原型继承的属性(因此没有使用 hasOwnProperty )。<br />\n该实现为 jQuery 的版本。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行检测的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "一个检测结果，如果为空对象则返回 true；否则返回 false", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Object.isEmpty( {} );      //true\n        \n        function Person(){ }\n        Person.prototype.name = 'abc';\n        var p = new Person();\n        $.Object.isEmpty( p );   //false", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "一个检测结果，如果为空对象则返回 true；否则返回 false", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "isEmpty", "_params": [{ "title": "param", "desc": "要进行检测的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Object.isEmpty( {} );      //true\n        \n        function Person(){ }\n        Person.prototype.name = 'abc';\n        var p = new Person();\n        $.Object.isEmpty( p );   //false", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "isEmpty", "params": [{ "title": "param", "desc": "要进行检测的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }] }, { "type": "boolean", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "检测一个对象是否是纯粹的对象（通过 \"{}\" 或者 \"new Object\" 创建的）。\n该实现为 jQuery 的版本。", "alias": "MiniQuery.Object.isPlain", "id": 516, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 检测一个对象是否是纯粹的对象（通过 \"{}\" 或者 \"new Object\" 创建的）。\n该实现为 jQuery 的版本。", "param {Object} obj 要进行检测的对象，可以是任何类型", "return {boolean} 一个检测结果，如果为纯粹的对象则返回 true；否则返回 false", "example\n        $.Object.isPlain( {} );             //true\n        $.Object.isPlain( {a: 1, b: {} } );  //true\n        \n        function Person(){ }\n        var p = new Person();\n        $.Object.isPlain( p );   //false\n    "], "src": "\n@desc 检测一个对象是否是纯粹的对象（通过 \"{}\" 或者 \"new Object\" 创建的）。\n该实现为 jQuery 的版本。\n@param {Object} obj 要进行检测的对象，可以是任何类型\n@return {boolean} 一个检测结果，如果为纯粹的对象则返回 true；否则返回 false\n@example\n        $.Object.isPlain( {} );             //true\n        $.Object.isPlain( {a: 1, b: {} } );  //true\n        \n        function Person(){ }\n        var p = new Person();\n        $.Object.isPlain( p );   //false\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "检测一个对象是否是纯粹的对象（通过 \"{}\" 或者 \"new Object\" 创建的）。\n该实现为 jQuery 的版本。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行检测的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "一个检测结果，如果为纯粹的对象则返回 true；否则返回 false", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Object.isPlain( {} );             //true\n        $.Object.isPlain( {a: 1, b: {} } );  //true\n        \n        function Person(){ }\n        var p = new Person();\n        $.Object.isPlain( p );   //false", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "一个检测结果，如果为纯粹的对象则返回 true；否则返回 false", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "isPlain", "_params": [{ "title": "param", "desc": "要进行检测的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Object.isPlain( {} );             //true\n        $.Object.isPlain( {a: 1, b: {} } );  //true\n        \n        function Person(){ }\n        var p = new Person();\n        $.Object.isPlain( p );   //false", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "isPlain", "params": [{ "title": "param", "desc": "要进行检测的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }] }, { "type": "boolean", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "判断一个对象是否为值类型。<br />\n即 typeof 的结果是否为 string、number、boolean 中的一个。", "alias": "MiniQuery.Object.isValueType", "id": 520, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 判断一个对象是否为值类型。<br />\n即 typeof 的结果是否为 string、number、boolean 中的一个。", "param {Object} obj 要进行检测的对象，可以是任何类型", "return {boolean} 一个检测结果，如果为 值类型则返回 true；否则返回 false", "example\n        $.Object.isValueType(100);              //true\n        $.Object.isValueType( new Number(100) );//false\n    "], "src": "\n@desc 判断一个对象是否为值类型。<br />\n即 typeof 的结果是否为 string、number、boolean 中的一个。\n@param {Object} obj 要进行检测的对象，可以是任何类型\n@return {boolean} 一个检测结果，如果为 值类型则返回 true；否则返回 false\n@example\n        $.Object.isValueType(100);              //true\n        $.Object.isValueType( new Number(100) );//false\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "判断一个对象是否为值类型。<br />\n即 typeof 的结果是否为 string、number、boolean 中的一个。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行检测的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "一个检测结果，如果为 值类型则返回 true；否则返回 false", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Object.isValueType(100);              //true\n        $.Object.isValueType( new Number(100) );//false", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "一个检测结果，如果为 值类型则返回 true；否则返回 false", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "isValueType", "_params": [{ "title": "param", "desc": "要进行检测的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Object.isValueType(100);              //true\n        $.Object.isValueType( new Number(100) );//false", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "isValueType", "params": [{ "title": "param", "desc": "要进行检测的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }] }, { "type": "boolean", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "判断一个对象是否为包装类型。<br />\n包装类型是指 String, Number, Boolean 的 new 的实例。", "alias": "MiniQuery.Object.isWrappedType", "id": 522, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 判断一个对象是否为包装类型。<br />\n包装类型是指 String, Number, Boolean 的 new 的实例。", "param {Object} obj 要进行检测的对象，可以是任何类型", "return {boolean} 一个检测结果，如果包装类型则返回 true；否则返回 false", "example\n        console.log( $.Object.isWrappedType(100) ); //false\n        console.log( $.Object.isWrappedType( new Number(100) ) );  //true\n        console.log( $.Object.isWrappedType('abc') );  //false\n        console.log( $.Object.isWrappedType( new String('abc') ) );  //true\n        console.log( $.Object.isWrappedType(true) );  //false\n        console.log( $.Object.isWrappedType( new Boolean(true) ) );  //true\n    "], "src": "\n@desc 判断一个对象是否为包装类型。<br />\n包装类型是指 String, Number, Boolean 的 new 的实例。\n@param {Object} obj 要进行检测的对象，可以是任何类型\n@return {boolean} 一个检测结果，如果包装类型则返回 true；否则返回 false\n@example\n        console.log( $.Object.isWrappedType(100) ); //false\n        console.log( $.Object.isWrappedType( new Number(100) ) );  //true\n        console.log( $.Object.isWrappedType('abc') );  //false\n        console.log( $.Object.isWrappedType( new String('abc') ) );  //true\n        console.log( $.Object.isWrappedType(true) );  //false\n        console.log( $.Object.isWrappedType( new Boolean(true) ) );  //true\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "判断一个对象是否为包装类型。<br />\n包装类型是指 String, Number, Boolean 的 new 的实例。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行检测的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "一个检测结果，如果包装类型则返回 true；否则返回 false", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        console.log( $.Object.isWrappedType(100) ); //false\n        console.log( $.Object.isWrappedType( new Number(100) ) );  //true\n        console.log( $.Object.isWrappedType('abc') );  //false\n        console.log( $.Object.isWrappedType( new String('abc') ) );  //true\n        console.log( $.Object.isWrappedType(true) );  //false\n        console.log( $.Object.isWrappedType( new Boolean(true) ) );  //true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "一个检测结果，如果包装类型则返回 true；否则返回 false", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "isWrappedType", "_params": [{ "title": "param", "desc": "要进行检测的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        console.log( $.Object.isWrappedType(100) ); //false\n        console.log( $.Object.isWrappedType( new Number(100) ) );  //true\n        console.log( $.Object.isWrappedType('abc') );  //false\n        console.log( $.Object.isWrappedType( new String('abc') ) );  //true\n        console.log( $.Object.isWrappedType(true) );  //false\n        console.log( $.Object.isWrappedType( new Boolean(true) ) );  //true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "isWrappedType", "params": [{ "title": "param", "desc": "要进行检测的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }] }, { "type": "boolean", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "判断一个对象是否为非空的对象。\n非空对象是指 typeof 结果为 object 或 function，并且不是 null。", "alias": "MiniQuery.Object.isNonNull", "id": 526, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 判断一个对象是否为非空的对象。\n非空对象是指 typeof 结果为 object 或 function，并且不是 null。", "param {Object} obj 要进行检测的对象，可以是任何类型", "return {boolean} 一个检测结果，如果是非空的对象则返回 true；否则返回 false。", "example\n        console.log( $.Object.isNonNull( null ) );  //false\n        console.log( $.Object.isNonNull( {} ) );  //true\n        console.log( $.Object.isNonNull(100) ); //false\n        console.log( $.Object.isNonNull( new Number(100) ) );  //true\n        console.log( $.Object.isNonNull('abc') );  //false\n        console.log( $.Object.isNonNull( new String('abc') ) );  //true\n        console.log( $.Object.isNonNull(true) );  //false\n        console.log( $.Object.isNonNull( new Boolean(true) ) );  //true\n    "], "src": "\n@desc 判断一个对象是否为非空的对象。\n非空对象是指 typeof 结果为 object 或 function，并且不是 null。\n@param {Object} obj 要进行检测的对象，可以是任何类型\n@return {boolean} 一个检测结果，如果是非空的对象则返回 true；否则返回 false。\n@example\n        console.log( $.Object.isNonNull( null ) );  //false\n        console.log( $.Object.isNonNull( {} ) );  //true\n        console.log( $.Object.isNonNull(100) ); //false\n        console.log( $.Object.isNonNull( new Number(100) ) );  //true\n        console.log( $.Object.isNonNull('abc') );  //false\n        console.log( $.Object.isNonNull( new String('abc') ) );  //true\n        console.log( $.Object.isNonNull(true) );  //false\n        console.log( $.Object.isNonNull( new Boolean(true) ) );  //true\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "判断一个对象是否为非空的对象。\n非空对象是指 typeof 结果为 object 或 function，并且不是 null。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行检测的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "一个检测结果，如果是非空的对象则返回 true；否则返回 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        console.log( $.Object.isNonNull( null ) );  //false\n        console.log( $.Object.isNonNull( {} ) );  //true\n        console.log( $.Object.isNonNull(100) ); //false\n        console.log( $.Object.isNonNull( new Number(100) ) );  //true\n        console.log( $.Object.isNonNull('abc') );  //false\n        console.log( $.Object.isNonNull( new String('abc') ) );  //true\n        console.log( $.Object.isNonNull(true) );  //false\n        console.log( $.Object.isNonNull( new Boolean(true) ) );  //true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "一个检测结果，如果是非空的对象则返回 true；否则返回 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "isNonNull", "_params": [{ "title": "param", "desc": "要进行检测的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        console.log( $.Object.isNonNull( null ) );  //false\n        console.log( $.Object.isNonNull( {} ) );  //true\n        console.log( $.Object.isNonNull(100) ); //false\n        console.log( $.Object.isNonNull( new Number(100) ) );  //true\n        console.log( $.Object.isNonNull('abc') );  //false\n        console.log( $.Object.isNonNull( new String('abc') ) );  //true\n        console.log( $.Object.isNonNull(true) );  //false\n        console.log( $.Object.isNonNull( new Boolean(true) ) );  //true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "isNonNull", "params": [{ "title": "param", "desc": "要进行检测的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }] }, { "type": "boolean", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "一个简单的方法来判断一个对象是否为 window 窗口。\n该实现为 jQuery 的版本。", "alias": "MiniQuery.Object.isWindow", "id": 528, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 一个简单的方法来判断一个对象是否为 window 窗口。\n该实现为 jQuery 的版本。", "param {Object} obj 要进行检测的对象，可以是任何类型", "return {boolean} 一个检测结果，如果为 window 窗口则返回 true；否则返回 false", "example\n        $.Object.isWindow( {} ); //false\n        $.Object.isWindow(top);  //true\n    "], "src": "\n@desc 一个简单的方法来判断一个对象是否为 window 窗口。\n该实现为 jQuery 的版本。\n@param {Object} obj 要进行检测的对象，可以是任何类型\n@return {boolean} 一个检测结果，如果为 window 窗口则返回 true；否则返回 false\n@example\n        $.Object.isWindow( {} ); //false\n        $.Object.isWindow(top);  //true\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "一个简单的方法来判断一个对象是否为 window 窗口。\n该实现为 jQuery 的版本。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行检测的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "一个检测结果，如果为 window 窗口则返回 true；否则返回 false", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Object.isWindow( {} ); //false\n        $.Object.isWindow(top);  //true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "一个检测结果，如果为 window 窗口则返回 true；否则返回 false", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "isWindow", "_params": [{ "title": "param", "desc": "要进行检测的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Object.isWindow( {} ); //false\n        $.Object.isWindow(top);  //true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "isWindow", "params": [{ "title": "param", "desc": "要进行检测的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }] }, { "type": "boolean", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "一个简单的方法来判断一个对象是否为 document 对象。", "alias": "MiniQuery.Object.isDocument", "id": 529, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 一个简单的方法来判断一个对象是否为 document 对象。", "param {Object} obj 要进行检测的对象，可以是任何类型", "return {boolean} 一个检测结果，如果为  document 对象则返回 true；否则返回 false", "example\n        $.Object.isDocument( {} );      //false\n        $.Object.isDocument(document);  //true\n    "], "src": "\n@desc 一个简单的方法来判断一个对象是否为 document 对象。\n@param {Object} obj 要进行检测的对象，可以是任何类型\n@return {boolean} 一个检测结果，如果为  document 对象则返回 true；否则返回 false\n@example\n        $.Object.isDocument( {} );      //false\n        $.Object.isDocument(document);  //true\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "一个简单的方法来判断一个对象是否为 document 对象。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行检测的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "一个检测结果，如果为  document 对象则返回 true；否则返回 false", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Object.isDocument( {} );      //false\n        $.Object.isDocument(document);  //true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "一个检测结果，如果为  document 对象则返回 true；否则返回 false", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "isDocument", "_params": [{ "title": "param", "desc": "要进行检测的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Object.isDocument( {} );      //false\n        $.Object.isDocument(document);  //true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "isDocument", "params": [{ "title": "param", "desc": "要进行检测的对象，可以是任何类型", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }] }, { "type": "Object", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "对象映射转换器，返回一个新的对象。", "alias": "MiniQuery.Object.map", "id": 530, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 对象映射转换器，返回一个新的对象。", "param {Object} obj 要进行迭代处理的对象", "param {function} fn 要进行迭代处理的回调函数，该函数中会接收到当前对象迭代的到 key 和 value 作为参数", "param {boolean} [isDeep=false] 指示是否要进行深层次的迭代。\n        如果是，请指定 true；\n        否则请指定 false 或不指定。\n        默认为 false，即浅迭代", "return {Object} 返回一个新的对象，key 仍为原来的 key，value 由回调函数得到", "example\n        var obj = {a: 1, b: 2, c: {A: 11, B: 22} };\n        var obj2 = $.Object.map(obj, function(key, value) {\n            return value * 100;\n        }, true);\n        console.dir(obj2);\n    结果：\n        obj2 = {a: 100, b: 200, c: {A: 1100, B: 2200}};\n    "], "src": "\n@desc 对象映射转换器，返回一个新的对象。\n@param {Object} obj 要进行迭代处理的对象\n@param {function} fn 要进行迭代处理的回调函数，该函数中会接收到当前对象迭代的到 key 和 value 作为参数\n@param {boolean} [isDeep=false] 指示是否要进行深层次的迭代。\n        如果是，请指定 true；\n        否则请指定 false 或不指定。\n        默认为 false，即浅迭代\n@return {Object} 返回一个新的对象，key 仍为原来的 key，value 由回调函数得到\n@example\n        var obj = {a: 1, b: 2, c: {A: 11, B: 22} };\n        var obj2 = $.Object.map(obj, function(key, value) {\n            return value * 100;\n        }, true);\n        console.dir(obj2);\n    结果：\n        obj2 = {a: 100, b: 200, c: {A: 1100, B: 2200}};\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "对象映射转换器，返回一个新的对象。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行迭代处理的对象", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行迭代处理的回调函数，该函数中会接收到当前对象迭代的到 key 和 value 作为参数", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否要进行深层次的迭代。\n        如果是，请指定 true；\n        否则请指定 false 或不指定。\n        默认为 false，即浅迭代", "type": "boolean", "name": "isDeep", "isOptional": true, "defaultValue": "false" }, { "title": "return", "desc": "返回一个新的对象，key 仍为原来的 key，value 由回调函数得到", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var obj = {a: 1, b: 2, c: {A: 11, B: 22} };\n        var obj2 = $.Object.map(obj, function(key, value) {\n            return value * 100;\n        }, true);\n        console.dir(obj2);\n    结果：\n        obj2 = {a: 100, b: 200, c: {A: 1100, B: 2200}};", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "返回一个新的对象，key 仍为原来的 key，value 由回调函数得到", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "map", "_params": [{ "title": "param", "desc": "要进行迭代处理的对象", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行迭代处理的回调函数，该函数中会接收到当前对象迭代的到 key 和 value 作为参数", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否要进行深层次的迭代。\n        如果是，请指定 true；\n        否则请指定 false 或不指定。\n        默认为 false，即浅迭代", "type": "boolean", "name": "isDeep", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var obj = {a: 1, b: 2, c: {A: 11, B: 22} };\n        var obj2 = $.Object.map(obj, function(key, value) {\n            return value * 100;\n        }, true);\n        console.dir(obj2);\n    结果：\n        obj2 = {a: 100, b: 200, c: {A: 1100, B: 2200}};", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "map", "params": [{ "title": "param", "desc": "要进行迭代处理的对象", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行迭代处理的回调函数，该函数中会接收到当前对象迭代的到 key 和 value 作为参数", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否要进行深层次的迭代。\n        如果是，请指定 true；\n        否则请指定 false 或不指定。\n        默认为 false，即浅迭代", "type": "boolean", "name": "isDeep", "isOptional": true, "defaultValue": "false" }] }, { "type": "Object", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "给指定的对象快速创建多层次的命名空间，返回创建后的最内层的命名空间所指的对象。", "alias": "MiniQuery.Object.namespace", "id": 534, "isStatic": true, "see": [], "methods": [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.Object.namespace-fn", "id": 535, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.Object.namespace", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "fn", "_params": [{ "title": "param", "desc": "", "type": "", "name": "container", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "path", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "value", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "fn", "params": [{ "title": "param", "desc": "", "type": "", "name": "container", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "path", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "value", "isOptional": false, "defaultValue": "" }] }], "comment": { "tagTexts": ["desc 给指定的对象快速创建多层次的命名空间，返回创建后的最内层的命名空间所指的对象。", "param {Object} [arg0=global] \n        要在其上面创建命名空间的对象容器。当不指定时，则默认为当前的 global 对象。", "param {string} arg1 命名空间，以点号进行分隔", "param {Object} arg2 命名空间最终指向的对象", "return {Object} 返回创建后的最内层的命名空间所指的对象", "example\n        //给 obj 对象创建一个 A.B.C 的命名空间，其值为 {a:1, b:2}\n        $.Object.namespace(obj, 'A.B.C', {a:1, b:2});\n        console.dir( obj.A.B.C ); //结果为 {a:1, b:2}\n        \n        //给当前的 global 对象创建一个 A.B.C 的命名空间，其值为 {a:1, b:2}\n        $.Object.namespace('A.B.C', {a:1, b:2});\n        console.dir( A.B.C ); //结果为 {a:1, b:2}\n        \n        //给当前的 global 象分别创建一个 $.AA 和 $.BB 的命名空间，其值为分别 source.A 和 source.B\n        $.Object.namespace(source, {\n            'A': '$.AA', //source.AA -> $.A\n            'B': '$.BB'  //source.BB -> $.B\n        });\n        \n        //给 obj 对象分别创建 obj.A 和 obj.B 命名空间，其值分别为  source.A 和 source.B\n        $.Object.namespace(obj, source, ['A', 'B']);\n\n    "], "src": "\n@desc 给指定的对象快速创建多层次的命名空间，返回创建后的最内层的命名空间所指的对象。\n@param {Object} [arg0=global] \n        要在其上面创建命名空间的对象容器。当不指定时，则默认为当前的 global 对象。\n@param {string} arg1 命名空间，以点号进行分隔\n@param {Object} arg2 命名空间最终指向的对象\n@return {Object} 返回创建后的最内层的命名空间所指的对象\n@example\n        //给 obj 对象创建一个 A.B.C 的命名空间，其值为 {a:1, b:2}\n        $.Object.namespace(obj, 'A.B.C', {a:1, b:2});\n        console.dir( obj.A.B.C ); //结果为 {a:1, b:2}\n        \n        //给当前的 global 对象创建一个 A.B.C 的命名空间，其值为 {a:1, b:2}\n        $.Object.namespace('A.B.C', {a:1, b:2});\n        console.dir( A.B.C ); //结果为 {a:1, b:2}\n        \n        //给当前的 global 象分别创建一个 $.AA 和 $.BB 的命名空间，其值为分别 source.A 和 source.B\n        $.Object.namespace(source, {\n            'A': '$.AA', //source.AA -> $.A\n            'B': '$.BB'  //source.BB -> $.B\n        });\n        \n        //给 obj 对象分别创建 obj.A 和 obj.B 命名空间，其值分别为  source.A 和 source.B\n        $.Object.namespace(obj, source, ['A', 'B']);\n\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "给指定的对象快速创建多层次的命名空间，返回创建后的最内层的命名空间所指的对象。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要在其上面创建命名空间的对象容器。当不指定时，则默认为当前的 global 对象。", "type": "Object", "name": "arg0", "isOptional": true, "defaultValue": "global" }, { "title": "param", "desc": "命名空间，以点号进行分隔", "type": "string", "name": "arg1", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "命名空间最终指向的对象", "type": "Object", "name": "arg2", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回创建后的最内层的命名空间所指的对象", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        //给 obj 对象创建一个 A.B.C 的命名空间，其值为 {a:1, b:2}\n        $.Object.namespace(obj, 'A.B.C', {a:1, b:2});\n        console.dir( obj.A.B.C ); //结果为 {a:1, b:2}\n        \n        //给当前的 global 对象创建一个 A.B.C 的命名空间，其值为 {a:1, b:2}\n        $.Object.namespace('A.B.C', {a:1, b:2});\n        console.dir( A.B.C ); //结果为 {a:1, b:2}\n        \n        //给当前的 global 象分别创建一个 $.AA 和 $.BB 的命名空间，其值为分别 source.A 和 source.B\n        $.Object.namespace(source, {\n            'A': '$.AA', //source.AA -> $.A\n            'B': '$.BB'  //source.BB -> $.B\n        });\n        \n        //给 obj 对象分别创建 obj.A 和 obj.B 命名空间，其值分别为  source.A 和 source.B\n        $.Object.namespace(obj, source, ['A', 'B']);", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "返回创建后的最内层的命名空间所指的对象", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "namespace", "_params": [{ "title": "param", "desc": "要在其上面创建命名空间的对象容器。当不指定时，则默认为当前的 global 对象。", "type": "Object", "name": "arg0", "isOptional": true, "defaultValue": "global" }, { "title": "param", "desc": "命名空间，以点号进行分隔", "type": "string", "name": "arg1", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "命名空间最终指向的对象", "type": "Object", "name": "arg2", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        //给 obj 对象创建一个 A.B.C 的命名空间，其值为 {a:1, b:2}\n        $.Object.namespace(obj, 'A.B.C', {a:1, b:2});\n        console.dir( obj.A.B.C ); //结果为 {a:1, b:2}\n        \n        //给当前的 global 对象创建一个 A.B.C 的命名空间，其值为 {a:1, b:2}\n        $.Object.namespace('A.B.C', {a:1, b:2});\n        console.dir( A.B.C ); //结果为 {a:1, b:2}\n        \n        //给当前的 global 象分别创建一个 $.AA 和 $.BB 的命名空间，其值为分别 source.A 和 source.B\n        $.Object.namespace(source, {\n            'A': '$.AA', //source.AA -> $.A\n            'B': '$.BB'  //source.BB -> $.B\n        });\n        \n        //给 obj 对象分别创建 obj.A 和 obj.B 命名空间，其值分别为  source.A 和 source.B\n        $.Object.namespace(obj, source, ['A', 'B']);", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "namespace", "params": [{ "title": "param", "desc": "要在其上面创建命名空间的对象容器。当不指定时，则默认为当前的 global 对象。", "type": "Object", "name": "arg0", "isOptional": true, "defaultValue": "global" }, { "title": "param", "desc": "命名空间，以点号进行分隔", "type": "string", "name": "arg1", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "命名空间最终指向的对象", "type": "Object", "name": "arg2", "isOptional": false, "defaultValue": "" }] }, { "type": "Object", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把 JSON 字符串解析成一个 Object 对象。\n该方法是 jQuery 的实现。", "alias": "MiniQuery.Object.parseJson", "id": 559, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 把 JSON 字符串解析成一个 Object 对象。\n该方法是 jQuery 的实现。", "param {String} data 要进行解析的 JSON 字符串", "return {Object} 返回一个等价的对象\n    "], "src": "\n@desc 把 JSON 字符串解析成一个 Object 对象。\n该方法是 jQuery 的实现。\n@param {String} data 要进行解析的 JSON 字符串\n@return {Object} 返回一个等价的对象\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把 JSON 字符串解析成一个 Object 对象。\n该方法是 jQuery 的实现。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行解析的 JSON 字符串", "type": "String", "name": "data", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个等价的对象", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "返回一个等价的对象", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "parseJson", "_params": [{ "title": "param", "desc": "要进行解析的 JSON 字符串", "type": "String", "name": "data", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "parseJson", "params": [{ "title": "param", "desc": "要进行解析的 JSON 字符串", "type": "String", "name": "data", "isOptional": false, "defaultValue": "" }] }, { "type": "Object", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把 Url 中的查询字符串解析为等价结构的 Object 对象。", "alias": "MiniQuery.Object.parseQueryString", "id": 566, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 把 Url 中的查询字符串解析为等价结构的 Object 对象。", "param {string} url 要进行解析的查询字符串。", "param {boolean} [isShallow=false] 指示是否使用浅层次进行解析。\n        当显式指定 isShallow 参数为 true 时，则使用浅层次来解析(只解析一层，不进行递归解析)；\n        否则(默认)使用深层次解析。", "param {boolean} [isCompatible=false] 指示是否使用兼容模式进行解码。\n        当指定 isCompatible 参数为 true 时，将使用 unescape 来编码；\n        否则(默认)使用 decodeURIComponent。", "return {Object} 返回一个包含键值对的 Object 对象。\n        当参数 url 非法时，返回空对象 {}。", "example\n        var url = 'a=1&b=2&c=A%3D100%26B%3D200';\n        var obj = $.Object.parseQueryString(url);\n    得到 obj = {a: 1, b:2, c: {A: 100, B: 200}};\n    "], "src": "\n@desc 把 Url 中的查询字符串解析为等价结构的 Object 对象。\n@param {string} url 要进行解析的查询字符串。\n@param {boolean} [isShallow=false] 指示是否使用浅层次进行解析。\n        当显式指定 isShallow 参数为 true 时，则使用浅层次来解析(只解析一层，不进行递归解析)；\n        否则(默认)使用深层次解析。\n@param {boolean} [isCompatible=false] 指示是否使用兼容模式进行解码。\n        当指定 isCompatible 参数为 true 时，将使用 unescape 来编码；\n        否则(默认)使用 decodeURIComponent。\n@return {Object} 返回一个包含键值对的 Object 对象。\n        当参数 url 非法时，返回空对象 {}。\n@example\n        var url = 'a=1&b=2&c=A%3D100%26B%3D200';\n        var obj = $.Object.parseQueryString(url);\n    得到 obj = {a: 1, b:2, c: {A: 100, B: 200}};\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把 Url 中的查询字符串解析为等价结构的 Object 对象。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行解析的查询字符串。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否使用浅层次进行解析。\n        当显式指定 isShallow 参数为 true 时，则使用浅层次来解析(只解析一层，不进行递归解析)；\n        否则(默认)使用深层次解析。", "type": "boolean", "name": "isShallow", "isOptional": true, "defaultValue": "false" }, { "title": "param", "desc": "指示是否使用兼容模式进行解码。\n        当指定 isCompatible 参数为 true 时，将使用 unescape 来编码；\n        否则(默认)使用 decodeURIComponent。", "type": "boolean", "name": "isCompatible", "isOptional": true, "defaultValue": "false" }, { "title": "return", "desc": "返回一个包含键值对的 Object 对象。\n        当参数 url 非法时，返回空对象 {}。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var url = 'a=1&b=2&c=A%3D100%26B%3D200';\n        var obj = $.Object.parseQueryString(url);\n    得到 obj = {a: 1, b:2, c: {A: 100, B: 200}};", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "返回一个包含键值对的 Object 对象。\n        当参数 url 非法时，返回空对象 {}。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "parseQueryString", "_params": [{ "title": "param", "desc": "要进行解析的查询字符串。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否使用浅层次进行解析。\n        当显式指定 isShallow 参数为 true 时，则使用浅层次来解析(只解析一层，不进行递归解析)；\n        否则(默认)使用深层次解析。", "type": "boolean", "name": "isShallow", "isOptional": true, "defaultValue": "false" }, { "title": "param", "desc": "指示是否使用兼容模式进行解码。\n        当指定 isCompatible 参数为 true 时，将使用 unescape 来编码；\n        否则(默认)使用 decodeURIComponent。", "type": "boolean", "name": "isCompatible", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var url = 'a=1&b=2&c=A%3D100%26B%3D200';\n        var obj = $.Object.parseQueryString(url);\n    得到 obj = {a: 1, b:2, c: {A: 100, B: 200}};", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "parseQueryString", "params": [{ "title": "param", "desc": "要进行解析的查询字符串。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否使用浅层次进行解析。\n        当显式指定 isShallow 参数为 true 时，则使用浅层次来解析(只解析一层，不进行递归解析)；\n        否则(默认)使用深层次解析。", "type": "boolean", "name": "isShallow", "isOptional": true, "defaultValue": "false" }, { "title": "param", "desc": "指示是否使用兼容模式进行解码。\n        当指定 isCompatible 参数为 true 时，将使用 unescape 来编码；\n        否则(默认)使用 decodeURIComponent。", "type": "boolean", "name": "isCompatible", "isOptional": true, "defaultValue": "false" }] }, { "type": "Object", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "删除对象中指定的成员，返回一个新对象。\n指定的成员可以以单个的方式指定，也可以以数组的方式指定(批量)。", "alias": "MiniQuery.Object.remove", "id": 582, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 删除对象中指定的成员，返回一个新对象。\n指定的成员可以以单个的方式指定，也可以以数组的方式指定(批量)。", "param {Object} obj 要进行处理的对象。", "param {String|Array|Object} keys 要删除的成员名称，可以是单个，也可以是批量。", "return {Object} 返回一个被删除相应成员后的新对象。", "example\n        var obj = {\n            a: 1, \n            b: 2, \n            c: 3\n        };\n\n        var o = $.Object.remove(obj, ['a', 'c']); //移除成员 a 和 c \n        console.dir(o); //得到 o = { b: 2 };\n\n        o = $.Object.remove(obj, {a: 1, b: 2});\n        console.dir(o); //得到 o = { c: 3 };\n    "], "src": "\n@desc 删除对象中指定的成员，返回一个新对象。\n指定的成员可以以单个的方式指定，也可以以数组的方式指定(批量)。\n@param {Object} obj 要进行处理的对象。\n@param {String|Array|Object} keys 要删除的成员名称，可以是单个，也可以是批量。\n@return {Object} 返回一个被删除相应成员后的新对象。\n@example\n        var obj = {\n            a: 1, \n            b: 2, \n            c: 3\n        };\n\n        var o = $.Object.remove(obj, ['a', 'c']); //移除成员 a 和 c \n        console.dir(o); //得到 o = { b: 2 };\n\n        o = $.Object.remove(obj, {a: 1, b: 2});\n        console.dir(o); //得到 o = { c: 3 };\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "删除对象中指定的成员，返回一个新对象。\n指定的成员可以以单个的方式指定，也可以以数组的方式指定(批量)。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行处理的对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要删除的成员名称，可以是单个，也可以是批量。", "type": "String|Array|Object", "name": "keys", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个被删除相应成员后的新对象。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var obj = {\n            a: 1, \n            b: 2, \n            c: 3\n        };\n\n        var o = $.Object.remove(obj, ['a', 'c']); //移除成员 a 和 c \n        console.dir(o); //得到 o = { b: 2 };\n\n        o = $.Object.remove(obj, {a: 1, b: 2});\n        console.dir(o); //得到 o = { c: 3 };", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "返回一个被删除相应成员后的新对象。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "remove", "_params": [{ "title": "param", "desc": "要进行处理的对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要删除的成员名称，可以是单个，也可以是批量。", "type": "String|Array|Object", "name": "keys", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var obj = {\n            a: 1, \n            b: 2, \n            c: 3\n        };\n\n        var o = $.Object.remove(obj, ['a', 'c']); //移除成员 a 和 c \n        console.dir(o); //得到 o = { b: 2 };\n\n        o = $.Object.remove(obj, {a: 1, b: 2});\n        console.dir(o); //得到 o = { c: 3 };", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "remove", "params": [{ "title": "param", "desc": "要进行处理的对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要删除的成员名称，可以是单个，也可以是批量。", "type": "String|Array|Object", "name": "keys", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "用一组指定的名称-值对中的值去替换指定名称对应的值。\n当指定第三个参数为 true 时，将进行第一层次的搜索与替换，否则替换所有同名的成员为指定的值", "alias": "MiniQuery.Object.replaceValues", "id": 586, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 用一组指定的名称-值对中的值去替换指定名称对应的值。\n当指定第三个参数为 true 时，将进行第一层次的搜索与替换，否则替换所有同名的成员为指定的值\n    "], "src": "\n@desc 用一组指定的名称-值对中的值去替换指定名称对应的值。\n当指定第三个参数为 true 时，将进行第一层次的搜索与替换，否则替换所有同名的成员为指定的值\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "用一组指定的名称-值对中的值去替换指定名称对应的值。\n当指定第三个参数为 true 时，将进行第一层次的搜索与替换，否则替换所有同名的成员为指定的值", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "replaceValues", "_params": [{ "title": "param", "desc": "", "type": "", "name": "target", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "nameValues", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "isShallow", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "replaceValues", "params": [{ "title": "param", "desc": "", "type": "", "name": "target", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "nameValues", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "isShallow", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把一个 Object 对象转成一个数组。", "alias": "MiniQuery.Object.toArray", "id": 588, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 把一个 Object 对象转成一个数组。", "param {Object} obj 要进行转换的对象", "param {Array|boolean|function} [rule=undefined] 转换映射规则。<br />\n  当未指定参数 rule 时，则使用 for in 迭代收集 obj 中的值，返回一个一维的值数组；<br />\n  当指定参数 rule 为一个数组时，则按 rule 中的顺序迭代收集 obj 中的值，返回一个一维的值的数组；<br />\n  当指定参数 rule 为 true 时，则使用 for in 迭代收集 obj 中的名称和值，返回一个[key, value] 的二维数组，<br />\n      即该数组中的每一项的第0个元素为名称，第1个元素为值。<br />\n  当指定参数 rule 为一个处理函数时，将使用该处理函数的返回值作为收集到数组的值，<br />\n      处理函数会接收到两个参数：该对象迭代的 key 和 value。<br />\n      当返回值为 null 时，将忽略它（相当于 continue）；<br />\n      当返回值为 undefined 时，将停止迭代（相当于 break）；<br />", "param {boolean} [isDeep=false] 指定是否递归处理。\n        若要递归转换，请指定 true；否则请指定 false 或不指定", "return 返回一个数组", "example\n        var obj = { \n            a: 1, \n            b: 2, \n            c: {\n                A: 100, \n                B: 200, \n                C: {\n                    aa: 'a', \n                    bb: 'b'\n                } \n            } \n        };\n        \n        var a = $.Object.toArray(obj, null, true);\n        console.dir(a);\n        \n        var b = $.Object.toArray(obj, ['b', 'c', 'a']);\n        console.dir(b);\n        \n        var c = $.Object.toArray(obj, true, true);\n        console.dir(c);\n        \n        var d = $.Object.toArray(obj, function(key, value) {\n            return value + 1000;\n        }, true);\n        \n        console.dir(d);\n\n    "], "src": "\n@desc 把一个 Object 对象转成一个数组。\n@param {Object} obj 要进行转换的对象\n@param {Array|boolean|function} [rule=undefined] 转换映射规则。<br />\n  当未指定参数 rule 时，则使用 for in 迭代收集 obj 中的值，返回一个一维的值数组；<br />\n  当指定参数 rule 为一个数组时，则按 rule 中的顺序迭代收集 obj 中的值，返回一个一维的值的数组；<br />\n  当指定参数 rule 为 true 时，则使用 for in 迭代收集 obj 中的名称和值，返回一个[key, value] 的二维数组，<br />\n      即该数组中的每一项的第0个元素为名称，第1个元素为值。<br />\n  当指定参数 rule 为一个处理函数时，将使用该处理函数的返回值作为收集到数组的值，<br />\n      处理函数会接收到两个参数：该对象迭代的 key 和 value。<br />\n      当返回值为 null 时，将忽略它（相当于 continue）；<br />\n      当返回值为 undefined 时，将停止迭代（相当于 break）；<br />\n@param {boolean} [isDeep=false] 指定是否递归处理。\n        若要递归转换，请指定 true；否则请指定 false 或不指定\n@return 返回一个数组\n@example\n        var obj = { \n            a: 1, \n            b: 2, \n            c: {\n                A: 100, \n                B: 200, \n                C: {\n                    aa: 'a', \n                    bb: 'b'\n                } \n            } \n        };\n        \n        var a = $.Object.toArray(obj, null, true);\n        console.dir(a);\n        \n        var b = $.Object.toArray(obj, ['b', 'c', 'a']);\n        console.dir(b);\n        \n        var c = $.Object.toArray(obj, true, true);\n        console.dir(c);\n        \n        var d = $.Object.toArray(obj, function(key, value) {\n            return value + 1000;\n        }, true);\n        \n        console.dir(d);\n\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把一个 Object 对象转成一个数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行转换的对象", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "转换映射规则。<br />\n  当未指定参数 rule 时，则使用 for in 迭代收集 obj 中的值，返回一个一维的值数组；<br />\n  当指定参数 rule 为一个数组时，则按 rule 中的顺序迭代收集 obj 中的值，返回一个一维的值的数组；<br />\n  当指定参数 rule 为 true 时，则使用 for in 迭代收集 obj 中的名称和值，返回一个[key, value] 的二维数组，<br />\n      即该数组中的每一项的第0个元素为名称，第1个元素为值。<br />\n  当指定参数 rule 为一个处理函数时，将使用该处理函数的返回值作为收集到数组的值，<br />\n      处理函数会接收到两个参数：该对象迭代的 key 和 value。<br />\n      当返回值为 null 时，将忽略它（相当于 continue）；<br />\n      当返回值为 undefined 时，将停止迭代（相当于 break）；<br />", "type": "Array|boolean|function", "name": "rule", "isOptional": true, "defaultValue": "undefined" }, { "title": "param", "desc": "指定是否递归处理。\n        若要递归转换，请指定 true；否则请指定 false 或不指定", "type": "boolean", "name": "isDeep", "isOptional": true, "defaultValue": "false" }, { "title": "return", "desc": "返回一个数组", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var obj = { \n            a: 1, \n            b: 2, \n            c: {\n                A: 100, \n                B: 200, \n                C: {\n                    aa: 'a', \n                    bb: 'b'\n                } \n            } \n        };\n        \n        var a = $.Object.toArray(obj, null, true);\n        console.dir(a);\n        \n        var b = $.Object.toArray(obj, ['b', 'c', 'a']);\n        console.dir(b);\n        \n        var c = $.Object.toArray(obj, true, true);\n        console.dir(c);\n        \n        var d = $.Object.toArray(obj, function(key, value) {\n            return value + 1000;\n        }, true);\n        \n        console.dir(d);", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "返回一个数组", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "toArray", "_params": [{ "title": "param", "desc": "要进行转换的对象", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "转换映射规则。<br />\n  当未指定参数 rule 时，则使用 for in 迭代收集 obj 中的值，返回一个一维的值数组；<br />\n  当指定参数 rule 为一个数组时，则按 rule 中的顺序迭代收集 obj 中的值，返回一个一维的值的数组；<br />\n  当指定参数 rule 为 true 时，则使用 for in 迭代收集 obj 中的名称和值，返回一个[key, value] 的二维数组，<br />\n      即该数组中的每一项的第0个元素为名称，第1个元素为值。<br />\n  当指定参数 rule 为一个处理函数时，将使用该处理函数的返回值作为收集到数组的值，<br />\n      处理函数会接收到两个参数：该对象迭代的 key 和 value。<br />\n      当返回值为 null 时，将忽略它（相当于 continue）；<br />\n      当返回值为 undefined 时，将停止迭代（相当于 break）；<br />", "type": "Array|boolean|function", "name": "rule", "isOptional": true, "defaultValue": "undefined" }, { "title": "param", "desc": "指定是否递归处理。\n        若要递归转换，请指定 true；否则请指定 false 或不指定", "type": "boolean", "name": "isDeep", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var obj = { \n            a: 1, \n            b: 2, \n            c: {\n                A: 100, \n                B: 200, \n                C: {\n                    aa: 'a', \n                    bb: 'b'\n                } \n            } \n        };\n        \n        var a = $.Object.toArray(obj, null, true);\n        console.dir(a);\n        \n        var b = $.Object.toArray(obj, ['b', 'c', 'a']);\n        console.dir(b);\n        \n        var c = $.Object.toArray(obj, true, true);\n        console.dir(c);\n        \n        var d = $.Object.toArray(obj, function(key, value) {\n            return value + 1000;\n        }, true);\n        \n        console.dir(d);", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "toArray", "params": [{ "title": "param", "desc": "要进行转换的对象", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "转换映射规则。<br />\n  当未指定参数 rule 时，则使用 for in 迭代收集 obj 中的值，返回一个一维的值数组；<br />\n  当指定参数 rule 为一个数组时，则按 rule 中的顺序迭代收集 obj 中的值，返回一个一维的值的数组；<br />\n  当指定参数 rule 为 true 时，则使用 for in 迭代收集 obj 中的名称和值，返回一个[key, value] 的二维数组，<br />\n      即该数组中的每一项的第0个元素为名称，第1个元素为值。<br />\n  当指定参数 rule 为一个处理函数时，将使用该处理函数的返回值作为收集到数组的值，<br />\n      处理函数会接收到两个参数：该对象迭代的 key 和 value。<br />\n      当返回值为 null 时，将忽略它（相当于 continue）；<br />\n      当返回值为 undefined 时，将停止迭代（相当于 break）；<br />", "type": "Array|boolean|function", "name": "rule", "isOptional": true, "defaultValue": "undefined" }, { "title": "param", "desc": "指定是否递归处理。\n        若要递归转换，请指定 true；否则请指定 false 或不指定", "type": "boolean", "name": "isDeep", "isOptional": true, "defaultValue": "false" }] }, { "type": "String", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把一个对象转成 JSON 字符串", "alias": "MiniQuery.Object.toJson", "id": 603, "isStatic": true, "see": [], "methods": [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.Object.toJson-fn", "id": 604, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.Object.toJson", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "fn", "_params": [{ "title": "param", "desc": "", "type": "", "name": "obj", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "fn", "params": [{ "title": "param", "desc": "", "type": "", "name": "obj", "isOptional": false, "defaultValue": "" }] }], "comment": { "tagTexts": ["desc 把一个对象转成 JSON 字符串", "param {Object} obj 要进行转换的对象", "return {String} 返回一个 JSON 字符串\n    "], "src": "\n@desc 把一个对象转成 JSON 字符串\n@param {Object} obj 要进行转换的对象\n@return {String} 返回一个 JSON 字符串\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把一个对象转成 JSON 字符串", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行转换的对象", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个 JSON 字符串", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "返回一个 JSON 字符串", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "toJson", "_params": [{ "title": "param", "desc": "要进行转换的对象", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "toJson", "params": [{ "title": "param", "desc": "要进行转换的对象", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }] }, { "type": "string", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把一个对象编码成等价结构的 Url 查询字符串。", "alias": "MiniQuery.Object.toQueryString", "id": 610, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 把一个对象编码成等价结构的 Url 查询字符串。", "param {Object} obj 要进行编码的对象", "param {boolean} [isCompatible=false] \n        指定是否要使用兼容模式进行编码。<br />\n        当需要使用 escape 进行编码时，请指定 true；<br />\n        否则要使用 encodeURIComponent 进行编码，请指定 false 或不指定。", "return {string} 返回一个经过编码的 Url 查询字符串", "example\n        var obj = {\n            a: 1,\n            b: 2,\n            c: { A: 100, B: 200 },\n            d: null,\n            e: undefined,\n            f: ['a', 'b', 'c']\n        };\n        var s = $.Object.toQueryString(obj);\n        console.log(s); \n        //结果 a=1&b=2&c=A%3D100%26B%3D200&d=null&e=undefined&f=%5Ba%2C%20b%5D\n    "], "src": "\n@desc 把一个对象编码成等价结构的 Url 查询字符串。\n@param {Object} obj 要进行编码的对象\n@param {boolean} [isCompatible=false] \n        指定是否要使用兼容模式进行编码。<br />\n        当需要使用 escape 进行编码时，请指定 true；<br />\n        否则要使用 encodeURIComponent 进行编码，请指定 false 或不指定。\n@return {string} 返回一个经过编码的 Url 查询字符串\n@example\n        var obj = {\n            a: 1,\n            b: 2,\n            c: { A: 100, B: 200 },\n            d: null,\n            e: undefined,\n            f: ['a', 'b', 'c']\n        };\n        var s = $.Object.toQueryString(obj);\n        console.log(s); \n        //结果 a=1&b=2&c=A%3D100%26B%3D200&d=null&e=undefined&f=%5Ba%2C%20b%5D\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把一个对象编码成等价结构的 Url 查询字符串。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行编码的对象", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指定是否要使用兼容模式进行编码。<br />\n        当需要使用 escape 进行编码时，请指定 true；<br />\n        否则要使用 encodeURIComponent 进行编码，请指定 false 或不指定。", "type": "boolean", "name": "isCompatible", "isOptional": true, "defaultValue": "false" }, { "title": "return", "desc": "返回一个经过编码的 Url 查询字符串", "type": "string", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var obj = {\n            a: 1,\n            b: 2,\n            c: { A: 100, B: 200 },\n            d: null,\n            e: undefined,\n            f: ['a', 'b', 'c']\n        };\n        var s = $.Object.toQueryString(obj);\n        console.log(s); \n        //结果 a=1&b=2&c=A%3D100%26B%3D200&d=null&e=undefined&f=%5Ba%2C%20b%5D", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "返回一个经过编码的 Url 查询字符串", "type": "string", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "toQueryString", "_params": [{ "title": "param", "desc": "要进行编码的对象", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指定是否要使用兼容模式进行编码。<br />\n        当需要使用 escape 进行编码时，请指定 true；<br />\n        否则要使用 encodeURIComponent 进行编码，请指定 false 或不指定。", "type": "boolean", "name": "isCompatible", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var obj = {\n            a: 1,\n            b: 2,\n            c: { A: 100, B: 200 },\n            d: null,\n            e: undefined,\n            f: ['a', 'b', 'c']\n        };\n        var s = $.Object.toQueryString(obj);\n        console.log(s); \n        //结果 a=1&b=2&c=A%3D100%26B%3D200&d=null&e=undefined&f=%5Ba%2C%20b%5D", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "toQueryString", "params": [{ "title": "param", "desc": "要进行编码的对象", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指定是否要使用兼容模式进行编码。<br />\n        当需要使用 escape 进行编码时，请指定 true；<br />\n        否则要使用 encodeURIComponent 进行编码，请指定 false 或不指定。", "type": "boolean", "name": "isCompatible", "isOptional": true, "defaultValue": "false" }] }, { "type": "Object", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "删除对象的成员中值为指定的值列表中的成员，返回一个新对象。", "alias": "MiniQuery.Object.trim", "id": 615, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 删除对象的成员中值为指定的值列表中的成员，返回一个新对象。", "param {Object} obj 要进行处理的对象", "param {Array} [values=[undefined, null]] 要进行删除的值的列表。\n        只要成员中包含该列表中的值，就会给删除。\n        默认会删除值为 undefined 和 null 的成员。", "param {boolean} [isDeep=false] 指定是否深层次(递归)搜索。\n        如果要深层次搜索，请指定 true；\n        否则，请指定 false 或不指定。", "return {Object} 返回一个经过删除成员的新对象。\n        该对象中不包含值为指定的值列表中的项的成员。", "example\n        var d = {\n            A: 11, \n            B: null, \n            C: undefined,\n            D: '0'\n        };\n        var obj = {\n            a: 1, \n            b: null, \n            c: undefined, \n            d: d\n        };\n        var obj2 = $.Object.trim(obj, [null, undefined, '0'], true );\n        \n        console.dir(obj);   //结果没变\n        console.dir(obj2);  //结果为 {a: 1, d: {AA: 11}}\n        console.dir(d);     //结果没变\n        console.log(obj.d === d); //true\n    "], "src": "\n@desc 删除对象的成员中值为指定的值列表中的成员，返回一个新对象。\n@param {Object} obj 要进行处理的对象\n@param {Array} [values=[undefined, null]] 要进行删除的值的列表。\n        只要成员中包含该列表中的值，就会给删除。\n        默认会删除值为 undefined 和 null 的成员。\n@param {boolean} [isDeep=false] 指定是否深层次(递归)搜索。\n        如果要深层次搜索，请指定 true；\n        否则，请指定 false 或不指定。\n@return {Object} 返回一个经过删除成员的新对象。\n        该对象中不包含值为指定的值列表中的项的成员。\n@example\n        var d = {\n            A: 11, \n            B: null, \n            C: undefined,\n            D: '0'\n        };\n        var obj = {\n            a: 1, \n            b: null, \n            c: undefined, \n            d: d\n        };\n        var obj2 = $.Object.trim(obj, [null, undefined, '0'], true );\n        \n        console.dir(obj);   //结果没变\n        console.dir(obj2);  //结果为 {a: 1, d: {AA: 11}}\n        console.dir(d);     //结果没变\n        console.log(obj.d === d); //true\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "删除对象的成员中值为指定的值列表中的成员，返回一个新对象。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行处理的对象", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行删除的值的列表。\n        只要成员中包含该列表中的值，就会给删除。\n        默认会删除值为 undefined 和 null 的成员。", "type": "Array", "name": "values", "isOptional": true, "defaultValue": "[undefined, null]" }, { "title": "param", "desc": "指定是否深层次(递归)搜索。\n        如果要深层次搜索，请指定 true；\n        否则，请指定 false 或不指定。", "type": "boolean", "name": "isDeep", "isOptional": true, "defaultValue": "false" }, { "title": "return", "desc": "返回一个经过删除成员的新对象。\n        该对象中不包含值为指定的值列表中的项的成员。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var d = {\n            A: 11, \n            B: null, \n            C: undefined,\n            D: '0'\n        };\n        var obj = {\n            a: 1, \n            b: null, \n            c: undefined, \n            d: d\n        };\n        var obj2 = $.Object.trim(obj, [null, undefined, '0'], true );\n        \n        console.dir(obj);   //结果没变\n        console.dir(obj2);  //结果为 {a: 1, d: {AA: 11}}\n        console.dir(d);     //结果没变\n        console.log(obj.d === d); //true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "返回一个经过删除成员的新对象。\n        该对象中不包含值为指定的值列表中的项的成员。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "trim", "_params": [{ "title": "param", "desc": "要进行处理的对象", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行删除的值的列表。\n        只要成员中包含该列表中的值，就会给删除。\n        默认会删除值为 undefined 和 null 的成员。", "type": "Array", "name": "values", "isOptional": true, "defaultValue": "[undefined, null]" }, { "title": "param", "desc": "指定是否深层次(递归)搜索。\n        如果要深层次搜索，请指定 true；\n        否则，请指定 false 或不指定。", "type": "boolean", "name": "isDeep", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var d = {\n            A: 11, \n            B: null, \n            C: undefined,\n            D: '0'\n        };\n        var obj = {\n            a: 1, \n            b: null, \n            c: undefined, \n            d: d\n        };\n        var obj2 = $.Object.trim(obj, [null, undefined, '0'], true );\n        \n        console.dir(obj);   //结果没变\n        console.dir(obj2);  //结果为 {a: 1, d: {AA: 11}}\n        console.dir(d);     //结果没变\n        console.log(obj.d === d); //true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "trim", "params": [{ "title": "param", "desc": "要进行处理的对象", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行删除的值的列表。\n        只要成员中包含该列表中的值，就会给删除。\n        默认会删除值为 undefined 和 null 的成员。", "type": "Array", "name": "values", "isOptional": true, "defaultValue": "[undefined, null]" }, { "title": "param", "desc": "指定是否深层次(递归)搜索。\n        如果要深层次搜索，请指定 true；\n        否则，请指定 false 或不指定。", "type": "boolean", "name": "isDeep", "isOptional": true, "defaultValue": "false" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "跨浏览器的 Object.create 方法。\n该方法会优化使用原生的 Object.create 方法，当不存在时，才使用自己的实现。", "alias": "MiniQuery.Object.create", "id": 627, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 跨浏览器的 Object.create 方法。\n该方法会优化使用原生的 Object.create 方法，当不存在时，才使用自己的实现。", "example\n        var obj = $.Object.create({\n            name: 'micty',\n            sayHi: function() {\n                console.log( this.name );\n            }\n        });\n    \n        obj.sayHi();\n    "], "src": "\n@desc 跨浏览器的 Object.create 方法。\n该方法会优化使用原生的 Object.create 方法，当不存在时，才使用自己的实现。\n@example\n        var obj = $.Object.create({\n            name: 'micty',\n            sayHi: function() {\n                console.log( this.name );\n            }\n        });\n    \n        obj.sayHi();\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "跨浏览器的 Object.create 方法。\n该方法会优化使用原生的 Object.create 方法，当不存在时，才使用自己的实现。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var obj = $.Object.create({\n            name: 'micty',\n            sayHi: function() {\n                console.log( this.name );\n            }\n        });\n    \n        obj.sayHi();", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "create", "_params": [{ "title": "param", "desc": "", "type": "", "name": "obj", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var obj = $.Object.create({\n            name: 'micty',\n            sayHi: function() {\n                console.log( this.name );\n            }\n        });\n    \n        obj.sayHi();", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "create", "params": [{ "title": "param", "desc": "", "type": "", "name": "obj", "isOptional": false, "defaultValue": "" }] }, { "type": "Object", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "对一个对象进行成员过滤，返回一个过滤后的新对象。\n该方法可以以某个模板对指定对象进行成员拷贝。", "alias": "MiniQuery.Object.filter", "id": 634, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 对一个对象进行成员过滤，返回一个过滤后的新对象。\n该方法可以以某个模板对指定对象进行成员拷贝。", "param {Object} src 要进行拷贝的对象，即数据来源。", "param {Array|Object|string} samples 要拷贝的成员列表(模板)。", "return {Object} 返回一个过滤后的新对象。", "example\n        var src = {\n            a: 100,\n            b: 200,\n            c: 300,\n            d: 400\n        };\n\n        var samples = {\n            a: 1,\n            b: 2\n        };\n\n        //或 samples = ['a', 'b'];\n\n        var obj = $.Object.filter(src, samples);\n        console.dir(obj); //得到 obj = { a: 100, b: 200 }; 只保留 samples 中指定的成员，其他的去掉.\n    "], "src": "\n@desc 对一个对象进行成员过滤，返回一个过滤后的新对象。\n该方法可以以某个模板对指定对象进行成员拷贝。\n@param {Object} src 要进行拷贝的对象，即数据来源。\n@param {Array|Object|string} samples 要拷贝的成员列表(模板)。\n@return {Object} 返回一个过滤后的新对象。\n@example\n        var src = {\n            a: 100,\n            b: 200,\n            c: 300,\n            d: 400\n        };\n\n        var samples = {\n            a: 1,\n            b: 2\n        };\n\n        //或 samples = ['a', 'b'];\n\n        var obj = $.Object.filter(src, samples);\n        console.dir(obj); //得到 obj = { a: 100, b: 200 }; 只保留 samples 中指定的成员，其他的去掉.\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "对一个对象进行成员过滤，返回一个过滤后的新对象。\n该方法可以以某个模板对指定对象进行成员拷贝。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行拷贝的对象，即数据来源。", "type": "Object", "name": "src", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要拷贝的成员列表(模板)。", "type": "Array|Object|string", "name": "samples", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个过滤后的新对象。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var src = {\n            a: 100,\n            b: 200,\n            c: 300,\n            d: 400\n        };\n\n        var samples = {\n            a: 1,\n            b: 2\n        };\n\n        //或 samples = ['a', 'b'];\n\n        var obj = $.Object.filter(src, samples);\n        console.dir(obj); //得到 obj = { a: 100, b: 200 }; 只保留 samples 中指定的成员，其他的去掉.", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "返回一个过滤后的新对象。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "filter", "_params": [{ "title": "param", "desc": "要进行拷贝的对象，即数据来源。", "type": "Object", "name": "src", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要拷贝的成员列表(模板)。", "type": "Array|Object|string", "name": "samples", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var src = {\n            a: 100,\n            b: 200,\n            c: 300,\n            d: 400\n        };\n\n        var samples = {\n            a: 1,\n            b: 2\n        };\n\n        //或 samples = ['a', 'b'];\n\n        var obj = $.Object.filter(src, samples);\n        console.dir(obj); //得到 obj = { a: 100, b: 200 }; 只保留 samples 中指定的成员，其他的去掉.", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "filter", "params": [{ "title": "param", "desc": "要进行拷贝的对象，即数据来源。", "type": "Object", "name": "src", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要拷贝的成员列表(模板)。", "type": "Array|Object|string", "name": "samples", "isOptional": false, "defaultValue": "" }] }, { "type": "Object", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "对一个源对象进行成员过滤，并把过滤后的结果扩展到目标对象上。\n该方法可以从指定的对象上拷贝指定的成员到目标对象上。", "alias": "MiniQuery.Object.filterTo", "id": 639, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 对一个源对象进行成员过滤，并把过滤后的结果扩展到目标对象上。\n该方法可以从指定的对象上拷贝指定的成员到目标对象上。", "param {Object} target 接收成员的目标对象。", "param {Object} src 要进行拷贝的对象，即数据来源。", "param {Array|Object|string} samples 要拷贝的成员列表(模板)。", "return {Object} 返回一个过滤后的新对象。", "example\n        var target = {\n            myName: 'micty'\n        };\n\n        var src = {\n            a: 100,\n            b: 200,\n            c: 300,\n            d: 400\n        };\n\n        var samples = {\n            a: 1,\n            b: 2\n        };\n\n        //或 samples = ['a', 'b'];\n\n        $.Object.filterTo(target, src, samples);\n        console.dir(target); //得到 target = { myName: 'micty', a: 100, b: 200 };\n    "], "src": "\n@desc 对一个源对象进行成员过滤，并把过滤后的结果扩展到目标对象上。\n该方法可以从指定的对象上拷贝指定的成员到目标对象上。\n@param {Object} target 接收成员的目标对象。\n@param {Object} src 要进行拷贝的对象，即数据来源。\n@param {Array|Object|string} samples 要拷贝的成员列表(模板)。\n@return {Object} 返回一个过滤后的新对象。\n@example\n        var target = {\n            myName: 'micty'\n        };\n\n        var src = {\n            a: 100,\n            b: 200,\n            c: 300,\n            d: 400\n        };\n\n        var samples = {\n            a: 1,\n            b: 2\n        };\n\n        //或 samples = ['a', 'b'];\n\n        $.Object.filterTo(target, src, samples);\n        console.dir(target); //得到 target = { myName: 'micty', a: 100, b: 200 };\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "对一个源对象进行成员过滤，并把过滤后的结果扩展到目标对象上。\n该方法可以从指定的对象上拷贝指定的成员到目标对象上。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "接收成员的目标对象。", "type": "Object", "name": "target", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行拷贝的对象，即数据来源。", "type": "Object", "name": "src", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要拷贝的成员列表(模板)。", "type": "Array|Object|string", "name": "samples", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个过滤后的新对象。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var target = {\n            myName: 'micty'\n        };\n\n        var src = {\n            a: 100,\n            b: 200,\n            c: 300,\n            d: 400\n        };\n\n        var samples = {\n            a: 1,\n            b: 2\n        };\n\n        //或 samples = ['a', 'b'];\n\n        $.Object.filterTo(target, src, samples);\n        console.dir(target); //得到 target = { myName: 'micty', a: 100, b: 200 };", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "返回一个过滤后的新对象。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "filterTo", "_params": [{ "title": "param", "desc": "接收成员的目标对象。", "type": "Object", "name": "target", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行拷贝的对象，即数据来源。", "type": "Object", "name": "src", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要拷贝的成员列表(模板)。", "type": "Array|Object|string", "name": "samples", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var target = {\n            myName: 'micty'\n        };\n\n        var src = {\n            a: 100,\n            b: 200,\n            c: 300,\n            d: 400\n        };\n\n        var samples = {\n            a: 1,\n            b: 2\n        };\n\n        //或 samples = ['a', 'b'];\n\n        $.Object.filterTo(target, src, samples);\n        console.dir(target); //得到 target = { myName: 'micty', a: 100, b: 200 };", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "filterTo", "params": [{ "title": "param", "desc": "接收成员的目标对象。", "type": "Object", "name": "target", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行拷贝的对象，即数据来源。", "type": "Object", "name": "src", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要拷贝的成员列表(模板)。", "type": "Array|Object|string", "name": "samples", "isOptional": false, "defaultValue": "" }] }, { "type": "Object", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "使用过滤函数对指定的对象进行过滤数，返回一个新对象。", "alias": "MiniQuery.Object.grep", "id": 641, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 使用过滤函数对指定的对象进行过滤数，返回一个新对象。", "param {Object} target 要进行过滤的对象。", "param {function} fn 过滤函数。\n  过滤函数会接收到两个参数：当前对象中迭代中的 key 和 value。\n  过滤函数必须明确返回 true 以保留该成员，其它值则删除该成员。", "return {Object} 返回一个过滤后的纯对象。\n    "], "src": "\n@desc 使用过滤函数对指定的对象进行过滤数，返回一个新对象。\n@param {Object} target 要进行过滤的对象。\n@param {function} fn 过滤函数。\n  过滤函数会接收到两个参数：当前对象中迭代中的 key 和 value。\n  过滤函数必须明确返回 true 以保留该成员，其它值则删除该成员。\n@return {Object} 返回一个过滤后的纯对象。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "使用过滤函数对指定的对象进行过滤数，返回一个新对象。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行过滤的对象。", "type": "Object", "name": "target", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "过滤函数。\n  过滤函数会接收到两个参数：当前对象中迭代中的 key 和 value。\n  过滤函数必须明确返回 true 以保留该成员，其它值则删除该成员。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个过滤后的纯对象。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "返回一个过滤后的纯对象。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "grep", "_params": [{ "title": "param", "desc": "要进行过滤的对象。", "type": "Object", "name": "target", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "过滤函数。\n  过滤函数会接收到两个参数：当前对象中迭代中的 key 和 value。\n  过滤函数必须明确返回 true 以保留该成员，其它值则删除该成员。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "grep", "params": [{ "title": "param", "desc": "要进行过滤的对象。", "type": "Object", "name": "target", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "过滤函数。\n  过滤函数会接收到两个参数：当前对象中迭代中的 key 和 value。\n  过滤函数必须明确返回 true 以保留该成员，其它值则删除该成员。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }] }, { "type": "boolean", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "判断符合条件的元素是否存在。 \n只有在回调函数中明确返回 true，才算找到，此时本方法停止迭代，并返回 true 以指示找到； \n否则迭代继续直至完成，并返回 false 以指示不存在符合条件的元素。", "alias": "MiniQuery.Object.find", "id": 644, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 判断符合条件的元素是否存在。 \n只有在回调函数中明确返回 true，才算找到，此时本方法停止迭代，并返回 true 以指示找到； \n否则迭代继续直至完成，并返回 false 以指示不存在符合条件的元素。", "param {Object} obj 要进行查找的对象，将在其成员中进行迭代。", "param {function} fn 自定义查找的函数。\n        只有在回调函数中明确返回 true 才算找到，此时本方法停止迭代。", "param {boolean} isDeep 指示是否深层次迭代查找。", "return {boolean} 如果找到符合条件的元素，则返回 true；否则返回 false。", "example\n        var obj = {\n            a: 1,\n            b: 2,\n            c: 2,\n            d: {\n                a: 1,\n                b: 1,\n                c: 2\n            }\n        };\n\n        var found = $.Object.find(obj, function (key, value) {\n            if (key == 'b' && value == 1) {\n                return true;\n            }\n        }, true);\n        console.log(found); //true\n    "], "src": "\n@desc 判断符合条件的元素是否存在。 \n只有在回调函数中明确返回 true，才算找到，此时本方法停止迭代，并返回 true 以指示找到； \n否则迭代继续直至完成，并返回 false 以指示不存在符合条件的元素。\n@param {Object} obj 要进行查找的对象，将在其成员中进行迭代。\n@param {function} fn 自定义查找的函数。\n        只有在回调函数中明确返回 true 才算找到，此时本方法停止迭代。\n@param {boolean} isDeep 指示是否深层次迭代查找。\n@return {boolean} 如果找到符合条件的元素，则返回 true；否则返回 false。\n@example\n        var obj = {\n            a: 1,\n            b: 2,\n            c: 2,\n            d: {\n                a: 1,\n                b: 1,\n                c: 2\n            }\n        };\n\n        var found = $.Object.find(obj, function (key, value) {\n            if (key == 'b' && value == 1) {\n                return true;\n            }\n        }, true);\n        console.log(found); //true\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "判断符合条件的元素是否存在。 \n只有在回调函数中明确返回 true，才算找到，此时本方法停止迭代，并返回 true 以指示找到； \n否则迭代继续直至完成，并返回 false 以指示不存在符合条件的元素。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行查找的对象，将在其成员中进行迭代。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "自定义查找的函数。\n        只有在回调函数中明确返回 true 才算找到，此时本方法停止迭代。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否深层次迭代查找。", "type": "boolean", "name": "isDeep", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "如果找到符合条件的元素，则返回 true；否则返回 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var obj = {\n            a: 1,\n            b: 2,\n            c: 2,\n            d: {\n                a: 1,\n                b: 1,\n                c: 2\n            }\n        };\n\n        var found = $.Object.find(obj, function (key, value) {\n            if (key == 'b' && value == 1) {\n                return true;\n            }\n        }, true);\n        console.log(found); //true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "如果找到符合条件的元素，则返回 true；否则返回 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "find", "_params": [{ "title": "param", "desc": "要进行查找的对象，将在其成员中进行迭代。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "自定义查找的函数。\n        只有在回调函数中明确返回 true 才算找到，此时本方法停止迭代。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否深层次迭代查找。", "type": "boolean", "name": "isDeep", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var obj = {\n            a: 1,\n            b: 2,\n            c: 2,\n            d: {\n                a: 1,\n                b: 1,\n                c: 2\n            }\n        };\n\n        var found = $.Object.find(obj, function (key, value) {\n            if (key == 'b' && value == 1) {\n                return true;\n            }\n        }, true);\n        console.log(found); //true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "find", "params": [{ "title": "param", "desc": "要进行查找的对象，将在其成员中进行迭代。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "自定义查找的函数。\n        只有在回调函数中明确返回 true 才算找到，此时本方法停止迭代。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否深层次迭代查找。", "type": "boolean", "name": "isDeep", "isOptional": false, "defaultValue": "" }] }, { "type": "boolean", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "查找符合条件的元素，返回一个键值的二元组[key, value]。", "alias": "MiniQuery.Object.findItem", "id": 648, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 查找符合条件的元素，返回一个键值的二元组[key, value]。", "param {Object} obj 要进行查找的对象，将在其成员中进行迭代。", "param {function} fn 自定义查找的函数。\n        只有在回调函数中明确返回 true 才算找到，此时本方法停止迭代。", "param {boolean} isDeep 指示是否深层次迭代查找。", "return {boolean} 如果找到符合条件的元素，则返回该项的键值二元组[key, value]。", "example\n        var obj = {\n            a: 1,\n            b: 2,\n            c: 2,\n            d: {\n                a: 10,\n                b: 10,\n                c: 20\n            }\n        };\n\n        var item = $.Object.findItem(obj, function (key, value) {\n            return value == 20;\n        }, true);\n        console.log(item); //['c', 20]\n    "], "src": "\n@desc 查找符合条件的元素，返回一个键值的二元组[key, value]。\n@param {Object} obj 要进行查找的对象，将在其成员中进行迭代。\n@param {function} fn 自定义查找的函数。\n        只有在回调函数中明确返回 true 才算找到，此时本方法停止迭代。\n@param {boolean} isDeep 指示是否深层次迭代查找。\n@return {boolean} 如果找到符合条件的元素，则返回该项的键值二元组[key, value]。\n@example\n        var obj = {\n            a: 1,\n            b: 2,\n            c: 2,\n            d: {\n                a: 10,\n                b: 10,\n                c: 20\n            }\n        };\n\n        var item = $.Object.findItem(obj, function (key, value) {\n            return value == 20;\n        }, true);\n        console.log(item); //['c', 20]\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "查找符合条件的元素，返回一个键值的二元组[key, value]。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行查找的对象，将在其成员中进行迭代。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "自定义查找的函数。\n        只有在回调函数中明确返回 true 才算找到，此时本方法停止迭代。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否深层次迭代查找。", "type": "boolean", "name": "isDeep", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "如果找到符合条件的元素，则返回该项的键值二元组[key, value]。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var obj = {\n            a: 1,\n            b: 2,\n            c: 2,\n            d: {\n                a: 10,\n                b: 10,\n                c: 20\n            }\n        };\n\n        var item = $.Object.findItem(obj, function (key, value) {\n            return value == 20;\n        }, true);\n        console.log(item); //['c', 20]", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "如果找到符合条件的元素，则返回该项的键值二元组[key, value]。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "findItem", "_params": [{ "title": "param", "desc": "要进行查找的对象，将在其成员中进行迭代。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "自定义查找的函数。\n        只有在回调函数中明确返回 true 才算找到，此时本方法停止迭代。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否深层次迭代查找。", "type": "boolean", "name": "isDeep", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var obj = {\n            a: 1,\n            b: 2,\n            c: 2,\n            d: {\n                a: 10,\n                b: 10,\n                c: 20\n            }\n        };\n\n        var item = $.Object.findItem(obj, function (key, value) {\n            return value == 20;\n        }, true);\n        console.log(item); //['c', 20]", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "findItem", "params": [{ "title": "param", "desc": "要进行查找的对象，将在其成员中进行迭代。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "自定义查找的函数。\n        只有在回调函数中明确返回 true 才算找到，此时本方法停止迭代。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否深层次迭代查找。", "type": "boolean", "name": "isDeep", "isOptional": false, "defaultValue": "" }] }, { "type": "boolean", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "查找符合条件的元素，返回该元素的键。", "alias": "MiniQuery.Object.findKey", "id": 652, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 查找符合条件的元素，返回该元素的键。", "param {Object} obj 要进行查找的对象，将在其成员中进行迭代。", "param {function} fn 自定义查找的函数。\n        只有在回调函数中明确返回 true 才算找到，此时本方法停止迭代。", "param {boolean} isDeep 指示是否深层次迭代查找。", "return {boolean} 如果找到符合条件的元素，则返回该项的键；否则返回 undefined。", "example\n        var obj = {\n            a: 1,\n            b: 2,\n            c: 2,\n            d: {\n                a: 10,\n                b: 10,\n                c: 20\n            }\n        };\n\n        var key = $.Object.findKey(obj, function (key, value) {\n            return value == 20;\n        }, true);\n        console.log(key); // 'c'\n    "], "src": "\n@desc 查找符合条件的元素，返回该元素的键。\n@param {Object} obj 要进行查找的对象，将在其成员中进行迭代。\n@param {function} fn 自定义查找的函数。\n        只有在回调函数中明确返回 true 才算找到，此时本方法停止迭代。\n@param {boolean} isDeep 指示是否深层次迭代查找。\n@return {boolean} 如果找到符合条件的元素，则返回该项的键；否则返回 undefined。\n@example\n        var obj = {\n            a: 1,\n            b: 2,\n            c: 2,\n            d: {\n                a: 10,\n                b: 10,\n                c: 20\n            }\n        };\n\n        var key = $.Object.findKey(obj, function (key, value) {\n            return value == 20;\n        }, true);\n        console.log(key); // 'c'\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "查找符合条件的元素，返回该元素的键。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行查找的对象，将在其成员中进行迭代。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "自定义查找的函数。\n        只有在回调函数中明确返回 true 才算找到，此时本方法停止迭代。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否深层次迭代查找。", "type": "boolean", "name": "isDeep", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "如果找到符合条件的元素，则返回该项的键；否则返回 undefined。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var obj = {\n            a: 1,\n            b: 2,\n            c: 2,\n            d: {\n                a: 10,\n                b: 10,\n                c: 20\n            }\n        };\n\n        var key = $.Object.findKey(obj, function (key, value) {\n            return value == 20;\n        }, true);\n        console.log(key); // 'c'", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "如果找到符合条件的元素，则返回该项的键；否则返回 undefined。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "findKey", "_params": [{ "title": "param", "desc": "要进行查找的对象，将在其成员中进行迭代。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "自定义查找的函数。\n        只有在回调函数中明确返回 true 才算找到，此时本方法停止迭代。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否深层次迭代查找。", "type": "boolean", "name": "isDeep", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var obj = {\n            a: 1,\n            b: 2,\n            c: 2,\n            d: {\n                a: 10,\n                b: 10,\n                c: 20\n            }\n        };\n\n        var key = $.Object.findKey(obj, function (key, value) {\n            return value == 20;\n        }, true);\n        console.log(key); // 'c'", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "findKey", "params": [{ "title": "param", "desc": "要进行查找的对象，将在其成员中进行迭代。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "自定义查找的函数。\n        只有在回调函数中明确返回 true 才算找到，此时本方法停止迭代。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否深层次迭代查找。", "type": "boolean", "name": "isDeep", "isOptional": false, "defaultValue": "" }] }, { "type": "boolean", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "查找符合条件的元素，返回该元素的值。", "alias": "MiniQuery.Object.findValue", "id": 654, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 查找符合条件的元素，返回该元素的值。", "param {Object} obj 要进行查找的对象，将在其成员中进行迭代。", "param {function} fn 自定义查找的函数。\n        只有在回调函数中明确返回 true 才算找到，此时本方法停止迭代。", "param {boolean} isDeep 指示是否深层次迭代查找。", "return {boolean} 如果找到符合条件的元素，则返回该元素的值；否则返回 undefined。", "example\n        var obj = {\n            a: 1,\n            b: 2,\n            c: 2,\n            d: {\n                a: 10,\n                b: 10,\n                cc: 20\n            }\n        };\n\n        var value = $.Object.findValue(obj, function (key, value) {\n            return key == 'cc';\n        }, true);\n        console.log(value); //20\n    "], "src": "\n@desc 查找符合条件的元素，返回该元素的值。\n@param {Object} obj 要进行查找的对象，将在其成员中进行迭代。\n@param {function} fn 自定义查找的函数。\n        只有在回调函数中明确返回 true 才算找到，此时本方法停止迭代。\n@param {boolean} isDeep 指示是否深层次迭代查找。\n@return {boolean} 如果找到符合条件的元素，则返回该元素的值；否则返回 undefined。\n@example\n        var obj = {\n            a: 1,\n            b: 2,\n            c: 2,\n            d: {\n                a: 10,\n                b: 10,\n                cc: 20\n            }\n        };\n\n        var value = $.Object.findValue(obj, function (key, value) {\n            return key == 'cc';\n        }, true);\n        console.log(value); //20\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "查找符合条件的元素，返回该元素的值。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行查找的对象，将在其成员中进行迭代。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "自定义查找的函数。\n        只有在回调函数中明确返回 true 才算找到，此时本方法停止迭代。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否深层次迭代查找。", "type": "boolean", "name": "isDeep", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "如果找到符合条件的元素，则返回该元素的值；否则返回 undefined。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var obj = {\n            a: 1,\n            b: 2,\n            c: 2,\n            d: {\n                a: 10,\n                b: 10,\n                cc: 20\n            }\n        };\n\n        var value = $.Object.findValue(obj, function (key, value) {\n            return key == 'cc';\n        }, true);\n        console.log(value); //20", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "如果找到符合条件的元素，则返回该元素的值；否则返回 undefined。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "findValue", "_params": [{ "title": "param", "desc": "要进行查找的对象，将在其成员中进行迭代。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "自定义查找的函数。\n        只有在回调函数中明确返回 true 才算找到，此时本方法停止迭代。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否深层次迭代查找。", "type": "boolean", "name": "isDeep", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var obj = {\n            a: 1,\n            b: 2,\n            c: 2,\n            d: {\n                a: 10,\n                b: 10,\n                cc: 20\n            }\n        };\n\n        var value = $.Object.findValue(obj, function (key, value) {\n            return key == 'cc';\n        }, true);\n        console.log(value); //20", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "findValue", "params": [{ "title": "param", "desc": "要进行查找的对象，将在其成员中进行迭代。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "自定义查找的函数。\n        只有在回调函数中明确返回 true 才算找到，此时本方法停止迭代。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否深层次迭代查找。", "type": "boolean", "name": "isDeep", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "获取指定的对象指定成员所对应的值。\n当对象中不存在该成员时，返回一个备用值。", "alias": "MiniQuery.Object.get", "id": 656, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 获取指定的对象指定成员所对应的值。\n当对象中不存在该成员时，返回一个备用值。", "param {Object} obj 要获取值的对象。", "param key 要获取值的成员。", "param backupValue 备用值。。", "return 如果对象中存在该成员，则返回该成员所对应的值；否则，返回备用值。", "example\n        var value = $.Object.get({}, 'a', 2);\n        console.log(value); //得到 2;\n\n        var value = $.Object.get({a: 1 }, 'a', 2);\n        console.log(value); //得到 1;\n\n        var value = $.Object.get(null, 'a', 1);\n        console.log(value); //得到 1;\n    "], "src": "\n@desc 获取指定的对象指定成员所对应的值。\n当对象中不存在该成员时，返回一个备用值。\n@param {Object} obj 要获取值的对象。\n@param key 要获取值的成员。\n@param backupValue 备用值。。\n@return 如果对象中存在该成员，则返回该成员所对应的值；否则，返回备用值。\n@example\n        var value = $.Object.get({}, 'a', 2);\n        console.log(value); //得到 2;\n\n        var value = $.Object.get({a: 1 }, 'a', 2);\n        console.log(value); //得到 1;\n\n        var value = $.Object.get(null, 'a', 1);\n        console.log(value); //得到 1;\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "获取指定的对象指定成员所对应的值。\n当对象中不存在该成员时，返回一个备用值。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要获取值的对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要获取值的成员。", "type": "", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "备用值。。", "type": "", "name": "backupValue", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "如果对象中存在该成员，则返回该成员所对应的值；否则，返回备用值。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var value = $.Object.get({}, 'a', 2);\n        console.log(value); //得到 2;\n\n        var value = $.Object.get({a: 1 }, 'a', 2);\n        console.log(value); //得到 1;\n\n        var value = $.Object.get(null, 'a', 1);\n        console.log(value); //得到 1;", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "如果对象中存在该成员，则返回该成员所对应的值；否则，返回备用值。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "get", "_params": [{ "title": "param", "desc": "要获取值的对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要获取值的成员。", "type": "", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "备用值。。", "type": "", "name": "backupValue", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var value = $.Object.get({}, 'a', 2);\n        console.log(value); //得到 2;\n\n        var value = $.Object.get({a: 1 }, 'a', 2);\n        console.log(value); //得到 1;\n\n        var value = $.Object.get(null, 'a', 1);\n        console.log(value); //得到 1;", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "get", "params": [{ "title": "param", "desc": "要获取值的对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要获取值的成员。", "type": "", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "备用值。。", "type": "", "name": "backupValue", "isOptional": false, "defaultValue": "" }] }, { "type": "Object", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "给指定的对象设置一个键和一个值。", "alias": "MiniQuery.Object.set", "id": 657, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 给指定的对象设置一个键和一个值。", "param {Object} obj 要设置的对象。", "param key 设置对象所用的键。", "param value 设置对象所用的值。", "return {Object} 返回第一个参数 obj，即设置的对象。", "example\n        var obj = $.Object.set({}, 'a', 1);\n        console.dir(obj); //得到 obj = { a: 1 };\n    "], "src": "\n@desc 给指定的对象设置一个键和一个值。\n@param {Object} obj 要设置的对象。\n@param key 设置对象所用的键。\n@param value 设置对象所用的值。\n@return {Object} 返回第一个参数 obj，即设置的对象。\n@example\n        var obj = $.Object.set({}, 'a', 1);\n        console.dir(obj); //得到 obj = { a: 1 };\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "给指定的对象设置一个键和一个值。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要设置的对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "设置对象所用的键。", "type": "", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "设置对象所用的值。", "type": "", "name": "value", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回第一个参数 obj，即设置的对象。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var obj = $.Object.set({}, 'a', 1);\n        console.dir(obj); //得到 obj = { a: 1 };", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "返回第一个参数 obj，即设置的对象。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "set", "_params": [{ "title": "param", "desc": "要设置的对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "设置对象所用的键。", "type": "", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "设置对象所用的值。", "type": "", "name": "value", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var obj = $.Object.set({}, 'a', 1);\n        console.dir(obj); //得到 obj = { a: 1 };", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "set", "params": [{ "title": "param", "desc": "要设置的对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "设置对象所用的键。", "type": "", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "设置对象所用的值。", "type": "", "name": "value", "isOptional": false, "defaultValue": "" }] }, { "type": "Object", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "用指定的键和值组合生成一个对象，支持批量操作。", "alias": "MiniQuery.Object.make", "id": 658, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 用指定的键和值组合生成一个对象，支持批量操作。", "param {string|number|boolean|Array} key 生成对象所用的键。\n        当是数组时，表示批量操作，格式必须是二元组。", "param value 生成对象所用的值。", "return {Object} 返回一个生成后的对象。", "example\n\n        //单个操作\n        var obj = $.Object.make('a', 1);\n        console.dir(obj); //得到 obj = { a: 1 };\n\n        //批量操作\n        var obj = $.Object.make( \n            ['a', 1], \n            ['b', 2], \n            ['c', 3]\n        );\n        console.dir(obj); //得到 obj = { a: 1, b: 2, c: 3};\n    "], "src": "\n@desc 用指定的键和值组合生成一个对象，支持批量操作。\n@param {string|number|boolean|Array} key 生成对象所用的键。\n        当是数组时，表示批量操作，格式必须是二元组。\n@param value 生成对象所用的值。\n@return {Object} 返回一个生成后的对象。\n@example\n\n        //单个操作\n        var obj = $.Object.make('a', 1);\n        console.dir(obj); //得到 obj = { a: 1 };\n\n        //批量操作\n        var obj = $.Object.make( \n            ['a', 1], \n            ['b', 2], \n            ['c', 3]\n        );\n        console.dir(obj); //得到 obj = { a: 1, b: 2, c: 3};\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "用指定的键和值组合生成一个对象，支持批量操作。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "生成对象所用的键。\n        当是数组时，表示批量操作，格式必须是二元组。", "type": "string|number|boolean|Array", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "生成对象所用的值。", "type": "", "name": "value", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个生成后的对象。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n\n        //单个操作\n        var obj = $.Object.make('a', 1);\n        console.dir(obj); //得到 obj = { a: 1 };\n\n        //批量操作\n        var obj = $.Object.make( \n            ['a', 1], \n            ['b', 2], \n            ['c', 3]\n        );\n        console.dir(obj); //得到 obj = { a: 1, b: 2, c: 3};", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "返回一个生成后的对象。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "make", "_params": [{ "title": "param", "desc": "生成对象所用的键。\n        当是数组时，表示批量操作，格式必须是二元组。", "type": "string|number|boolean|Array", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "生成对象所用的值。", "type": "", "name": "value", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n\n        //单个操作\n        var obj = $.Object.make('a', 1);\n        console.dir(obj); //得到 obj = { a: 1 };\n\n        //批量操作\n        var obj = $.Object.make( \n            ['a', 1], \n            ['b', 2], \n            ['c', 3]\n        );\n        console.dir(obj); //得到 obj = { a: 1, b: 2, c: 3};", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "make", "params": [{ "title": "param", "desc": "生成对象所用的键。\n        当是数组时，表示批量操作，格式必须是二元组。", "type": "string|number|boolean|Array", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "生成对象所用的值。", "type": "", "name": "value", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "获取指定对象的所有成员中的键，返回一个数组。", "alias": "MiniQuery.Object.getKeys", "id": 662, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 获取指定对象的所有成员中的键，返回一个数组。", "param {Object} obj 要进行获取值的对象。", "param {boolean} [isDeep=false] 指示是否要进行递归获取。\n        如果要对成员中值类型为 object 的非 null 值递归处理，请指定 true，此时返回一个多维数组；\n        否则指定为 false，此时为返回一个一维数组。", "return 返回一个由值组成的一维或多维数组。\n    "], "src": "\n@desc 获取指定对象的所有成员中的键，返回一个数组。\n@param {Object} obj 要进行获取值的对象。\n@param {boolean} [isDeep=false] 指示是否要进行递归获取。\n        如果要对成员中值类型为 object 的非 null 值递归处理，请指定 true，此时返回一个多维数组；\n        否则指定为 false，此时为返回一个一维数组。\n@return 返回一个由值组成的一维或多维数组。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "获取指定对象的所有成员中的键，返回一个数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行获取值的对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否要进行递归获取。\n        如果要对成员中值类型为 object 的非 null 值递归处理，请指定 true，此时返回一个多维数组；\n        否则指定为 false，此时为返回一个一维数组。", "type": "boolean", "name": "isDeep", "isOptional": true, "defaultValue": "false" }, { "title": "return", "desc": "返回一个由值组成的一维或多维数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "返回一个由值组成的一维或多维数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "getKeys", "_params": [{ "title": "param", "desc": "要进行获取值的对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否要进行递归获取。\n        如果要对成员中值类型为 object 的非 null 值递归处理，请指定 true，此时返回一个多维数组；\n        否则指定为 false，此时为返回一个一维数组。", "type": "boolean", "name": "isDeep", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "getKeys", "params": [{ "title": "param", "desc": "要进行获取值的对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否要进行递归获取。\n        如果要对成员中值类型为 object 的非 null 值递归处理，请指定 true，此时返回一个多维数组；\n        否则指定为 false，此时为返回一个一维数组。", "type": "boolean", "name": "isDeep", "isOptional": true, "defaultValue": "false" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "获取指定对象的所有成员中的值，返回一个数组。", "alias": "MiniQuery.Object.getValues", "id": 667, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 获取指定对象的所有成员中的值，返回一个数组。", "param {Object} obj 要进行获取值的对象。", "param {boolean} [isDeep=false] 指示是否要进行递归获取。\n        如果要对成员中值类型为 object 的非 null 值递归处理，请指定 true，此时返回一个多维数组；\n        否则指定为 false，此时为返回一个一维数组。", "return 返回一个由值组成的一维或多维数组。\n    "], "src": "\n@desc 获取指定对象的所有成员中的值，返回一个数组。\n@param {Object} obj 要进行获取值的对象。\n@param {boolean} [isDeep=false] 指示是否要进行递归获取。\n        如果要对成员中值类型为 object 的非 null 值递归处理，请指定 true，此时返回一个多维数组；\n        否则指定为 false，此时为返回一个一维数组。\n@return 返回一个由值组成的一维或多维数组。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "获取指定对象的所有成员中的值，返回一个数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行获取值的对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否要进行递归获取。\n        如果要对成员中值类型为 object 的非 null 值递归处理，请指定 true，此时返回一个多维数组；\n        否则指定为 false，此时为返回一个一维数组。", "type": "boolean", "name": "isDeep", "isOptional": true, "defaultValue": "false" }, { "title": "return", "desc": "返回一个由值组成的一维或多维数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "返回一个由值组成的一维或多维数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "getValues", "_params": [{ "title": "param", "desc": "要进行获取值的对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否要进行递归获取。\n        如果要对成员中值类型为 object 的非 null 值递归处理，请指定 true，此时返回一个多维数组；\n        否则指定为 false，此时为返回一个一维数组。", "type": "boolean", "name": "isDeep", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "getValues", "params": [{ "title": "param", "desc": "要进行获取值的对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否要进行递归获取。\n        如果要对成员中值类型为 object 的非 null 值递归处理，请指定 true，此时返回一个多维数组；\n        否则指定为 false，此时为返回一个一维数组。", "type": "boolean", "name": "isDeep", "isOptional": true, "defaultValue": "false" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "获取指定对象的所有成员中的键和值，返回一个二元组 [key, value] 的数组。", "alias": "MiniQuery.Object.getItems", "id": 672, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 获取指定对象的所有成员中的键和值，返回一个二元组 [key, value] 的数组。", "param {Object} obj 要进行获取值的对象。", "param {boolean} [isDeep=false] 指示是否要进行递归获取。\n        如果要对成员中值类型为 object 的非 null 值递归处理，请指定 true，此时返回一个多维数组；\n        否则指定为 false，此时为返回一个一维数组。", "return 返回一个由二元组 [key, value] 组成的数组。\n    "], "src": "\n@desc 获取指定对象的所有成员中的键和值，返回一个二元组 [key, value] 的数组。\n@param {Object} obj 要进行获取值的对象。\n@param {boolean} [isDeep=false] 指示是否要进行递归获取。\n        如果要对成员中值类型为 object 的非 null 值递归处理，请指定 true，此时返回一个多维数组；\n        否则指定为 false，此时为返回一个一维数组。\n@return 返回一个由二元组 [key, value] 组成的数组。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "获取指定对象的所有成员中的键和值，返回一个二元组 [key, value] 的数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行获取值的对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否要进行递归获取。\n        如果要对成员中值类型为 object 的非 null 值递归处理，请指定 true，此时返回一个多维数组；\n        否则指定为 false，此时为返回一个一维数组。", "type": "boolean", "name": "isDeep", "isOptional": true, "defaultValue": "false" }, { "title": "return", "desc": "返回一个由二元组 [key, value] 组成的数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "返回一个由二元组 [key, value] 组成的数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "getItems", "_params": [{ "title": "param", "desc": "要进行获取值的对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否要进行递归获取。\n        如果要对成员中值类型为 object 的非 null 值递归处理，请指定 true，此时返回一个多维数组；\n        否则指定为 false，此时为返回一个一维数组。", "type": "boolean", "name": "isDeep", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "getItems", "params": [{ "title": "param", "desc": "要进行获取值的对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否要进行递归获取。\n        如果要对成员中值类型为 object 的非 null 值递归处理，请指定 true，此时返回一个多维数组；\n        否则指定为 false，此时为返回一个一维数组。", "type": "boolean", "name": "isDeep", "isOptional": true, "defaultValue": "false" }] }, { "type": "String", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把一个对象的名称-值对转成用指定分隔符连起来的字符串。", "alias": "MiniQuery.Object.join", "id": 673, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 把一个对象的名称-值对转成用指定分隔符连起来的字符串。", "param {Object} nameValues 键值表 ", "param {String} [nameValueSeparator='='] name_value 的分隔符。 \n        如果不指定则默认为 \"=\" 号", "param {String} [pairSeparator='&'] 键值对的分隔符。\n        如果不指定则默认为 \"&\" 号", "return {String} 用分隔符进行连接的字符串。", "example \n        var a = $.Object.join( {a:1, b:2, c:3}, '=', '&' ); //得到 'a=1&b=2&c=3'\n        var b = $.Object.join( {a:1, b:2, c:3} );   //得到 'a=1&b=2&c=3'\n    "], "src": "\n@desc 把一个对象的名称-值对转成用指定分隔符连起来的字符串。\n@param {Object} nameValues 键值表 \n@param {String} [nameValueSeparator='='] name_value 的分隔符。 \n        如果不指定则默认为 \"=\" 号\n@param {String} [pairSeparator='&'] 键值对的分隔符。\n        如果不指定则默认为 \"&\" 号\n@return {String} 用分隔符进行连接的字符串。\n@example \n        var a = $.Object.join( {a:1, b:2, c:3}, '=', '&' ); //得到 'a=1&b=2&c=3'\n        var b = $.Object.join( {a:1, b:2, c:3} );   //得到 'a=1&b=2&c=3'\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把一个对象的名称-值对转成用指定分隔符连起来的字符串。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "键值表", "type": "Object", "name": "nameValues", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "name_value 的分隔符。 \n        如果不指定则默认为 \"=\" 号", "type": "String", "name": "nameValueSeparator", "isOptional": true, "defaultValue": "'='" }, { "title": "param", "desc": "键值对的分隔符。\n        如果不指定则默认为 \"&\" 号", "type": "String", "name": "pairSeparator", "isOptional": true, "defaultValue": "'&'" }, { "title": "return", "desc": "用分隔符进行连接的字符串。", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var a = $.Object.join( {a:1, b:2, c:3}, '=', '&' ); //得到 'a=1&b=2&c=3'\n        var b = $.Object.join( {a:1, b:2, c:3} );   //得到 'a=1&b=2&c=3'", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "用分隔符进行连接的字符串。", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "join", "_params": [{ "title": "param", "desc": "键值表", "type": "Object", "name": "nameValues", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "name_value 的分隔符。 \n        如果不指定则默认为 \"=\" 号", "type": "String", "name": "nameValueSeparator", "isOptional": true, "defaultValue": "'='" }, { "title": "param", "desc": "键值对的分隔符。\n        如果不指定则默认为 \"&\" 号", "type": "String", "name": "pairSeparator", "isOptional": true, "defaultValue": "'&'" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var a = $.Object.join( {a:1, b:2, c:3}, '=', '&' ); //得到 'a=1&b=2&c=3'\n        var b = $.Object.join( {a:1, b:2, c:3} );   //得到 'a=1&b=2&c=3'", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "join", "params": [{ "title": "param", "desc": "键值表", "type": "Object", "name": "nameValues", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "name_value 的分隔符。 \n        如果不指定则默认为 \"=\" 号", "type": "String", "name": "nameValueSeparator", "isOptional": true, "defaultValue": "'='" }, { "title": "param", "desc": "键值对的分隔符。\n        如果不指定则默认为 \"&\" 号", "type": "String", "name": "pairSeparator", "isOptional": true, "defaultValue": "'&'" }] }, { "type": "Object", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "重写一个对象。\n该方法会清空被重写的对象，然后把目标对象的成员拷贝到被重写的对象。", "alias": "MiniQuery.Object.overwrite", "id": 677, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 重写一个对象。\n该方法会清空被重写的对象，然后把目标对象的成员拷贝到被重写的对象。", "param {Object} src 被重写的对象。 ", "param {Object} dest 目标对象。 ", "return {Object} 返回被重写的那个对象。", "example \n        var a = { a: 1, b: 2, c: 3 };\n        var b = { d: 4, e: 5 };\n        var c = $.Object.overwrite(a, b);\n\n        console.log(a === b); //false\n        console.log(a === c); //true\n        console.dir(a); // { d: 4, e: 5 }\n        console.dir(c); // { d: 4, e: 5 }\n\n    "], "src": "\n@desc 重写一个对象。\n该方法会清空被重写的对象，然后把目标对象的成员拷贝到被重写的对象。\n@param {Object} src 被重写的对象。 \n@param {Object} dest 目标对象。 \n@return {Object} 返回被重写的那个对象。\n@example \n        var a = { a: 1, b: 2, c: 3 };\n        var b = { d: 4, e: 5 };\n        var c = $.Object.overwrite(a, b);\n\n        console.log(a === b); //false\n        console.log(a === c); //true\n        console.dir(a); // { d: 4, e: 5 }\n        console.dir(c); // { d: 4, e: 5 }\n\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "重写一个对象。\n该方法会清空被重写的对象，然后把目标对象的成员拷贝到被重写的对象。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "被重写的对象。", "type": "Object", "name": "src", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "目标对象。", "type": "Object", "name": "dest", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回被重写的那个对象。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var a = { a: 1, b: 2, c: 3 };\n        var b = { d: 4, e: 5 };\n        var c = $.Object.overwrite(a, b);\n\n        console.log(a === b); //false\n        console.log(a === c); //true\n        console.dir(a); // { d: 4, e: 5 }\n        console.dir(c); // { d: 4, e: 5 }", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Object", "since": "", "returns": [{ "title": "return", "desc": "返回被重写的那个对象。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "FUNCTION", "_name": "overwrite", "_params": [{ "title": "param", "desc": "被重写的对象。", "type": "Object", "name": "src", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "目标对象。", "type": "Object", "name": "dest", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var a = { a: 1, b: 2, c: 3 };\n        var b = { d: 4, e: 5 };\n        var c = $.Object.overwrite(a, b);\n\n        console.log(a === b); //false\n        console.log(a === c); //true\n        console.dir(a); // { d: 4, e: 5 }\n        console.dir(c); // { d: 4, e: 5 }", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "overwrite", "params": [{ "title": "param", "desc": "被重写的对象。", "type": "Object", "name": "src", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "目标对象。", "type": "Object", "name": "dest", "isOptional": false, "defaultValue": "" }] }], "comment": { "tagTexts": ["desc 对象工具", "class", "param {Object} obj 要进行包装的对象", "return {MiniQuery.Object} 返回一个经过包装后的 MiniQuery.Object 对象", "example\n    $.Object( {a:1, b:2} );\n或  new $.Object( {a:1, b:2} );\n"], "src": "\n@desc 对象工具\n@class\n@param {Object} obj 要进行包装的对象\n@return {MiniQuery.Object} 返回一个经过包装后的 MiniQuery.Object 对象\n@example\n    $.Object( {a:1, b:2} );\n或  new $.Object( {a:1, b:2} );\n", "meta": "", "tags": [{ "title": "desc", "desc": "对象工具", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "class", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行包装的对象", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个经过包装后的 MiniQuery.Object 对象", "type": "MiniQuery.Object", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n    $.Object( {a:1, b:2} );\n或  new $.Object( {a:1, b:2} );", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery", "since": "", "returns": [{ "title": "return", "desc": "返回一个经过包装后的 MiniQuery.Object 对象", "type": "MiniQuery.Object", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\Object.js", "exceptions": [], "isa": "CONSTRUCTOR", "_name": "Object", "_params": [{ "title": "param", "desc": "要进行包装的对象", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n    $.Object( {a:1, b:2} );\n或  new $.Object( {a:1, b:2} );", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "Object", "params": [{ "title": "param", "desc": "要进行包装的对象", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": true, "augments": [], "fires": [], "desc": "Script 脚本工具", "alias": "MiniQuery.Script", "id": 1337, "isStatic": true, "see": [], "methods": [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "跨浏览器动态加载 JS 文件，并在加载完成后执行指定的回调函数。", "alias": "MiniQuery.Script.load", "id": 1370, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 跨浏览器动态加载 JS 文件，并在加载完成后执行指定的回调函数。", "memberOf MiniQuery.Script", "param {string|Array} params.url \n            要加载的 JS 文件的 url 地址，如果要批量加载，则为一个地址数组。", "param {string} [params.charset=\"utf-8\"] \n            要加载的 JS 文件的字符编码，默认为 utf-8。", "param {Document} [params.document=window.document] \n            要加载的 JS 文件的上下文环境的 document，默认为当前窗口的 document 对象。", "param {function} [params.onload] \n            加载成功后的回调函数。", "example\n            $.Script.load({\n                url: 'a.js',\n                charset: 'utf-8',\n                document: document,\n                id: 'myScript',\n                onload: function (){ }\n            });\n\n            $.Script.load('a.js', 'utf-8', document, function(){});\n            $.Script.load('a.js', 'utf-8', function(){});\n            $.Script.load('a.js', document, function(){});\n            $.Script.load('a.js', function(){});\n\n            //批量加载\n            $.Script.load(['a.js', 'b.js'], function(){});\n        "], "src": "\n@desc 跨浏览器动态加载 JS 文件，并在加载完成后执行指定的回调函数。\n@memberOf MiniQuery.Script\n@param {string|Array} params.url \n            要加载的 JS 文件的 url 地址，如果要批量加载，则为一个地址数组。\n@param {string} [params.charset=\"utf-8\"] \n            要加载的 JS 文件的字符编码，默认为 utf-8。\n@param {Document} [params.document=window.document] \n            要加载的 JS 文件的上下文环境的 document，默认为当前窗口的 document 对象。\n@param {function} [params.onload] \n            加载成功后的回调函数。\n@example\n            $.Script.load({\n                url: 'a.js',\n                charset: 'utf-8',\n                document: document,\n                id: 'myScript',\n                onload: function (){ }\n            });\n\n            $.Script.load('a.js', 'utf-8', document, function(){});\n            $.Script.load('a.js', 'utf-8', function(){});\n            $.Script.load('a.js', document, function(){});\n            $.Script.load('a.js', function(){});\n\n            //批量加载\n            $.Script.load(['a.js', 'b.js'], function(){});\n        ", "meta": "", "tags": [{ "title": "desc", "desc": "跨浏览器动态加载 JS 文件，并在加载完成后执行指定的回调函数。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "memberOf", "desc": "MiniQuery.Script", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要加载的 JS 文件的 url 地址，如果要批量加载，则为一个地址数组。", "type": "string|Array", "name": "params.url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要加载的 JS 文件的字符编码，默认为 utf-8。", "type": "string", "name": "params.charset", "isOptional": true, "defaultValue": "\"utf-8\"" }, { "title": "param", "desc": "要加载的 JS 文件的上下文环境的 document，默认为当前窗口的 document 对象。", "type": "Document", "name": "params.document", "isOptional": true, "defaultValue": "window.document" }, { "title": "param", "desc": "加载成功后的回调函数。", "type": "function", "name": "params.onload", "isOptional": true, "defaultValue": "" }, { "title": "example", "desc": "\n            $.Script.load({\n                url: 'a.js',\n                charset: 'utf-8',\n                document: document,\n                id: 'myScript',\n                onload: function (){ }\n            });\n\n            $.Script.load('a.js', 'utf-8', document, function(){});\n            $.Script.load('a.js', 'utf-8', function(){});\n            $.Script.load('a.js', document, function(){});\n            $.Script.load('a.js', function(){});\n\n            //批量加载\n            $.Script.load(['a.js', 'b.js'], function(){});", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Script", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\Script.js", "exceptions": [], "isa": "FUNCTION", "_name": "load", "_params": [{ "title": "param", "desc": "要加载的 JS 文件的 url 地址，如果要批量加载，则为一个地址数组。", "type": "string|Array", "name": "params.url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要加载的 JS 文件的字符编码，默认为 utf-8。", "type": "string", "name": "params.charset", "isOptional": true, "defaultValue": "\"utf-8\"" }, { "title": "param", "desc": "要加载的 JS 文件的上下文环境的 document，默认为当前窗口的 document 对象。", "type": "Document", "name": "params.document", "isOptional": true, "defaultValue": "window.document" }, { "title": "param", "desc": "加载成功后的回调函数。", "type": "function", "name": "params.onload", "isOptional": true, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n            $.Script.load({\n                url: 'a.js',\n                charset: 'utf-8',\n                document: document,\n                id: 'myScript',\n                onload: function (){ }\n            });\n\n            $.Script.load('a.js', 'utf-8', document, function(){});\n            $.Script.load('a.js', 'utf-8', function(){});\n            $.Script.load('a.js', document, function(){});\n            $.Script.load('a.js', function(){});\n\n            //批量加载\n            $.Script.load(['a.js', 'b.js'], function(){});", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "load", "params": [{ "title": "param", "desc": "要加载的 JS 文件的 url 地址，如果要批量加载，则为一个地址数组。", "type": "string|Array", "name": "params.url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要加载的 JS 文件的字符编码，默认为 utf-8。", "type": "string", "name": "params.charset", "isOptional": true, "defaultValue": "\"utf-8\"" }, { "title": "param", "desc": "要加载的 JS 文件的上下文环境的 document，默认为当前窗口的 document 对象。", "type": "Document", "name": "params.document", "isOptional": true, "defaultValue": "window.document" }, { "title": "param", "desc": "加载成功后的回调函数。", "type": "function", "name": "params.onload", "isOptional": true, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "创建一个 script 标签，并插入 JavaScript 代码。", "alias": "MiniQuery.Script.insert", "id": 1380, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 创建一个 script 标签，并插入 JavaScript 代码。", "param {string} params.code 要插入的 JS 代码。", "param {string} [params.id] 创建的 script 标签中的 id。", "param {Document} [params.document=window.document] \n            创建的 script 标签的上下文环境的 document。默认为当前窗口的 document 对象。", "example\n            $.Script.insert({\n                code: 'alert(0);',\n                id: 'myScript',\n                document: document\n            });\n            $.Script.insert('alert(0);', 'myScript', document);\n            $.Script.insert('alert(0);', 'myScript');\n            $.Script.insert('alert(0);', document);\n        "], "src": "\n@desc 创建一个 script 标签，并插入 JavaScript 代码。\n@param {string} params.code 要插入的 JS 代码。\n@param {string} [params.id] 创建的 script 标签中的 id。\n@param {Document} [params.document=window.document] \n            创建的 script 标签的上下文环境的 document。默认为当前窗口的 document 对象。\n@example\n            $.Script.insert({\n                code: 'alert(0);',\n                id: 'myScript',\n                document: document\n            });\n            $.Script.insert('alert(0);', 'myScript', document);\n            $.Script.insert('alert(0);', 'myScript');\n            $.Script.insert('alert(0);', document);\n        ", "meta": "", "tags": [{ "title": "desc", "desc": "创建一个 script 标签，并插入 JavaScript 代码。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要插入的 JS 代码。", "type": "string", "name": "params.code", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "创建的 script 标签中的 id。", "type": "string", "name": "params.id", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "创建的 script 标签的上下文环境的 document。默认为当前窗口的 document 对象。", "type": "Document", "name": "params.document", "isOptional": true, "defaultValue": "window.document" }, { "title": "example", "desc": "\n            $.Script.insert({\n                code: 'alert(0);',\n                id: 'myScript',\n                document: document\n            });\n            $.Script.insert('alert(0);', 'myScript', document);\n            $.Script.insert('alert(0);', 'myScript');\n            $.Script.insert('alert(0);', document);", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Script", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\Script.js", "exceptions": [], "isa": "FUNCTION", "_name": "insert", "_params": [{ "title": "param", "desc": "要插入的 JS 代码。", "type": "string", "name": "params.code", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "创建的 script 标签中的 id。", "type": "string", "name": "params.id", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "创建的 script 标签的上下文环境的 document。默认为当前窗口的 document 对象。", "type": "Document", "name": "params.document", "isOptional": true, "defaultValue": "window.document" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n            $.Script.insert({\n                code: 'alert(0);',\n                id: 'myScript',\n                document: document\n            });\n            $.Script.insert('alert(0);', 'myScript', document);\n            $.Script.insert('alert(0);', 'myScript');\n            $.Script.insert('alert(0);', document);", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "insert", "params": [{ "title": "param", "desc": "要插入的 JS 代码。", "type": "string", "name": "params.code", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "创建的 script 标签中的 id。", "type": "string", "name": "params.id", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "创建的 script 标签的上下文环境的 document。默认为当前窗口的 document 对象。", "type": "Document", "name": "params.document", "isOptional": true, "defaultValue": "window.document" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "用 document.write 的方式加载 JS 文件。", "alias": "MiniQuery.Script.write", "id": 1393, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 用 document.write 的方式加载 JS 文件。", "memberOf MiniQuery.Script", "param {string|Array} params.url \n            要加载的 JS 文件的 url 地址，如果要批量加载，则为一个地址数组。", "param {string} [params.charset=\"utf-8\"] \n            要加载的 JS 文件的字符编码，默认为 utf-8。", "param {Document} [params.document=window.document] \n            要加载的 JS 文件的上下文环境的 document，默认为当前窗口的 document 对象。", "example\n            $.Script.write({\n                url: 'a.js',\n                charset: 'utf-8',\n                document: document\n            });\n            $.Script.write('a.js', 'utf-8', document);\n            $.Script.write('a.js', 'utf-8');\n            $.Script.write('a.js', document);\n        "], "src": "\n@desc 用 document.write 的方式加载 JS 文件。\n@memberOf MiniQuery.Script\n@param {string|Array} params.url \n            要加载的 JS 文件的 url 地址，如果要批量加载，则为一个地址数组。\n@param {string} [params.charset=\"utf-8\"] \n            要加载的 JS 文件的字符编码，默认为 utf-8。\n@param {Document} [params.document=window.document] \n            要加载的 JS 文件的上下文环境的 document，默认为当前窗口的 document 对象。\n@example\n            $.Script.write({\n                url: 'a.js',\n                charset: 'utf-8',\n                document: document\n            });\n            $.Script.write('a.js', 'utf-8', document);\n            $.Script.write('a.js', 'utf-8');\n            $.Script.write('a.js', document);\n        ", "meta": "", "tags": [{ "title": "desc", "desc": "用 document.write 的方式加载 JS 文件。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "memberOf", "desc": "MiniQuery.Script", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要加载的 JS 文件的 url 地址，如果要批量加载，则为一个地址数组。", "type": "string|Array", "name": "params.url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要加载的 JS 文件的字符编码，默认为 utf-8。", "type": "string", "name": "params.charset", "isOptional": true, "defaultValue": "\"utf-8\"" }, { "title": "param", "desc": "要加载的 JS 文件的上下文环境的 document，默认为当前窗口的 document 对象。", "type": "Document", "name": "params.document", "isOptional": true, "defaultValue": "window.document" }, { "title": "example", "desc": "\n            $.Script.write({\n                url: 'a.js',\n                charset: 'utf-8',\n                document: document\n            });\n            $.Script.write('a.js', 'utf-8', document);\n            $.Script.write('a.js', 'utf-8');\n            $.Script.write('a.js', document);", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Script", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\Script.js", "exceptions": [], "isa": "FUNCTION", "_name": "write", "_params": [{ "title": "param", "desc": "要加载的 JS 文件的 url 地址，如果要批量加载，则为一个地址数组。", "type": "string|Array", "name": "params.url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要加载的 JS 文件的字符编码，默认为 utf-8。", "type": "string", "name": "params.charset", "isOptional": true, "defaultValue": "\"utf-8\"" }, { "title": "param", "desc": "要加载的 JS 文件的上下文环境的 document，默认为当前窗口的 document 对象。", "type": "Document", "name": "params.document", "isOptional": true, "defaultValue": "window.document" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n            $.Script.write({\n                url: 'a.js',\n                charset: 'utf-8',\n                document: document\n            });\n            $.Script.write('a.js', 'utf-8', document);\n            $.Script.write('a.js', 'utf-8');\n            $.Script.write('a.js', document);", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "write", "params": [{ "title": "param", "desc": "要加载的 JS 文件的 url 地址，如果要批量加载，则为一个地址数组。", "type": "string|Array", "name": "params.url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要加载的 JS 文件的字符编码，默认为 utf-8。", "type": "string", "name": "params.charset", "isOptional": true, "defaultValue": "\"utf-8\"" }, { "title": "param", "desc": "要加载的 JS 文件的上下文环境的 document，默认为当前窗口的 document 对象。", "type": "Document", "name": "params.document", "isOptional": true, "defaultValue": "window.document" }] }], "comment": { "tagTexts": ["desc Script 脚本工具", "namespace\n"], "src": "\n@desc Script 脚本工具\n@namespace\n", "meta": "", "tags": [{ "title": "desc", "desc": "Script 脚本工具", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "namespace", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\Script.js", "exceptions": [], "isa": "OBJECT", "_name": "Script", "_params": [{ "title": "param", "desc": "", "type": "", "name": "$", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "This", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "scopeType": "INSTANCE", "properties": [], "name": "Script", "params": [{ "title": "param", "desc": "", "type": "", "name": "$", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "This", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": true, "augments": [], "fires": [], "desc": "会话存储工具类", "alias": "MiniQuery.SessionStorage", "id": 1405, "isStatic": true, "see": [], "methods": [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.SessionStorage-set", "id": 1409, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.SessionStorage", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\SessionStorage.js", "exceptions": [], "isa": "FUNCTION", "_name": "set", "_params": [{ "title": "param", "desc": "", "type": "", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "value", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "set", "params": [{ "title": "param", "desc": "", "type": "", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "value", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.SessionStorage-get", "id": 1411, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.SessionStorage", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\SessionStorage.js", "exceptions": [], "isa": "FUNCTION", "_name": "get", "_params": [{ "title": "param", "desc": "", "type": "", "name": "key", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "get", "params": [{ "title": "param", "desc": "", "type": "", "name": "key", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.SessionStorage-remove", "id": 1412, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.SessionStorage", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\SessionStorage.js", "exceptions": [], "isa": "FUNCTION", "_name": "remove", "_params": [{ "title": "param", "desc": "", "type": "", "name": "key", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "remove", "params": [{ "title": "param", "desc": "", "type": "", "name": "key", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.SessionStorage-clear", "id": 1414, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.SessionStorage", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\SessionStorage.js", "exceptions": [], "isa": "FUNCTION", "_name": "clear", "_params": [], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "clear", "params": [] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.SessionStorage-each", "id": 1417, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.SessionStorage", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\SessionStorage.js", "exceptions": [], "isa": "FUNCTION", "_name": "each", "_params": [{ "title": "param", "desc": "", "type": "", "name": "fn", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "each", "params": [{ "title": "param", "desc": "", "type": "", "name": "fn", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.SessionStorage-keys", "id": 1418, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.SessionStorage", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\SessionStorage.js", "exceptions": [], "isa": "FUNCTION", "_name": "keys", "_params": [], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "keys", "params": [] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.SessionStorage-key", "id": 1420, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.SessionStorage", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\SessionStorage.js", "exceptions": [], "isa": "FUNCTION", "_name": "key", "_params": [{ "title": "param", "desc": "", "type": "", "name": "index", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "key", "params": [{ "title": "param", "desc": "", "type": "", "name": "index", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.SessionStorage-length", "id": 1421, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.SessionStorage", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\SessionStorage.js", "exceptions": [], "isa": "FUNCTION", "_name": "length", "_params": [], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "length", "params": [] }], "comment": { "tagTexts": ["desc 会话存储工具类", "namespace\n"], "src": "\n@desc 会话存储工具类\n@namespace\n", "meta": "", "tags": [{ "title": "desc", "desc": "会话存储工具类", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "namespace", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\SessionStorage.js", "exceptions": [], "isa": "OBJECT", "_name": "SessionStorage", "_params": [{ "title": "param", "desc": "", "type": "", "name": "sessionStorage", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "scopeType": "INSTANCE", "properties": [], "name": "SessionStorage", "params": [{ "title": "param", "desc": "", "type": "", "name": "sessionStorage", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "有限状态机类", "alias": "MiniQuery.States", "id": 1130, "isStatic": true, "see": [], "methods": [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把当前状态转换到指定的状态。", "alias": "MiniQuery.States#to", "id": 1176, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc 把当前状态转换到指定的状态。", "param {string} name 要转换到的目标状态。", "param {Array} [args] 要向状态转换时触发的处理函数传递的参数数组。", "example\n\n        "], "src": "\n@desc 把当前状态转换到指定的状态。\n@param {string} name 要转换到的目标状态。\n@param {Array} [args] 要向状态转换时触发的处理函数传递的参数数组。\n@example\n\n        ", "meta": "", "tags": [{ "title": "desc", "desc": "把当前状态转换到指定的状态。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要转换到的目标状态。", "type": "string", "name": "name", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要向状态转换时触发的处理函数传递的参数数组。", "type": "Array", "name": "args", "isOptional": true, "defaultValue": "" }, { "title": "example", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.States", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\States.js", "exceptions": [], "isa": "FUNCTION", "_name": "to", "_params": [{ "title": "param", "desc": "要转换到的目标状态。", "type": "string", "name": "name", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要向状态转换时触发的处理函数传递的参数数组。", "type": "Array", "name": "args", "isOptional": true, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "to", "params": [{ "title": "param", "desc": "要转换到的目标状态。", "type": "string", "name": "name", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要向状态转换时触发的处理函数传递的参数数组。", "type": "Array", "name": "args", "isOptional": true, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.States#backward", "id": 1178, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.States", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\States.js", "exceptions": [], "isa": "FUNCTION", "_name": "backward", "_params": [{ "title": "param", "desc": "", "type": "", "name": "args", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "backward", "params": [{ "title": "param", "desc": "", "type": "", "name": "args", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.States#current", "id": 1181, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.States", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\States.js", "exceptions": [], "isa": "FUNCTION", "_name": "current", "_params": [], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "current", "params": [] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.States#has", "id": 1183, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.States", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\States.js", "exceptions": [], "isa": "FUNCTION", "_name": "has", "_params": [{ "title": "param", "desc": "", "type": "", "name": "from", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "to", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "has", "params": [{ "title": "param", "desc": "", "type": "", "name": "from", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "to", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.States#states", "id": 1186, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.States", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\States.js", "exceptions": [], "isa": "FUNCTION", "_name": "states", "_params": [], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "states", "params": [] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.States#paths", "id": 1188, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.States", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\States.js", "exceptions": [], "isa": "FUNCTION", "_name": "paths", "_params": [], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "paths", "params": [] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.States#histories", "id": 1190, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.States", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\States.js", "exceptions": [], "isa": "FUNCTION", "_name": "histories", "_params": [], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "histories", "params": [] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.States#length", "id": 1192, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.States", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\States.js", "exceptions": [], "isa": "FUNCTION", "_name": "length", "_params": [], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "length", "params": [] }], "comment": { "tagTexts": ["desc 有限状态机类", "class\n有限状态机是一个非常有用的模型，可以模拟世界上大部分事物。\n简单说，它有三个特征：\n  1.状态总数（state）是有限的。\n  2.任一时刻，只处在一种状态之中。\n  3.状态转换规则是确定的。\n它对 JavaScript 的意义在于，很多对象可以写成有限状态机。\n当对象的状态发生变化时，可以触发特定事件进行回调函数的调用。\n有限状态机的写法，逻辑清晰，表达力强，有利于封装事件。\n一个对象的状态越多、发生的事件越多，就越适合采用有限状态机的写法。\n"], "src": "\n@desc 有限状态机类\n@class\n有限状态机是一个非常有用的模型，可以模拟世界上大部分事物。\n简单说，它有三个特征：\n  1.状态总数（state）是有限的。\n  2.任一时刻，只处在一种状态之中。\n  3.状态转换规则是确定的。\n它对 JavaScript 的意义在于，很多对象可以写成有限状态机。\n当对象的状态发生变化时，可以触发特定事件进行回调函数的调用。\n有限状态机的写法，逻辑清晰，表达力强，有利于封装事件。\n一个对象的状态越多、发生的事件越多，就越适合采用有限状态机的写法。\n", "meta": "", "tags": [{ "title": "desc", "desc": "有限状态机类", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "class", "desc": "有限状态机是一个非常有用的模型，可以模拟世界上大部分事物。\n简单说，它有三个特征：\n  1.状态总数（state）是有限的。\n  2.任一时刻，只处在一种状态之中。\n  3.状态转换规则是确定的。\n它对 JavaScript 的意义在于，很多对象可以写成有限状态机。\n当对象的状态发生变化时，可以触发特定事件进行回调函数的调用。\n有限状态机的写法，逻辑清晰，表达力强，有利于封装事件。\n一个对象的状态越多、发生的事件越多，就越适合采用有限状态机的写法。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery", "since": "", "returns": [], "classDesc": "有限状态机是一个非常有用的模型，可以模拟世界上大部分事物。\n简单说，它有三个特征：\n  1.状态总数（state）是有限的。\n  2.任一时刻，只处在一种状态之中。\n  3.状态转换规则是确定的。\n它对 JavaScript 的意义在于，很多对象可以写成有限状态机。\n当对象的状态发生变化时，可以触发特定事件进行回调函数的调用。\n有限状态机的写法，逻辑清晰，表达力强，有利于封装事件。\n一个对象的状态越多、发生的事件越多，就越适合采用有限状态机的写法。", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\States.js", "exceptions": [], "isa": "CONSTRUCTOR", "_name": "States", "_params": [{ "title": "param", "desc": "", "type": "", "name": "$", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "Mapper", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "scopeType": "INSTANCE", "properties": [], "name": "States", "params": [{ "title": "param", "desc": "", "type": "", "name": "$", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "Mapper", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "字符串工具类", "alias": "MiniQuery.String", "id": 756, "isStatic": true, "see": [], "methods": [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "用指定的值去填充一个字符串。\n当不指定字符串的填充标记时，则默认为 {}。", "alias": "MiniQuery.String.format", "id": 760, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 用指定的值去填充一个字符串。\n当不指定字符串的填充标记时，则默认为 {}。", "param {String} string 要进行格式填充的字符串模板。", "param {Object} obj 要填充的键值对的对象。", "return 返回一个用值去填充后的字符串。", "example\n用法：\n        $.String.format('{id}{type}', {id: 1, type: 'app'});\n        $.String.format('{2}{0}{1}', 'a', 'b', 'c');\n    "], "src": "\n@desc 用指定的值去填充一个字符串。\n当不指定字符串的填充标记时，则默认为 {}。\n@param {String} string 要进行格式填充的字符串模板。\n@param {Object} obj 要填充的键值对的对象。\n@return 返回一个用值去填充后的字符串。\n@example\n用法：\n        $.String.format('{id}{type}', {id: 1, type: 'app'});\n        $.String.format('{2}{0}{1}', 'a', 'b', 'c');\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "用指定的值去填充一个字符串。\n当不指定字符串的填充标记时，则默认为 {}。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行格式填充的字符串模板。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要填充的键值对的对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个用值去填充后的字符串。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "用法：\n        $.String.format('{id}{type}', {id: 1, type: 'app'});\n        $.String.format('{2}{0}{1}', 'a', 'b', 'c');", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "返回一个用值去填充后的字符串。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "format", "_params": [{ "title": "param", "desc": "要进行格式填充的字符串模板。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要填充的键值对的对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "arg2", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "用法：\n        $.String.format('{id}{type}', {id: 1, type: 'app'});\n        $.String.format('{2}{0}{1}', 'a', 'b', 'c');", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "format", "params": [{ "title": "param", "desc": "要进行格式填充的字符串模板。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要填充的键值对的对象。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "arg2", "isOptional": false, "defaultValue": "" }] }, { "type": "String", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "对字符串进行全局替换。", "alias": "MiniQuery.String.replaceAll", "id": 767, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 对字符串进行全局替换。", "param {String} target 要进行替换的目标字符串。", "param {String} src 要进行替换的子串，旧值。", "param {String} dest 要进行替换的新子串，新值。", "return {String} 返回一个替换后的字符串。", "example\n        $.String.replaceAll('abcdeabc', 'bc', 'BC') //结果为 aBCdeBC\n    "], "src": "\n@desc 对字符串进行全局替换。\n@param {String} target 要进行替换的目标字符串。\n@param {String} src 要进行替换的子串，旧值。\n@param {String} dest 要进行替换的新子串，新值。\n@return {String} 返回一个替换后的字符串。\n@example\n        $.String.replaceAll('abcdeabc', 'bc', 'BC') //结果为 aBCdeBC\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "对字符串进行全局替换。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行替换的目标字符串。", "type": "String", "name": "target", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行替换的子串，旧值。", "type": "String", "name": "src", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行替换的新子串，新值。", "type": "String", "name": "dest", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个替换后的字符串。", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.String.replaceAll('abcdeabc', 'bc', 'BC') //结果为 aBCdeBC", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "返回一个替换后的字符串。", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "replaceAll", "_params": [{ "title": "param", "desc": "要进行替换的目标字符串。", "type": "String", "name": "target", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行替换的子串，旧值。", "type": "String", "name": "src", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行替换的新子串，新值。", "type": "String", "name": "dest", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.String.replaceAll('abcdeabc', 'bc', 'BC') //结果为 aBCdeBC", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "replaceAll", "params": [{ "title": "param", "desc": "要进行替换的目标字符串。", "type": "String", "name": "target", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行替换的子串，旧值。", "type": "String", "name": "src", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行替换的新子串，新值。", "type": "String", "name": "dest", "isOptional": false, "defaultValue": "" }] }, { "type": "String", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "对字符串进行区间内的替换。\n该方法会把整个区间替换成新的字符串，包括区间标记。", "alias": "MiniQuery.String.replaceBetween", "id": 768, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 对字符串进行区间内的替换。\n该方法会把整个区间替换成新的字符串，包括区间标记。", "param {String} string 要进行替换的目标字符串。", "param {String} startTag 区间的开始标记。", "param {String} endTag 区间的结束标记", "param {String} newString 要进行替换的新子串，新值。", "return {String} 返回一个替换后的字符串。<br />\n  当不存在开始标记或结束标记时，都会不进行任何处理而直接返回原字符串。", "example\n        $.String.replaceBetween('hello #--world--# this is #--good--#', '#--', '--#', 'javascript') \n        //结果为 'hello javascript this is javascript'\n    "], "src": "\n@desc 对字符串进行区间内的替换。\n该方法会把整个区间替换成新的字符串，包括区间标记。\n@param {String} string 要进行替换的目标字符串。\n@param {String} startTag 区间的开始标记。\n@param {String} endTag 区间的结束标记\n@param {String} newString 要进行替换的新子串，新值。\n@return {String} 返回一个替换后的字符串。<br />\n  当不存在开始标记或结束标记时，都会不进行任何处理而直接返回原字符串。\n@example\n        $.String.replaceBetween('hello #--world--# this is #--good--#', '#--', '--#', 'javascript') \n        //结果为 'hello javascript this is javascript'\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "对字符串进行区间内的替换。\n该方法会把整个区间替换成新的字符串，包括区间标记。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行替换的目标字符串。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "区间的开始标记。", "type": "String", "name": "startTag", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "区间的结束标记", "type": "String", "name": "endTag", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行替换的新子串，新值。", "type": "String", "name": "newString", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个替换后的字符串。<br />\n  当不存在开始标记或结束标记时，都会不进行任何处理而直接返回原字符串。", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.String.replaceBetween('hello #--world--# this is #--good--#', '#--', '--#', 'javascript') \n        //结果为 'hello javascript this is javascript'", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "返回一个替换后的字符串。<br />\n  当不存在开始标记或结束标记时，都会不进行任何处理而直接返回原字符串。", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "replaceBetween", "_params": [{ "title": "param", "desc": "要进行替换的目标字符串。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "区间的开始标记。", "type": "String", "name": "startTag", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "区间的结束标记", "type": "String", "name": "endTag", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行替换的新子串，新值。", "type": "String", "name": "newString", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.String.replaceBetween('hello #--world--# this is #--good--#', '#--', '--#', 'javascript') \n        //结果为 'hello javascript this is javascript'", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "replaceBetween", "params": [{ "title": "param", "desc": "要进行替换的目标字符串。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "区间的开始标记。", "type": "String", "name": "startTag", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "区间的结束标记", "type": "String", "name": "endTag", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行替换的新子串，新值。", "type": "String", "name": "newString", "isOptional": false, "defaultValue": "" }] }, { "type": "String", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "移除指定的字符子串。", "alias": "MiniQuery.String.removeAll", "id": 773, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 移除指定的字符子串。", "param {String} target 要进行替换的目标字符串。", "param {String|Array} src 要进行移除的子串。\n        支持批量的形式，传一个数组。", "return {String} 返回一个替换后的字符串。", "example\n        $.String.removeAll('hi js hi abc', 'hi') \n        //结果为 ' js  abc'\n    "], "src": "\n@desc 移除指定的字符子串。\n@param {String} target 要进行替换的目标字符串。\n@param {String|Array} src 要进行移除的子串。\n        支持批量的形式，传一个数组。\n@return {String} 返回一个替换后的字符串。\n@example\n        $.String.removeAll('hi js hi abc', 'hi') \n        //结果为 ' js  abc'\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "移除指定的字符子串。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行替换的目标字符串。", "type": "String", "name": "target", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行移除的子串。\n        支持批量的形式，传一个数组。", "type": "String|Array", "name": "src", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个替换后的字符串。", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.String.removeAll('hi js hi abc', 'hi') \n        //结果为 ' js  abc'", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "返回一个替换后的字符串。", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "removeAll", "_params": [{ "title": "param", "desc": "要进行替换的目标字符串。", "type": "String", "name": "target", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行移除的子串。\n        支持批量的形式，传一个数组。", "type": "String|Array", "name": "src", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.String.removeAll('hi js hi abc', 'hi') \n        //结果为 ' js  abc'", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "removeAll", "params": [{ "title": "param", "desc": "要进行替换的目标字符串。", "type": "String", "name": "target", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行移除的子串。\n        支持批量的形式，传一个数组。", "type": "String|Array", "name": "src", "isOptional": false, "defaultValue": "" }] }, { "type": "String", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "从当前 String 对象移除所有前导空白字符和尾部空白字符。", "alias": "MiniQuery.String.trim", "id": 777, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 从当前 String 对象移除所有前导空白字符和尾部空白字符。", "param {String} 要进行操作的字符串。", "return {String} 返回一个新的字符串。", "expample\n        $.String.trim('  abc def mm  '); //结果为 'abc def mm'\n    "], "src": "\n@desc 从当前 String 对象移除所有前导空白字符和尾部空白字符。\n@param {String} 要进行操作的字符串。\n@return {String} 返回一个新的字符串。\n@expample\n        $.String.trim('  abc def mm  '); //结果为 'abc def mm'\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "从当前 String 对象移除所有前导空白字符和尾部空白字符。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "String", "name": "要进行操作的字符串。", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个新的字符串。", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "expample", "desc": "$.String.trim('  abc def mm  '); //结果为 'abc def mm'", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "返回一个新的字符串。", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "trim", "_params": [{ "title": "param", "desc": "", "type": "String", "name": "要进行操作的字符串。", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "trim", "params": [{ "title": "param", "desc": "", "type": "String", "name": "要进行操作的字符串。", "isOptional": false, "defaultValue": "" }] }, { "type": "String", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "从当前 String 对象移除所有前导空白字符。", "alias": "MiniQuery.String.trimStart", "id": 778, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 从当前 String 对象移除所有前导空白字符。", "param {String} 要进行操作的字符串。", "return {String} 返回一个新的字符串。", "expample\n        $.String.trimStart('  abc def mm '); //结果为 'abc def mm  '\n    "], "src": "\n@desc 从当前 String 对象移除所有前导空白字符。\n@param {String} 要进行操作的字符串。\n@return {String} 返回一个新的字符串。\n@expample\n        $.String.trimStart('  abc def mm '); //结果为 'abc def mm  '\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "从当前 String 对象移除所有前导空白字符。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "String", "name": "要进行操作的字符串。", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个新的字符串。", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "expample", "desc": "$.String.trimStart('  abc def mm '); //结果为 'abc def mm  '", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "返回一个新的字符串。", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "trimStart", "_params": [{ "title": "param", "desc": "", "type": "String", "name": "要进行操作的字符串。", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "trimStart", "params": [{ "title": "param", "desc": "", "type": "String", "name": "要进行操作的字符串。", "isOptional": false, "defaultValue": "" }] }, { "type": "String", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "从当前 String 对象移除所有尾部空白字符。", "alias": "MiniQuery.String.trimEnd", "id": 779, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 从当前 String 对象移除所有尾部空白字符。", "param {String} 要进行操作的字符串。", "return {String} 返回一个新的字符串。", "expample\n        $.String.trimEnd('  abc def mm '); //结果为 '  abc def mm'\n    "], "src": "\n@desc 从当前 String 对象移除所有尾部空白字符。\n@param {String} 要进行操作的字符串。\n@return {String} 返回一个新的字符串。\n@expample\n        $.String.trimEnd('  abc def mm '); //结果为 '  abc def mm'\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "从当前 String 对象移除所有尾部空白字符。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "String", "name": "要进行操作的字符串。", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个新的字符串。", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "expample", "desc": "$.String.trimEnd('  abc def mm '); //结果为 '  abc def mm'", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "返回一个新的字符串。", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "trimEnd", "_params": [{ "title": "param", "desc": "", "type": "String", "name": "要进行操作的字符串。", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "trimEnd", "params": [{ "title": "param", "desc": "", "type": "String", "name": "要进行操作的字符串。", "isOptional": false, "defaultValue": "" }] }, { "type": "String", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "右对齐此实例中的字符，在左边用指定的 Unicode 字符填充以达到指定的总长度。\n当指定的总长度小实际长度时，将从右边开始算起，做截断处理，以达到指定的总长度。", "alias": "MiniQuery.String.padLeft", "id": 780, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 右对齐此实例中的字符，在左边用指定的 Unicode 字符填充以达到指定的总长度。\n当指定的总长度小实际长度时，将从右边开始算起，做截断处理，以达到指定的总长度。", "param {String} string 要进行填充对齐的字符串。", "param {Number} totalWidth 填充后要达到的总长度。", "param {String} paddingChar 用来填充的模板字符串。", "return {String} 返回一个经过填充对齐后的新字符串。", "example\n        $.String.padLeft('1234', 6, '0'); //结果为 '001234'，右对齐，从左边填充 '0'\n        $.String.padLeft('1234', 2, '0'); //结果为 '34'，右对齐，从左边开始截断\n    "], "src": "\n@desc 右对齐此实例中的字符，在左边用指定的 Unicode 字符填充以达到指定的总长度。\n当指定的总长度小实际长度时，将从右边开始算起，做截断处理，以达到指定的总长度。\n@param {String} string 要进行填充对齐的字符串。\n@param {Number} totalWidth 填充后要达到的总长度。\n@param {String} paddingChar 用来填充的模板字符串。\n@return {String} 返回一个经过填充对齐后的新字符串。\n@example\n        $.String.padLeft('1234', 6, '0'); //结果为 '001234'，右对齐，从左边填充 '0'\n        $.String.padLeft('1234', 2, '0'); //结果为 '34'，右对齐，从左边开始截断\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "右对齐此实例中的字符，在左边用指定的 Unicode 字符填充以达到指定的总长度。\n当指定的总长度小实际长度时，将从右边开始算起，做截断处理，以达到指定的总长度。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行填充对齐的字符串。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "填充后要达到的总长度。", "type": "Number", "name": "totalWidth", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "用来填充的模板字符串。", "type": "String", "name": "paddingChar", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个经过填充对齐后的新字符串。", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.String.padLeft('1234', 6, '0'); //结果为 '001234'，右对齐，从左边填充 '0'\n        $.String.padLeft('1234', 2, '0'); //结果为 '34'，右对齐，从左边开始截断", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "返回一个经过填充对齐后的新字符串。", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "padLeft", "_params": [{ "title": "param", "desc": "要进行填充对齐的字符串。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "填充后要达到的总长度。", "type": "Number", "name": "totalWidth", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "用来填充的模板字符串。", "type": "String", "name": "paddingChar", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.String.padLeft('1234', 6, '0'); //结果为 '001234'，右对齐，从左边填充 '0'\n        $.String.padLeft('1234', 2, '0'); //结果为 '34'，右对齐，从左边开始截断", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "padLeft", "params": [{ "title": "param", "desc": "要进行填充对齐的字符串。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "填充后要达到的总长度。", "type": "Number", "name": "totalWidth", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "用来填充的模板字符串。", "type": "String", "name": "paddingChar", "isOptional": false, "defaultValue": "" }] }, { "type": "String", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "左对齐此字符串中的字符，在右边用指定的 Unicode 字符填充以达到指定的总长度。\n当指定的总长度小实际长度时，将从左边开始算起，做截断处理，以达到指定的总长度。", "alias": "MiniQuery.String.padRight", "id": 786, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 左对齐此字符串中的字符，在右边用指定的 Unicode 字符填充以达到指定的总长度。\n当指定的总长度小实际长度时，将从左边开始算起，做截断处理，以达到指定的总长度。", "param {String} string 要进行填充对齐的字符串。", "param {Number} totalWidth 填充后要达到的总长度。", "param {String} paddingChar 用来填充的模板字符串。", "return {String} 返回一个经过填充对齐后的新字符串。", "example\n        $.String.padLeft('1234', 6, '0'); //结果为 '123400'，左对齐，从右边填充 '0'\n        $.String.padLeft('1234', 2, '0'); //结果为 '12'，左对齐，从右边开始截断\n    "], "src": "\n@desc 左对齐此字符串中的字符，在右边用指定的 Unicode 字符填充以达到指定的总长度。\n当指定的总长度小实际长度时，将从左边开始算起，做截断处理，以达到指定的总长度。\n@param {String} string 要进行填充对齐的字符串。\n@param {Number} totalWidth 填充后要达到的总长度。\n@param {String} paddingChar 用来填充的模板字符串。\n@return {String} 返回一个经过填充对齐后的新字符串。\n@example\n        $.String.padLeft('1234', 6, '0'); //结果为 '123400'，左对齐，从右边填充 '0'\n        $.String.padLeft('1234', 2, '0'); //结果为 '12'，左对齐，从右边开始截断\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "左对齐此字符串中的字符，在右边用指定的 Unicode 字符填充以达到指定的总长度。\n当指定的总长度小实际长度时，将从左边开始算起，做截断处理，以达到指定的总长度。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行填充对齐的字符串。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "填充后要达到的总长度。", "type": "Number", "name": "totalWidth", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "用来填充的模板字符串。", "type": "String", "name": "paddingChar", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个经过填充对齐后的新字符串。", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.String.padLeft('1234', 6, '0'); //结果为 '123400'，左对齐，从右边填充 '0'\n        $.String.padLeft('1234', 2, '0'); //结果为 '12'，左对齐，从右边开始截断", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "返回一个经过填充对齐后的新字符串。", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "padRight", "_params": [{ "title": "param", "desc": "要进行填充对齐的字符串。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "填充后要达到的总长度。", "type": "Number", "name": "totalWidth", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "用来填充的模板字符串。", "type": "String", "name": "paddingChar", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.String.padLeft('1234', 6, '0'); //结果为 '123400'，左对齐，从右边填充 '0'\n        $.String.padLeft('1234', 2, '0'); //结果为 '12'，左对齐，从右边开始截断", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "padRight", "params": [{ "title": "param", "desc": "要进行填充对齐的字符串。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "填充后要达到的总长度。", "type": "Number", "name": "totalWidth", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "用来填充的模板字符串。", "type": "String", "name": "paddingChar", "isOptional": false, "defaultValue": "" }] }, { "type": "String", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "获取位于两个标记子串之间的子字符串。", "alias": "MiniQuery.String.between", "id": 792, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 获取位于两个标记子串之间的子字符串。", "param {String} string 要进行获取的大串。", "param {String} tag0 区间的开始标记。", "param {String} tag1 区间的结束标记。", "return {String} 返回一个子字符串。当获取不能结果时，统一返回空字符串。", "example\n        $.String.between('abc{!hello!} world', '{!', '!}'); //结果为 'hello' \n    "], "src": "\n@desc 获取位于两个标记子串之间的子字符串。\n@param {String} string 要进行获取的大串。\n@param {String} tag0 区间的开始标记。\n@param {String} tag1 区间的结束标记。\n@return {String} 返回一个子字符串。当获取不能结果时，统一返回空字符串。\n@example\n        $.String.between('abc{!hello!} world', '{!', '!}'); //结果为 'hello' \n    ", "meta": "", "tags": [{ "title": "desc", "desc": "获取位于两个标记子串之间的子字符串。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行获取的大串。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "区间的开始标记。", "type": "String", "name": "tag0", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "区间的结束标记。", "type": "String", "name": "tag1", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个子字符串。当获取不能结果时，统一返回空字符串。", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.String.between('abc{!hello!} world', '{!', '!}'); //结果为 'hello'", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "返回一个子字符串。当获取不能结果时，统一返回空字符串。", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "between", "_params": [{ "title": "param", "desc": "要进行获取的大串。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "区间的开始标记。", "type": "String", "name": "tag0", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "区间的结束标记。", "type": "String", "name": "tag1", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.String.between('abc{!hello!} world', '{!', '!}'); //结果为 'hello'", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "between", "params": [{ "title": "param", "desc": "要进行获取的大串。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "区间的开始标记。", "type": "String", "name": "tag0", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "区间的结束标记。", "type": "String", "name": "tag1", "isOptional": false, "defaultValue": "" }] }, { "type": "string", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "产生指定格式或长度的随机字符串。", "alias": "MiniQuery.String.random", "id": 795, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 产生指定格式或长度的随机字符串。", "param {string|int} [formater=12] 随机字符串的格式，或者长度（默认为12个字符）。\n        格式中的每个随机字符用 'x' 来占位，如 'xxxx-1x2x-xx'", "return {string} 返回一个指定长度的随机字符串。", "example\n        $.String.random();      //返回一个 12 位的随机字符串\n        $.String.random(64);    //返回一个 64 位的随机字符串\n        $.String.random('xxxx-你好xx-xx'); //类似 'A3EA-你好B4-DC'\n    "], "src": "\n@desc 产生指定格式或长度的随机字符串。\n@param {string|int} [formater=12] 随机字符串的格式，或者长度（默认为12个字符）。\n        格式中的每个随机字符用 'x' 来占位，如 'xxxx-1x2x-xx'\n@return {string} 返回一个指定长度的随机字符串。\n@example\n        $.String.random();      //返回一个 12 位的随机字符串\n        $.String.random(64);    //返回一个 64 位的随机字符串\n        $.String.random('xxxx-你好xx-xx'); //类似 'A3EA-你好B4-DC'\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "产生指定格式或长度的随机字符串。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "随机字符串的格式，或者长度（默认为12个字符）。\n        格式中的每个随机字符用 'x' 来占位，如 'xxxx-1x2x-xx'", "type": "string|int", "name": "formater", "isOptional": true, "defaultValue": "12" }, { "title": "return", "desc": "返回一个指定长度的随机字符串。", "type": "string", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.String.random();      //返回一个 12 位的随机字符串\n        $.String.random(64);    //返回一个 64 位的随机字符串\n        $.String.random('xxxx-你好xx-xx'); //类似 'A3EA-你好B4-DC'", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "返回一个指定长度的随机字符串。", "type": "string", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "random", "_params": [{ "title": "param", "desc": "随机字符串的格式，或者长度（默认为12个字符）。\n        格式中的每个随机字符用 'x' 来占位，如 'xxxx-1x2x-xx'", "type": "string|int", "name": "formater", "isOptional": true, "defaultValue": "12" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.String.random();      //返回一个 12 位的随机字符串\n        $.String.random(64);    //返回一个 64 位的随机字符串\n        $.String.random('xxxx-你好xx-xx'); //类似 'A3EA-你好B4-DC'", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "random", "params": [{ "title": "param", "desc": "随机字符串的格式，或者长度（默认为12个字符）。\n        格式中的每个随机字符用 'x' 来占位，如 'xxxx-1x2x-xx'", "type": "string|int", "name": "formater", "isOptional": true, "defaultValue": "12" }] }, { "type": "boolean", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "确定一个字符串的开头是否与指定的字符串匹配。", "alias": "MiniQuery.String.startsWith", "id": 805, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 确定一个字符串的开头是否与指定的字符串匹配。", "param {String} str 要进行判断的大字符串。", "param {String} dest 要进行判断的子字符串，即要检测的开头子串。", "param {boolean} [ignoreCase=false] 指示是否忽略大小写。默认不忽略。", "return {boolean} 返回一个bool值，如果大串中是以小串开头，则返回 true；否则返回 false。", "example\n        $.String.startsWith('abcdef', 'abc') //结果为 true。\n        $.String.startsWith('abcdef', 'Abc', true) //结果为 true。\n    "], "src": "\n@desc 确定一个字符串的开头是否与指定的字符串匹配。\n@param {String} str 要进行判断的大字符串。\n@param {String} dest 要进行判断的子字符串，即要检测的开头子串。\n@param {boolean} [ignoreCase=false] 指示是否忽略大小写。默认不忽略。\n@return {boolean} 返回一个bool值，如果大串中是以小串开头，则返回 true；否则返回 false。\n@example\n        $.String.startsWith('abcdef', 'abc') //结果为 true。\n        $.String.startsWith('abcdef', 'Abc', true) //结果为 true。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "确定一个字符串的开头是否与指定的字符串匹配。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行判断的大字符串。", "type": "String", "name": "str", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行判断的子字符串，即要检测的开头子串。", "type": "String", "name": "dest", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否忽略大小写。默认不忽略。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }, { "title": "return", "desc": "返回一个bool值，如果大串中是以小串开头，则返回 true；否则返回 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.String.startsWith('abcdef', 'abc') //结果为 true。\n        $.String.startsWith('abcdef', 'Abc', true) //结果为 true。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "返回一个bool值，如果大串中是以小串开头，则返回 true；否则返回 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "startsWith", "_params": [{ "title": "param", "desc": "要进行判断的大字符串。", "type": "String", "name": "str", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行判断的子字符串，即要检测的开头子串。", "type": "String", "name": "dest", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否忽略大小写。默认不忽略。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.String.startsWith('abcdef', 'abc') //结果为 true。\n        $.String.startsWith('abcdef', 'Abc', true) //结果为 true。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "startsWith", "params": [{ "title": "param", "desc": "要进行判断的大字符串。", "type": "String", "name": "str", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行判断的子字符串，即要检测的开头子串。", "type": "String", "name": "dest", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否忽略大小写。默认不忽略。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }] }, { "type": "boolean", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "确定一个字符串的末尾是否与指定的字符串匹配。", "alias": "MiniQuery.String.endsWith", "id": 807, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 确定一个字符串的末尾是否与指定的字符串匹配。", "param {String} str 要进行判断的大字符串。", "param {String} dest 要进行判断的子字符串，即要检测的末尾子串。", "param {boolean} [ignoreCase=false] 指示是否忽略大小写。默认不忽略。", "return {boolean} 返回一个bool值，如果大串中是以小串结尾，则返回 true；否则返回 false。", "example\n        $.String.endsWith('abcdef', 'def') //结果为 true。\n        $.String.endsWith('abcdef', 'DEF', true) //结果为 true。\n    "], "src": "\n@desc 确定一个字符串的末尾是否与指定的字符串匹配。\n@param {String} str 要进行判断的大字符串。\n@param {String} dest 要进行判断的子字符串，即要检测的末尾子串。\n@param {boolean} [ignoreCase=false] 指示是否忽略大小写。默认不忽略。\n@return {boolean} 返回一个bool值，如果大串中是以小串结尾，则返回 true；否则返回 false。\n@example\n        $.String.endsWith('abcdef', 'def') //结果为 true。\n        $.String.endsWith('abcdef', 'DEF', true) //结果为 true。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "确定一个字符串的末尾是否与指定的字符串匹配。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行判断的大字符串。", "type": "String", "name": "str", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行判断的子字符串，即要检测的末尾子串。", "type": "String", "name": "dest", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否忽略大小写。默认不忽略。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }, { "title": "return", "desc": "返回一个bool值，如果大串中是以小串结尾，则返回 true；否则返回 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.String.endsWith('abcdef', 'def') //结果为 true。\n        $.String.endsWith('abcdef', 'DEF', true) //结果为 true。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "返回一个bool值，如果大串中是以小串结尾，则返回 true；否则返回 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "endsWith", "_params": [{ "title": "param", "desc": "要进行判断的大字符串。", "type": "String", "name": "str", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行判断的子字符串，即要检测的末尾子串。", "type": "String", "name": "dest", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否忽略大小写。默认不忽略。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.String.endsWith('abcdef', 'def') //结果为 true。\n        $.String.endsWith('abcdef', 'DEF', true) //结果为 true。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "endsWith", "params": [{ "title": "param", "desc": "要进行判断的大字符串。", "type": "String", "name": "str", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行判断的子字符串，即要检测的末尾子串。", "type": "String", "name": "dest", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否忽略大小写。默认不忽略。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }] }, { "type": "boolean", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "确定一个字符串是否包含指定的子字符串。", "alias": "MiniQuery.String.contains", "id": 812, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 确定一个字符串是否包含指定的子字符串。", "param {String} src 要进行检测的大串。", "param {String} target 要进行检测模式子串。", "return {boolean} 返回一个 bool 值。如果大串中包含模式子串，则返回 true；否则返回 false。", "example\n        $.String.contains('javascript is ok', 'scr');   //true\n        $.String.contains('javascript is ok', 'iis');      //false\n    "], "src": "\n@desc 确定一个字符串是否包含指定的子字符串。\n@param {String} src 要进行检测的大串。\n@param {String} target 要进行检测模式子串。\n@return {boolean} 返回一个 bool 值。如果大串中包含模式子串，则返回 true；否则返回 false。\n@example\n        $.String.contains('javascript is ok', 'scr');   //true\n        $.String.contains('javascript is ok', 'iis');      //false\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "确定一个字符串是否包含指定的子字符串。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行检测的大串。", "type": "String", "name": "src", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行检测模式子串。", "type": "String", "name": "target", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个 bool 值。如果大串中包含模式子串，则返回 true；否则返回 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.String.contains('javascript is ok', 'scr');   //true\n        $.String.contains('javascript is ok', 'iis');      //false", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "返回一个 bool 值。如果大串中包含模式子串，则返回 true；否则返回 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "contains", "_params": [{ "title": "param", "desc": "要进行检测的大串。", "type": "String", "name": "src", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行检测模式子串。", "type": "String", "name": "target", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "useOr", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.String.contains('javascript is ok', 'scr');   //true\n        $.String.contains('javascript is ok', 'iis');      //false", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "contains", "params": [{ "title": "param", "desc": "要进行检测的大串。", "type": "String", "name": "src", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行检测模式子串。", "type": "String", "name": "target", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "useOr", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把一个字符串转成骆驼命名法。。\n如 'font-size' 转成 'fontSize'。", "alias": "MiniQuery.String.toCamelCase", "id": 822, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 把一个字符串转成骆驼命名法。。\n如 'font-size' 转成 'fontSize'。", "param {String} string 要进行转换的字符串。", "return 返回一个骆驼命名法的新字符串。", "example\n        $.String.toCamelCase('background-item-color') //结果为 'backgroundItemColor'\n    "], "src": "\n@desc 把一个字符串转成骆驼命名法。。\n如 'font-size' 转成 'fontSize'。\n@param {String} string 要进行转换的字符串。\n@return 返回一个骆驼命名法的新字符串。\n@example\n        $.String.toCamelCase('background-item-color') //结果为 'backgroundItemColor'\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把一个字符串转成骆驼命名法。。\n如 'font-size' 转成 'fontSize'。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行转换的字符串。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个骆驼命名法的新字符串。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.String.toCamelCase('background-item-color') //结果为 'backgroundItemColor'", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "返回一个骆驼命名法的新字符串。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "toCamelCase", "_params": [{ "title": "param", "desc": "要进行转换的字符串。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.String.toCamelCase('background-item-color') //结果为 'backgroundItemColor'", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "toCamelCase", "params": [{ "title": "param", "desc": "要进行转换的字符串。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把一个字符串转成短线连接法。\n如 fontSize 转成 font-size", "alias": "MiniQuery.String.toHyphenate", "id": 826, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 把一个字符串转成短线连接法。\n如 fontSize 转成 font-size", "param {String} string 要进行转换的字符串。", "return 返回一个用短线连接起来的新字符串。", "example\n        $.String.toHyphenate('backgroundItemColor') //结果为 'background-item-color'\n    "], "src": "\n@desc 把一个字符串转成短线连接法。\n如 fontSize 转成 font-size\n@param {String} string 要进行转换的字符串。\n@return 返回一个用短线连接起来的新字符串。\n@example\n        $.String.toHyphenate('backgroundItemColor') //结果为 'background-item-color'\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把一个字符串转成短线连接法。\n如 fontSize 转成 font-size", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行转换的字符串。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个用短线连接起来的新字符串。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.String.toHyphenate('backgroundItemColor') //结果为 'background-item-color'", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "返回一个用短线连接起来的新字符串。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "toHyphenate", "_params": [{ "title": "param", "desc": "要进行转换的字符串。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.String.toHyphenate('backgroundItemColor') //结果为 'background-item-color'", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "toHyphenate", "params": [{ "title": "param", "desc": "要进行转换的字符串。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }] }, { "type": "String", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把一个字符串转成 UTF8 编码。", "alias": "MiniQuery.String.toUtf8", "id": 828, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 把一个字符串转成 UTF8 编码。", "param {String} string 要进行编码的字符串。", "return {String} 返回一个 UTF8 编码的新字符串。", "example\n        $.String.toUtf8('你好'); //结果为 ''\n    "], "src": "\n@desc 把一个字符串转成 UTF8 编码。\n@param {String} string 要进行编码的字符串。\n@return {String} 返回一个 UTF8 编码的新字符串。\n@example\n        $.String.toUtf8('你好'); //结果为 ''\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把一个字符串转成 UTF8 编码。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行编码的字符串。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个 UTF8 编码的新字符串。", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.String.toUtf8('你好'); //结果为 ''", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "返回一个 UTF8 编码的新字符串。", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "toUtf8", "_params": [{ "title": "param", "desc": "要进行编码的字符串。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.String.toUtf8('你好'); //结果为 ''", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "toUtf8", "params": [{ "title": "param", "desc": "要进行编码的字符串。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }] }, { "type": "Object", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把一个字符串转成等价的值。\n主要是把字符串形式的 0|1|true|false|null|undefined|NaN 转成原来的数据值。\n当参数不是字符串或不是上述值之一时，则直接返回该参数，不作转换。", "alias": "MiniQuery.String.toValue", "id": 833, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 把一个字符串转成等价的值。\n主要是把字符串形式的 0|1|true|false|null|undefined|NaN 转成原来的数据值。\n当参数不是字符串或不是上述值之一时，则直接返回该参数，不作转换。", "param {Object} value 要进行转换的值，可以是任何类型。", "return {Object} 返回一个等价的值。", "example\n        $.String.toValue('NaN') //NaN\n        $.String.toValue('null') //null\n        $.String.toValue('true') //true\n        $.String.toValue({}) //不作转换，直接原样返回\n    "], "src": "\n@desc 把一个字符串转成等价的值。\n主要是把字符串形式的 0|1|true|false|null|undefined|NaN 转成原来的数据值。\n当参数不是字符串或不是上述值之一时，则直接返回该参数，不作转换。\n@param {Object} value 要进行转换的值，可以是任何类型。\n@return {Object} 返回一个等价的值。\n@example\n        $.String.toValue('NaN') //NaN\n        $.String.toValue('null') //null\n        $.String.toValue('true') //true\n        $.String.toValue({}) //不作转换，直接原样返回\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把一个字符串转成等价的值。\n主要是把字符串形式的 0|1|true|false|null|undefined|NaN 转成原来的数据值。\n当参数不是字符串或不是上述值之一时，则直接返回该参数，不作转换。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行转换的值，可以是任何类型。", "type": "Object", "name": "value", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个等价的值。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.String.toValue('NaN') //NaN\n        $.String.toValue('null') //null\n        $.String.toValue('true') //true\n        $.String.toValue({}) //不作转换，直接原样返回", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "返回一个等价的值。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "toValue", "_params": [{ "title": "param", "desc": "要进行转换的值，可以是任何类型。", "type": "Object", "name": "value", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.String.toValue('NaN') //NaN\n        $.String.toValue('null') //null\n        $.String.toValue('true') //true\n        $.String.toValue({}) //不作转换，直接原样返回", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "toValue", "params": [{ "title": "param", "desc": "要进行转换的值，可以是任何类型。", "type": "Object", "name": "value", "isOptional": false, "defaultValue": "" }] }, { "type": "Array", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "对一个字符串进行多层次分裂，返回一个多维数组。", "alias": "MiniQuery.String.split", "id": 836, "isStatic": true, "see": [], "methods": [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": true, "isNamespace": false, "augments": [], "fires": [], "desc": "", "alias": "MiniQuery.String.split-fn", "id": 841, "isStatic": false, "see": [], "methods": [], "comment": { "tagTexts": ["desc "], "src": "\n @desc ", "meta": "", "tags": [{ "title": "desc", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": false }, "memberOf": "MiniQuery.String.split", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "fn", "_params": [{ "title": "param", "desc": "", "type": "", "name": "list", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "separator", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "dimension", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "fn", "params": [{ "title": "param", "desc": "", "type": "", "name": "list", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "separator", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "dimension", "isOptional": false, "defaultValue": "" }] }], "comment": { "tagTexts": ["desc 对一个字符串进行多层次分裂，返回一个多维数组。", "param {String} string 要进行分裂的字符串。", "param {Array} separators 分隔符列表数组。", "return {Array} 返回一个多维数组，该数组的维数，跟指定的分隔符 separators 的长度一致。", "example\n        var string = 'a=1&b=2|a=100&b=200;a=111&b=222|a=10000&b=20000';\n        var separators = [';', '|', '&', '='];\n        var a = $.String.split(string, separators);\n        //结果 a 为\n        a = \n        [                           // ';' 分裂的结果\n            [                       // '|'分裂的结果\n                [                   // '&'分裂的结果\n                    ['a', '1'],     // '='分裂的结果\n                    ['b', '2']\n                ],\n                [\n                    ['a', '100'],\n                    ['b', '200']\n                ]\n            ],\n            [\n                [\n                    ['a', '111'],\n                    ['b', '222']\n                ],\n                [\n                    ['a', '10000'],\n                    ['b', '20000']\n                ]\n            ]\n        ];\n\n    "], "src": "\n@desc 对一个字符串进行多层次分裂，返回一个多维数组。\n@param {String} string 要进行分裂的字符串。\n@param {Array} separators 分隔符列表数组。\n@return {Array} 返回一个多维数组，该数组的维数，跟指定的分隔符 separators 的长度一致。\n@example\n        var string = 'a=1&b=2|a=100&b=200;a=111&b=222|a=10000&b=20000';\n        var separators = [';', '|', '&', '='];\n        var a = $.String.split(string, separators);\n        //结果 a 为\n        a = \n        [                           // ';' 分裂的结果\n            [                       // '|'分裂的结果\n                [                   // '&'分裂的结果\n                    ['a', '1'],     // '='分裂的结果\n                    ['b', '2']\n                ],\n                [\n                    ['a', '100'],\n                    ['b', '200']\n                ]\n            ],\n            [\n                [\n                    ['a', '111'],\n                    ['b', '222']\n                ],\n                [\n                    ['a', '10000'],\n                    ['b', '20000']\n                ]\n            ]\n        ];\n\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "对一个字符串进行多层次分裂，返回一个多维数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行分裂的字符串。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "分隔符列表数组。", "type": "Array", "name": "separators", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个多维数组，该数组的维数，跟指定的分隔符 separators 的长度一致。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var string = 'a=1&b=2|a=100&b=200;a=111&b=222|a=10000&b=20000';\n        var separators = [';', '|', '&', '='];\n        var a = $.String.split(string, separators);\n        //结果 a 为\n        a = \n        [                           // ';' 分裂的结果\n            [                       // '|'分裂的结果\n                [                   // '&'分裂的结果\n                    ['a', '1'],     // '='分裂的结果\n                    ['b', '2']\n                ],\n                [\n                    ['a', '100'],\n                    ['b', '200']\n                ]\n            ],\n            [\n                [\n                    ['a', '111'],\n                    ['b', '222']\n                ],\n                [\n                    ['a', '10000'],\n                    ['b', '20000']\n                ]\n            ]\n        ];", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "返回一个多维数组，该数组的维数，跟指定的分隔符 separators 的长度一致。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "split", "_params": [{ "title": "param", "desc": "要进行分裂的字符串。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "分隔符列表数组。", "type": "Array", "name": "separators", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var string = 'a=1&b=2|a=100&b=200;a=111&b=222|a=10000&b=20000';\n        var separators = [';', '|', '&', '='];\n        var a = $.String.split(string, separators);\n        //结果 a 为\n        a = \n        [                           // ';' 分裂的结果\n            [                       // '|'分裂的结果\n                [                   // '&'分裂的结果\n                    ['a', '1'],     // '='分裂的结果\n                    ['b', '2']\n                ],\n                [\n                    ['a', '100'],\n                    ['b', '200']\n                ]\n            ],\n            [\n                [\n                    ['a', '111'],\n                    ['b', '222']\n                ],\n                [\n                    ['a', '10000'],\n                    ['b', '20000']\n                ]\n            ]\n        ];", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "split", "params": [{ "title": "param", "desc": "要进行分裂的字符串。", "type": "String", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "分隔符列表数组。", "type": "Array", "name": "separators", "isOptional": false, "defaultValue": "" }] }, { "type": "Array", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "用滑动窗口的方式创建分组，返回一个子串的数组。", "alias": "MiniQuery.String.slide", "id": 843, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 用滑动窗口的方式创建分组，返回一个子串的数组。", "param {string|number} string 要进行分组的字符串。会调用 String(string) 转成字符串。", "param {number} windowSize 滑动窗口的大小。", "param {number} [stepSize=1] 滑动步长。默认为1。", "return {Array} 返回一个经过滑动窗口方式得到的子串数组。", "example\n  $.String.slide('012345678', 4, 3); //滑动窗口大小为4，滑动步长为3\n        //得到 [ '0123', '3456', '678' ] //最后一组不足一组\n    "], "src": "\n@desc 用滑动窗口的方式创建分组，返回一个子串的数组。\n@param {string|number} string 要进行分组的字符串。会调用 String(string) 转成字符串。\n@param {number} windowSize 滑动窗口的大小。\n@param {number} [stepSize=1] 滑动步长。默认为1。\n@return {Array} 返回一个经过滑动窗口方式得到的子串数组。\n@example\n  $.String.slide('012345678', 4, 3); //滑动窗口大小为4，滑动步长为3\n        //得到 [ '0123', '3456', '678' ] //最后一组不足一组\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "用滑动窗口的方式创建分组，返回一个子串的数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行分组的字符串。会调用 String(string) 转成字符串。", "type": "string|number", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "滑动窗口的大小。", "type": "number", "name": "windowSize", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "滑动步长。默认为1。", "type": "number", "name": "stepSize", "isOptional": true, "defaultValue": "1" }, { "title": "return", "desc": "返回一个经过滑动窗口方式得到的子串数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "  $.String.slide('012345678', 4, 3); //滑动窗口大小为4，滑动步长为3\n        //得到 [ '0123', '3456', '678' ] //最后一组不足一组", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "返回一个经过滑动窗口方式得到的子串数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "slide", "_params": [{ "title": "param", "desc": "要进行分组的字符串。会调用 String(string) 转成字符串。", "type": "string|number", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "滑动窗口的大小。", "type": "number", "name": "windowSize", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "滑动步长。默认为1。", "type": "number", "name": "stepSize", "isOptional": true, "defaultValue": "1" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "  $.String.slide('012345678', 4, 3); //滑动窗口大小为4，滑动步长为3\n        //得到 [ '0123', '3456', '678' ] //最后一组不足一组", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "slide", "params": [{ "title": "param", "desc": "要进行分组的字符串。会调用 String(string) 转成字符串。", "type": "string|number", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "滑动窗口的大小。", "type": "number", "name": "windowSize", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "滑动步长。默认为1。", "type": "number", "name": "stepSize", "isOptional": true, "defaultValue": "1" }] }, { "type": "Array", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "对一个字符串进行分段，返回一个分段后的子串数组。", "alias": "MiniQuery.String.segment", "id": 846, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 对一个字符串进行分段，返回一个分段后的子串数组。", "param {string|number} string 要进行分段的字符串。会调用 String(string) 转成字符串。", "param {number} size 分段的大小。", "return {Array} 返回一个分段后的子串数组。", "example\n  $.String.segment('0123456789', 3); //进行分段，每段大小为3\n        //得到 [ '012', '345', '678', '9' ] //最后一组不足一组\n    "], "src": "\n@desc 对一个字符串进行分段，返回一个分段后的子串数组。\n@param {string|number} string 要进行分段的字符串。会调用 String(string) 转成字符串。\n@param {number} size 分段的大小。\n@return {Array} 返回一个分段后的子串数组。\n@example\n  $.String.segment('0123456789', 3); //进行分段，每段大小为3\n        //得到 [ '012', '345', '678', '9' ] //最后一组不足一组\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "对一个字符串进行分段，返回一个分段后的子串数组。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行分段的字符串。会调用 String(string) 转成字符串。", "type": "string|number", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "分段的大小。", "type": "number", "name": "size", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个分段后的子串数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "  $.String.segment('0123456789', 3); //进行分段，每段大小为3\n        //得到 [ '012', '345', '678', '9' ] //最后一组不足一组", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "返回一个分段后的子串数组。", "type": "Array", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "segment", "_params": [{ "title": "param", "desc": "要进行分段的字符串。会调用 String(string) 转成字符串。", "type": "string|number", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "分段的大小。", "type": "number", "name": "size", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "  $.String.segment('0123456789', 3); //进行分段，每段大小为3\n        //得到 [ '012', '345', '678', '9' ] //最后一组不足一组", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "segment", "params": [{ "title": "param", "desc": "要进行分段的字符串。会调用 String(string) 转成字符串。", "type": "string|number", "name": "string", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "分段的大小。", "type": "number", "name": "size", "isOptional": false, "defaultValue": "" }] }, { "type": "Object", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "对一个字符串进行多层级模板解析，返回一个带有多个子名称的模板。", "alias": "MiniQuery.String.getTemplates", "id": 848, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 对一个字符串进行多层级模板解析，返回一个带有多个子名称的模板。", "param {string} text 要进行解析的模板字符串。", "param {Array} tags 多层级模板中使用的标记。", "return {Object} 返回一个带有多个子名称的模板。\n    "], "src": "\n@desc 对一个字符串进行多层级模板解析，返回一个带有多个子名称的模板。\n@param {string} text 要进行解析的模板字符串。\n@param {Array} tags 多层级模板中使用的标记。\n@return {Object} 返回一个带有多个子名称的模板。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "对一个字符串进行多层级模板解析，返回一个带有多个子名称的模板。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行解析的模板字符串。", "type": "string", "name": "text", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "多层级模板中使用的标记。", "type": "Array", "name": "tags", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个带有多个子名称的模板。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "返回一个带有多个子名称的模板。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "getTemplates", "_params": [{ "title": "param", "desc": "要进行解析的模板字符串。", "type": "string", "name": "text", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "多层级模板中使用的标记。", "type": "Array", "name": "tags", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "getTemplates", "params": [{ "title": "param", "desc": "要进行解析的模板字符串。", "type": "string", "name": "text", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "多层级模板中使用的标记。", "type": "Array", "name": "tags", "isOptional": false, "defaultValue": "" }] }, { "type": "Number", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "获取一个字符串的字节长度。\n普通字符的字节长度为 1；中文等字符的字节长度为 2。", "alias": "MiniQuery.String.getByteLength", "id": 867, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 获取一个字符串的字节长度。\n普通字符的字节长度为 1；中文等字符的字节长度为 2。", "param {string} s 要进行解析的字符串。", "return {Number} 返回参数字符串的字节长度。\n    "], "src": "\n@desc 获取一个字符串的字节长度。\n普通字符的字节长度为 1；中文等字符的字节长度为 2。\n@param {string} s 要进行解析的字符串。\n@return {Number} 返回参数字符串的字节长度。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "获取一个字符串的字节长度。\n普通字符的字节长度为 1；中文等字符的字节长度为 2。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行解析的字符串。", "type": "string", "name": "s", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回参数字符串的字节长度。", "type": "Number", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "返回参数字符串的字节长度。", "type": "Number", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "getByteLength", "_params": [{ "title": "param", "desc": "要进行解析的字符串。", "type": "string", "name": "s", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "getByteLength", "params": [{ "title": "param", "desc": "要进行解析的字符串。", "type": "string", "name": "s", "isOptional": false, "defaultValue": "" }] }, { "type": "String", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "用做过滤直接放到HTML里的", "alias": "MiniQuery.String.escapeHtml", "id": 869, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 用做过滤直接放到HTML里的", "return {String}\n    "], "src": "\n@desc 用做过滤直接放到HTML里的\n@return {String}\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "用做过滤直接放到HTML里的", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "escapeHtml", "_params": [{ "title": "param", "desc": "", "type": "", "name": "string", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "escapeHtml", "params": [{ "title": "param", "desc": "", "type": "", "name": "string", "isOptional": false, "defaultValue": "" }] }, { "type": "String", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "用做过滤HTML标签里面的东东 比如这个例子里的<input value=\"XXX\"> XXX就是要过滤的", "alias": "MiniQuery.String.escapeElementAttribute", "id": 878, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 用做过滤HTML标签里面的东东 比如这个例子里的<input value=\"XXX\"> XXX就是要过滤的", "return {String}\n    "], "src": "\n@desc 用做过滤HTML标签里面的东东 比如这个例子里的<input value=\"XXX\"> XXX就是要过滤的\n@return {String}\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "用做过滤HTML标签里面的东东 比如这个例子里的<input value=\"XXX\"> XXX就是要过滤的", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "escapeElementAttribute", "_params": [{ "title": "param", "desc": "", "type": "", "name": "string", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "escapeElementAttribute", "params": [{ "title": "param", "desc": "", "type": "", "name": "string", "isOptional": false, "defaultValue": "" }] }, { "type": "String", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "用做过滤直接放到HTML里js中的", "alias": "MiniQuery.String.escapeScript", "id": 882, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 用做过滤直接放到HTML里js中的", "return {String}\n    "], "src": "\n@desc 用做过滤直接放到HTML里js中的\n@return {String}\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "用做过滤直接放到HTML里js中的", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "escapeScript", "_params": [{ "title": "param", "desc": "", "type": "", "name": "string", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "escapeScript", "params": [{ "title": "param", "desc": "", "type": "", "name": "string", "isOptional": false, "defaultValue": "" }] }, { "type": "String", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "用做过滤直接 Url 参数里的 比如 http://www.baidu.com/?a=XXX XXX就是要过滤的", "alias": "MiniQuery.String.escapeQueryString", "id": 891, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 用做过滤直接 Url 参数里的 比如 http://www.baidu.com/?a=XXX XXX就是要过滤的", "return {String}\n    "], "src": "\n@desc 用做过滤直接 Url 参数里的 比如 http://www.baidu.com/?a=XXX XXX就是要过滤的\n@return {String}\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "用做过滤直接 Url 参数里的 比如 http://www.baidu.com/?a=XXX XXX就是要过滤的", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "escapeQueryString", "_params": [{ "title": "param", "desc": "", "type": "", "name": "string", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "escapeQueryString", "params": [{ "title": "param", "desc": "", "type": "", "name": "string", "isOptional": false, "defaultValue": "" }] }, { "type": "String", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "用做过滤直接放到<a href=\"javascript:alert('XXX')\">中的XXX", "alias": "MiniQuery.String.escapeHrefScript", "id": 893, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 用做过滤直接放到<a href=\"javascript:alert('XXX')\">中的XXX", "return {String}\n    "], "src": "\n@desc 用做过滤直接放到<a href=\"javascript:alert('XXX')\">中的XXX\n@return {String}\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "用做过滤直接放到<a href=\"javascript:alert('XXX')\">中的XXX", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "escapeHrefScript", "_params": [{ "title": "param", "desc": "", "type": "", "name": "string", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "escapeHrefScript", "params": [{ "title": "param", "desc": "", "type": "", "name": "string", "isOptional": false, "defaultValue": "" }] }, { "type": "String", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "用做过滤直接放到正则表达式中的", "alias": "MiniQuery.String.escapeRegExp", "id": 897, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 用做过滤直接放到正则表达式中的", "return {String}\n    "], "src": "\n@desc 用做过滤直接放到正则表达式中的\n@return {String}\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "用做过滤直接放到正则表达式中的", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.String", "since": "", "returns": [{ "title": "return", "desc": "", "type": "String", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "FUNCTION", "_name": "escapeRegExp", "_params": [{ "title": "param", "desc": "", "type": "", "name": "string", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "escapeRegExp", "params": [{ "title": "param", "desc": "", "type": "", "name": "string", "isOptional": false, "defaultValue": "" }] }], "comment": { "tagTexts": ["desc 字符串工具类", "class\n"], "src": "\n@desc 字符串工具类\n@class\n", "meta": "", "tags": [{ "title": "desc", "desc": "字符串工具类", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "class", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\core\\String.js", "exceptions": [], "isa": "CONSTRUCTOR", "_name": "String", "_params": [{ "title": "param", "desc": "", "type": "", "name": "string", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "String", "params": [{ "title": "param", "desc": "", "type": "", "name": "string", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": true, "augments": [], "fires": [], "desc": "Url 工具类", "alias": "MiniQuery.Url", "id": 1193, "isStatic": true, "see": [], "methods": [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "获取指定 Url 的查询字符串中指定的键所对应的值。", "alias": "MiniQuery.Url.getQueryString", "id": 1195, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 获取指定 Url 的查询字符串中指定的键所对应的值。", "param {string} url 要进行获取的 url 字符串。", "param {string} [key] 要检索的键。", "param {boolean} [ignoreCase=false] 是否忽略参数 key 的大小写。 默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "retun {string|Object|undefined} 返回一个查询字符串值。\n        当不指定参数 key 时，则获取全部查询字符串，返回一个等价的 Object 对象。\n        当指定参数 key 为一个空字符串，则获取全部查询字符串，返回一个 string 类型值。", "example\n        $.Url.getQueryString('http://www.demo.com?a=1&b=2#hash', 'a');  //返回 '1'\n        $.Url.getQueryString('http://www.demo.com?a=1&b=2#hash', 'c');  //返回 undefined\n        $.Url.getQueryString('http://www.demo.com?a=1&A=2#hash', 'A');  //返回 2\n        $.Url.getQueryString('http://www.demo.com?a=1&b=2#hash', 'A', true);//返回 1\n        $.Url.getQueryString('http://www.demo.com?a=1&b=2#hash', '');   //返回 'a=1&b=2'\n        $.Url.getQueryString('http://www.demo.com?a=1&b=2#hash');       //返回 {a: '1', b: '2'}\n        $.Url.getQueryString('http://www.demo.com?a=&b=');              //返回 {a: '', b: ''}\n        $.Url.getQueryString('http://www.demo.com?a&b');                //返回 {a: '', b: ''}\n        $.Url.getQueryString('http://www.demo.com?a', 'a');             //返回 ''\n    "], "src": "\n@desc 获取指定 Url 的查询字符串中指定的键所对应的值。\n@param {string} url 要进行获取的 url 字符串。\n@param {string} [key] 要检索的键。\n@param {boolean} [ignoreCase=false] 是否忽略参数 key 的大小写。 默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。\n@retun {string|Object|undefined} 返回一个查询字符串值。\n        当不指定参数 key 时，则获取全部查询字符串，返回一个等价的 Object 对象。\n        当指定参数 key 为一个空字符串，则获取全部查询字符串，返回一个 string 类型值。\n@example\n        $.Url.getQueryString('http://www.demo.com?a=1&b=2#hash', 'a');  //返回 '1'\n        $.Url.getQueryString('http://www.demo.com?a=1&b=2#hash', 'c');  //返回 undefined\n        $.Url.getQueryString('http://www.demo.com?a=1&A=2#hash', 'A');  //返回 2\n        $.Url.getQueryString('http://www.demo.com?a=1&b=2#hash', 'A', true);//返回 1\n        $.Url.getQueryString('http://www.demo.com?a=1&b=2#hash', '');   //返回 'a=1&b=2'\n        $.Url.getQueryString('http://www.demo.com?a=1&b=2#hash');       //返回 {a: '1', b: '2'}\n        $.Url.getQueryString('http://www.demo.com?a=&b=');              //返回 {a: '', b: ''}\n        $.Url.getQueryString('http://www.demo.com?a&b');                //返回 {a: '', b: ''}\n        $.Url.getQueryString('http://www.demo.com?a', 'a');             //返回 ''\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "获取指定 Url 的查询字符串中指定的键所对应的值。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行获取的 url 字符串。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要检索的键。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "是否忽略参数 key 的大小写。 默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }, { "title": "retun", "desc": "返回一个查询字符串值。\n        当不指定参数 key 时，则获取全部查询字符串，返回一个等价的 Object 对象。\n        当指定参数 key 为一个空字符串，则获取全部查询字符串，返回一个 string 类型值。", "type": "string|Object|undefined", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Url.getQueryString('http://www.demo.com?a=1&b=2#hash', 'a');  //返回 '1'\n        $.Url.getQueryString('http://www.demo.com?a=1&b=2#hash', 'c');  //返回 undefined\n        $.Url.getQueryString('http://www.demo.com?a=1&A=2#hash', 'A');  //返回 2\n        $.Url.getQueryString('http://www.demo.com?a=1&b=2#hash', 'A', true);//返回 1\n        $.Url.getQueryString('http://www.demo.com?a=1&b=2#hash', '');   //返回 'a=1&b=2'\n        $.Url.getQueryString('http://www.demo.com?a=1&b=2#hash');       //返回 {a: '1', b: '2'}\n        $.Url.getQueryString('http://www.demo.com?a=&b=');              //返回 {a: '', b: ''}\n        $.Url.getQueryString('http://www.demo.com?a&b');                //返回 {a: '', b: ''}\n        $.Url.getQueryString('http://www.demo.com?a', 'a');             //返回 ''", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Url", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Url.js", "exceptions": [], "isa": "FUNCTION", "_name": "getQueryString", "_params": [{ "title": "param", "desc": "要进行获取的 url 字符串。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要检索的键。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "是否忽略参数 key 的大小写。 默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Url.getQueryString('http://www.demo.com?a=1&b=2#hash', 'a');  //返回 '1'\n        $.Url.getQueryString('http://www.demo.com?a=1&b=2#hash', 'c');  //返回 undefined\n        $.Url.getQueryString('http://www.demo.com?a=1&A=2#hash', 'A');  //返回 2\n        $.Url.getQueryString('http://www.demo.com?a=1&b=2#hash', 'A', true);//返回 1\n        $.Url.getQueryString('http://www.demo.com?a=1&b=2#hash', '');   //返回 'a=1&b=2'\n        $.Url.getQueryString('http://www.demo.com?a=1&b=2#hash');       //返回 {a: '1', b: '2'}\n        $.Url.getQueryString('http://www.demo.com?a=&b=');              //返回 {a: '', b: ''}\n        $.Url.getQueryString('http://www.demo.com?a&b');                //返回 {a: '', b: ''}\n        $.Url.getQueryString('http://www.demo.com?a', 'a');             //返回 ''", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "getQueryString", "params": [{ "title": "param", "desc": "要进行获取的 url 字符串。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要检索的键。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "是否忽略参数 key 的大小写。 默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "给指定的 Url 添加一个查询字符串。\n注意，该方法会保留之前的查询字符串，并且覆盖同名的查询字符串。", "alias": "MiniQuery.Url.addQueryString", "id": 1202, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 给指定的 Url 添加一个查询字符串。\n注意，该方法会保留之前的查询字符串，并且覆盖同名的查询字符串。", "param {string} url 组装前的 url。", "param {string|Object} key 要添加的查询字符串的键。\n        当传入一个 Object 对象时，会对键值对进行递归组合编码成查询字符串。", "param {string} [value] 要添加的查询字符串的值。", "retun {string} 返回组装后的新的 Url。", "example\n        //返回 'http://www.demo.com?a=1&b=2&c=3#hash'\n        $.Url.setQueryString('http://www.demo.com?a=1&b=2#hash', 'c', 3);  \n        \n        //返回 'http://www.demo.com?a=3&b=2&d=4#hash'\n        $.Url.setQueryString('http://www.demo.com?a=1&b=2#hash', {a: 3, d: 4});  \n    "], "src": "\n@desc 给指定的 Url 添加一个查询字符串。\n注意，该方法会保留之前的查询字符串，并且覆盖同名的查询字符串。\n@param {string} url 组装前的 url。\n@param {string|Object} key 要添加的查询字符串的键。\n        当传入一个 Object 对象时，会对键值对进行递归组合编码成查询字符串。\n@param {string} [value] 要添加的查询字符串的值。\n@retun {string} 返回组装后的新的 Url。\n@example\n        //返回 'http://www.demo.com?a=1&b=2&c=3#hash'\n        $.Url.setQueryString('http://www.demo.com?a=1&b=2#hash', 'c', 3);  \n        \n        //返回 'http://www.demo.com?a=3&b=2&d=4#hash'\n        $.Url.setQueryString('http://www.demo.com?a=1&b=2#hash', {a: 3, d: 4});  \n    ", "meta": "", "tags": [{ "title": "desc", "desc": "给指定的 Url 添加一个查询字符串。\n注意，该方法会保留之前的查询字符串，并且覆盖同名的查询字符串。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "组装前的 url。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要添加的查询字符串的键。\n        当传入一个 Object 对象时，会对键值对进行递归组合编码成查询字符串。", "type": "string|Object", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要添加的查询字符串的值。", "type": "string", "name": "value", "isOptional": true, "defaultValue": "" }, { "title": "retun", "desc": "返回组装后的新的 Url。", "type": "string", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        //返回 'http://www.demo.com?a=1&b=2&c=3#hash'\n        $.Url.setQueryString('http://www.demo.com?a=1&b=2#hash', 'c', 3);  \n        \n        //返回 'http://www.demo.com?a=3&b=2&d=4#hash'\n        $.Url.setQueryString('http://www.demo.com?a=1&b=2#hash', {a: 3, d: 4});", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Url", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Url.js", "exceptions": [], "isa": "FUNCTION", "_name": "addQueryString", "_params": [{ "title": "param", "desc": "组装前的 url。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要添加的查询字符串的键。\n        当传入一个 Object 对象时，会对键值对进行递归组合编码成查询字符串。", "type": "string|Object", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要添加的查询字符串的值。", "type": "string", "name": "value", "isOptional": true, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        //返回 'http://www.demo.com?a=1&b=2&c=3#hash'\n        $.Url.setQueryString('http://www.demo.com?a=1&b=2#hash', 'c', 3);  \n        \n        //返回 'http://www.demo.com?a=3&b=2&d=4#hash'\n        $.Url.setQueryString('http://www.demo.com?a=1&b=2#hash', {a: 3, d: 4});", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "addQueryString", "params": [{ "title": "param", "desc": "组装前的 url。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要添加的查询字符串的键。\n        当传入一个 Object 对象时，会对键值对进行递归组合编码成查询字符串。", "type": "string|Object", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要添加的查询字符串的值。", "type": "string", "name": "value", "isOptional": true, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "给指定的 Url 添加一个随机查询字符串。\n注意，该方法会保留之前的查询字符串，并且添加一个键名为随机字符串而值为空字符串的查询字符串。", "alias": "MiniQuery.Url.randomQueryString", "id": 1206, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 给指定的 Url 添加一个随机查询字符串。\n注意，该方法会保留之前的查询字符串，并且添加一个键名为随机字符串而值为空字符串的查询字符串。", "param {string} url 组装前的 url。", "param {number} [len] 随机键的长度。", "retun {string} 返回组装后的新的 Url。", "example\n        //返回值类似 'http://www.demo.com?a=1&b=2&7A8CEBAFC6B4=#hash'\n        $.Url.randomQueryString('http://www.demo.com?a=1&b=2#hash');  \n        \n        //返回值类似 'http://www.demo.com?a=1&b=2&7A8CE=#hash' \n        $.Url.randomQueryString('http://www.demo.com?a=1&b=2#hash', 5); //随机键的长度为 5\n\n    "], "src": "\n@desc 给指定的 Url 添加一个随机查询字符串。\n注意，该方法会保留之前的查询字符串，并且添加一个键名为随机字符串而值为空字符串的查询字符串。\n@param {string} url 组装前的 url。\n@param {number} [len] 随机键的长度。\n@retun {string} 返回组装后的新的 Url。\n@example\n        //返回值类似 'http://www.demo.com?a=1&b=2&7A8CEBAFC6B4=#hash'\n        $.Url.randomQueryString('http://www.demo.com?a=1&b=2#hash');  \n        \n        //返回值类似 'http://www.demo.com?a=1&b=2&7A8CE=#hash' \n        $.Url.randomQueryString('http://www.demo.com?a=1&b=2#hash', 5); //随机键的长度为 5\n\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "给指定的 Url 添加一个随机查询字符串。\n注意，该方法会保留之前的查询字符串，并且添加一个键名为随机字符串而值为空字符串的查询字符串。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "组装前的 url。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "随机键的长度。", "type": "number", "name": "len", "isOptional": true, "defaultValue": "" }, { "title": "retun", "desc": "返回组装后的新的 Url。", "type": "string", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        //返回值类似 'http://www.demo.com?a=1&b=2&7A8CEBAFC6B4=#hash'\n        $.Url.randomQueryString('http://www.demo.com?a=1&b=2#hash');  \n        \n        //返回值类似 'http://www.demo.com?a=1&b=2&7A8CE=#hash' \n        $.Url.randomQueryString('http://www.demo.com?a=1&b=2#hash', 5); //随机键的长度为 5", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Url", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Url.js", "exceptions": [], "isa": "FUNCTION", "_name": "randomQueryString", "_params": [{ "title": "param", "desc": "组装前的 url。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "随机键的长度。", "type": "number", "name": "len", "isOptional": true, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        //返回值类似 'http://www.demo.com?a=1&b=2&7A8CEBAFC6B4=#hash'\n        $.Url.randomQueryString('http://www.demo.com?a=1&b=2#hash');  \n        \n        //返回值类似 'http://www.demo.com?a=1&b=2&7A8CE=#hash' \n        $.Url.randomQueryString('http://www.demo.com?a=1&b=2#hash', 5); //随机键的长度为 5", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "randomQueryString", "params": [{ "title": "param", "desc": "组装前的 url。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "随机键的长度。", "type": "number", "name": "len", "isOptional": true, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把指定的 Url 和查询字符串组装成一个新的 Url。\n注意，该方法会删除之前的查询字符串。", "alias": "MiniQuery.Url.setQueryString", "id": 1208, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 把指定的 Url 和查询字符串组装成一个新的 Url。\n注意，该方法会删除之前的查询字符串。", "param {string} url 组装前的 url。", "param {string|Object} key 要设置的查询字符串的键。\n        当传入一个 Object 对象时，会对键值对进行递归组合编码成查询字符串。", "param {string} [value] 要添加的查询字符串的值。", "retun {string} 返回组装后的新的 Url。", "example\n        //返回 'http://www.demo.com?c=3#hash'\n        $.Url.setQueryString('http://www.demo.com?a=1&b=2#hash', 'c', 3);  \n        \n        //返回 'http://www.demo.com?a=3&d=4#hash'\n        $.Url.setQueryString('http://www.demo.com?a=1&b=2#hash', {a: 3, d: 4});  \n    "], "src": "\n@desc 把指定的 Url 和查询字符串组装成一个新的 Url。\n注意，该方法会删除之前的查询字符串。\n@param {string} url 组装前的 url。\n@param {string|Object} key 要设置的查询字符串的键。\n        当传入一个 Object 对象时，会对键值对进行递归组合编码成查询字符串。\n@param {string} [value] 要添加的查询字符串的值。\n@retun {string} 返回组装后的新的 Url。\n@example\n        //返回 'http://www.demo.com?c=3#hash'\n        $.Url.setQueryString('http://www.demo.com?a=1&b=2#hash', 'c', 3);  \n        \n        //返回 'http://www.demo.com?a=3&d=4#hash'\n        $.Url.setQueryString('http://www.demo.com?a=1&b=2#hash', {a: 3, d: 4});  \n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把指定的 Url 和查询字符串组装成一个新的 Url。\n注意，该方法会删除之前的查询字符串。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "组装前的 url。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要设置的查询字符串的键。\n        当传入一个 Object 对象时，会对键值对进行递归组合编码成查询字符串。", "type": "string|Object", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要添加的查询字符串的值。", "type": "string", "name": "value", "isOptional": true, "defaultValue": "" }, { "title": "retun", "desc": "返回组装后的新的 Url。", "type": "string", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        //返回 'http://www.demo.com?c=3#hash'\n        $.Url.setQueryString('http://www.demo.com?a=1&b=2#hash', 'c', 3);  \n        \n        //返回 'http://www.demo.com?a=3&d=4#hash'\n        $.Url.setQueryString('http://www.demo.com?a=1&b=2#hash', {a: 3, d: 4});", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Url", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Url.js", "exceptions": [], "isa": "FUNCTION", "_name": "setQueryString", "_params": [{ "title": "param", "desc": "组装前的 url。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要设置的查询字符串的键。\n        当传入一个 Object 对象时，会对键值对进行递归组合编码成查询字符串。", "type": "string|Object", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要添加的查询字符串的值。", "type": "string", "name": "value", "isOptional": true, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        //返回 'http://www.demo.com?c=3#hash'\n        $.Url.setQueryString('http://www.demo.com?a=1&b=2#hash', 'c', 3);  \n        \n        //返回 'http://www.demo.com?a=3&d=4#hash'\n        $.Url.setQueryString('http://www.demo.com?a=1&b=2#hash', {a: 3, d: 4});", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "setQueryString", "params": [{ "title": "param", "desc": "组装前的 url。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要设置的查询字符串的键。\n        当传入一个 Object 对象时，会对键值对进行递归组合编码成查询字符串。", "type": "string|Object", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要添加的查询字符串的值。", "type": "string", "name": "value", "isOptional": true, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "判断指定的 Url 是否包含特定名称的查询字符串。", "alias": "MiniQuery.Url.hasQueryString", "id": 1222, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 判断指定的 Url 是否包含特定名称的查询字符串。", "param {string} url 要检查的 url。", "param {string} [key] 要提取的查询字符串的键。", "param {boolean} [ignoreCase=false] 是否忽略参数 key 的大小写，默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "retun {boolean} 如果 url 中包含该名称的查询字符串，则返回 true；否则返回 false。", "example\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'a');  //返回 true\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'b');  //返回 true\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'c');  //返回 false\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'A', true); //返回 true\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash');       //返回 true\n    "], "src": "\n@desc 判断指定的 Url 是否包含特定名称的查询字符串。\n@param {string} url 要检查的 url。\n@param {string} [key] 要提取的查询字符串的键。\n@param {boolean} [ignoreCase=false] 是否忽略参数 key 的大小写，默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。\n@retun {boolean} 如果 url 中包含该名称的查询字符串，则返回 true；否则返回 false。\n@example\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'a');  //返回 true\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'b');  //返回 true\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'c');  //返回 false\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'A', true); //返回 true\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash');       //返回 true\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "判断指定的 Url 是否包含特定名称的查询字符串。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要检查的 url。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要提取的查询字符串的键。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "是否忽略参数 key 的大小写，默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }, { "title": "retun", "desc": "如果 url 中包含该名称的查询字符串，则返回 true；否则返回 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'a');  //返回 true\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'b');  //返回 true\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'c');  //返回 false\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'A', true); //返回 true\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash');       //返回 true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Url", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Url.js", "exceptions": [], "isa": "FUNCTION", "_name": "hasQueryString", "_params": [{ "title": "param", "desc": "要检查的 url。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要提取的查询字符串的键。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "是否忽略参数 key 的大小写，默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'a');  //返回 true\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'b');  //返回 true\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'c');  //返回 false\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'A', true); //返回 true\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash');       //返回 true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "hasQueryString", "params": [{ "title": "param", "desc": "要检查的 url。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要提取的查询字符串的键。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "是否忽略参数 key 的大小写，默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "获取指定 Url 的哈希中指定的键所对应的值。", "alias": "MiniQuery.Url.getHash", "id": 1225, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 获取指定 Url 的哈希中指定的键所对应的值。", "param {string} url 要进行获取的 Url 字符串。", "param {string} [key] 要检索的键。", "param {boolean} [ignoreCase=false] 是否忽略参数 key 的大小写。 默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "retun {string|Object|undefined} 返回一个查询字符串值。\n        当不指定参数 key 时，则获取全部哈希值，对其进行 unescape 解码，\n        然后返回一个等价的 Object 对象。\n        当指定参数 key 为一个空字符串，则获取全部哈希(不解码)，返回一个 string 类型值。", "example\n        $.Url.getHash('http://www.demo.com?query#a%3D1%26b%3D2', 'a');  //返回 '1'\n        $.Url.getHash('http://www.demo.com?query#a%3D1%26b%3D2', 'c');  //返回 undefined\n        $.Url.getHash('http://www.demo.com?query#a%3D1%26A%3D2', 'A');  //返回 2\n        $.Url.getHash('http://www.demo.com?query#a%3D1%26b%3D2', 'A', true);//返回 1\n        $.Url.getHash('http://www.demo.com?query#a%3D1%26b%3D2', '');   //返回 'a%3D1%26b%3D2'\n        $.Url.getHash('http://www.demo.com?query#a%3D1%26b%3D2');       //返回 {a: '1', b: '2'}\n        $.Url.getHash('http://www.demo.com?query#a%3D%26b%3D');         //返回 {a: '', b: ''}\n        $.Url.getHash('http://www.demo.com??query#a%26b');              //返回 {a: '', b: ''}\n        $.Url.getHash('http://www.demo.com?query#a', 'a');              //返回 ''\n    "], "src": "\n@desc 获取指定 Url 的哈希中指定的键所对应的值。\n@param {string} url 要进行获取的 Url 字符串。\n@param {string} [key] 要检索的键。\n@param {boolean} [ignoreCase=false] 是否忽略参数 key 的大小写。 默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。\n@retun {string|Object|undefined} 返回一个查询字符串值。\n        当不指定参数 key 时，则获取全部哈希值，对其进行 unescape 解码，\n        然后返回一个等价的 Object 对象。\n        当指定参数 key 为一个空字符串，则获取全部哈希(不解码)，返回一个 string 类型值。\n@example\n        $.Url.getHash('http://www.demo.com?query#a%3D1%26b%3D2', 'a');  //返回 '1'\n        $.Url.getHash('http://www.demo.com?query#a%3D1%26b%3D2', 'c');  //返回 undefined\n        $.Url.getHash('http://www.demo.com?query#a%3D1%26A%3D2', 'A');  //返回 2\n        $.Url.getHash('http://www.demo.com?query#a%3D1%26b%3D2', 'A', true);//返回 1\n        $.Url.getHash('http://www.demo.com?query#a%3D1%26b%3D2', '');   //返回 'a%3D1%26b%3D2'\n        $.Url.getHash('http://www.demo.com?query#a%3D1%26b%3D2');       //返回 {a: '1', b: '2'}\n        $.Url.getHash('http://www.demo.com?query#a%3D%26b%3D');         //返回 {a: '', b: ''}\n        $.Url.getHash('http://www.demo.com??query#a%26b');              //返回 {a: '', b: ''}\n        $.Url.getHash('http://www.demo.com?query#a', 'a');              //返回 ''\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "获取指定 Url 的哈希中指定的键所对应的值。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行获取的 Url 字符串。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要检索的键。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "是否忽略参数 key 的大小写。 默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }, { "title": "retun", "desc": "返回一个查询字符串值。\n        当不指定参数 key 时，则获取全部哈希值，对其进行 unescape 解码，\n        然后返回一个等价的 Object 对象。\n        当指定参数 key 为一个空字符串，则获取全部哈希(不解码)，返回一个 string 类型值。", "type": "string|Object|undefined", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Url.getHash('http://www.demo.com?query#a%3D1%26b%3D2', 'a');  //返回 '1'\n        $.Url.getHash('http://www.demo.com?query#a%3D1%26b%3D2', 'c');  //返回 undefined\n        $.Url.getHash('http://www.demo.com?query#a%3D1%26A%3D2', 'A');  //返回 2\n        $.Url.getHash('http://www.demo.com?query#a%3D1%26b%3D2', 'A', true);//返回 1\n        $.Url.getHash('http://www.demo.com?query#a%3D1%26b%3D2', '');   //返回 'a%3D1%26b%3D2'\n        $.Url.getHash('http://www.demo.com?query#a%3D1%26b%3D2');       //返回 {a: '1', b: '2'}\n        $.Url.getHash('http://www.demo.com?query#a%3D%26b%3D');         //返回 {a: '', b: ''}\n        $.Url.getHash('http://www.demo.com??query#a%26b');              //返回 {a: '', b: ''}\n        $.Url.getHash('http://www.demo.com?query#a', 'a');              //返回 ''", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Url", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Url.js", "exceptions": [], "isa": "FUNCTION", "_name": "getHash", "_params": [{ "title": "param", "desc": "要进行获取的 Url 字符串。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要检索的键。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "是否忽略参数 key 的大小写。 默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Url.getHash('http://www.demo.com?query#a%3D1%26b%3D2', 'a');  //返回 '1'\n        $.Url.getHash('http://www.demo.com?query#a%3D1%26b%3D2', 'c');  //返回 undefined\n        $.Url.getHash('http://www.demo.com?query#a%3D1%26A%3D2', 'A');  //返回 2\n        $.Url.getHash('http://www.demo.com?query#a%3D1%26b%3D2', 'A', true);//返回 1\n        $.Url.getHash('http://www.demo.com?query#a%3D1%26b%3D2', '');   //返回 'a%3D1%26b%3D2'\n        $.Url.getHash('http://www.demo.com?query#a%3D1%26b%3D2');       //返回 {a: '1', b: '2'}\n        $.Url.getHash('http://www.demo.com?query#a%3D%26b%3D');         //返回 {a: '', b: ''}\n        $.Url.getHash('http://www.demo.com??query#a%26b');              //返回 {a: '', b: ''}\n        $.Url.getHash('http://www.demo.com?query#a', 'a');              //返回 ''", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "getHash", "params": [{ "title": "param", "desc": "要进行获取的 Url 字符串。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要检索的键。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "是否忽略参数 key 的大小写。 默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把指定的哈希设置到指定的 Url 上。\n该方法会对哈希进行 escape 编码，再设置到 Url 上，以避免哈希破坏原有的 Url。\n同时原有的哈希会移除掉而替换成新的。", "alias": "MiniQuery.Url.setHash", "id": 1232, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 把指定的哈希设置到指定的 Url 上。\n该方法会对哈希进行 escape 编码，再设置到 Url 上，以避免哈希破坏原有的 Url。\n同时原有的哈希会移除掉而替换成新的。", "param {string} url 要设置的 url 字符串。", "param {string|number|boolean|Object} key 要设置的哈希的键。\n        当传入一个 Object 对象时，会对键值对进行递归编码成查询字符串， 然后用 escape 编码来设置哈希。\n        当传入的是一个 string|number|boolean 类型，并且不传入第三个参数， 则直接用 escape 编码来设置哈希。", "param {string} [value] 要添加的哈希的值。", "retun {string} 返回组装后的新的 Url 字符串。", "example\n        //返回 'http://www.demo.com?#a%3D1'\n        $.Url.setHash('http://www.demo.com', 'a', 1);  \n        \n        //返回 'http://www.demo.com?query#a%3D3%26d%3D4'\n        $.Url.setHash('http://www.demo.com?query#a%3D1%26b%3D2', {a: 3, d: 4});  \n\n        //返回 'http://www.demo.com?query#a%3D3%26d%3D4'\n        $.Url.setHash('http://www.demo.com?query#a%3D1%26b%3D2', 'a=3&b=4'); \n        \n    "], "src": "\n@desc 把指定的哈希设置到指定的 Url 上。\n该方法会对哈希进行 escape 编码，再设置到 Url 上，以避免哈希破坏原有的 Url。\n同时原有的哈希会移除掉而替换成新的。\n@param {string} url 要设置的 url 字符串。\n@param {string|number|boolean|Object} key 要设置的哈希的键。\n        当传入一个 Object 对象时，会对键值对进行递归编码成查询字符串， 然后用 escape 编码来设置哈希。\n        当传入的是一个 string|number|boolean 类型，并且不传入第三个参数， 则直接用 escape 编码来设置哈希。\n@param {string} [value] 要添加的哈希的值。\n@retun {string} 返回组装后的新的 Url 字符串。\n@example\n        //返回 'http://www.demo.com?#a%3D1'\n        $.Url.setHash('http://www.demo.com', 'a', 1);  \n        \n        //返回 'http://www.demo.com?query#a%3D3%26d%3D4'\n        $.Url.setHash('http://www.demo.com?query#a%3D1%26b%3D2', {a: 3, d: 4});  \n\n        //返回 'http://www.demo.com?query#a%3D3%26d%3D4'\n        $.Url.setHash('http://www.demo.com?query#a%3D1%26b%3D2', 'a=3&b=4'); \n        \n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把指定的哈希设置到指定的 Url 上。\n该方法会对哈希进行 escape 编码，再设置到 Url 上，以避免哈希破坏原有的 Url。\n同时原有的哈希会移除掉而替换成新的。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要设置的 url 字符串。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要设置的哈希的键。\n        当传入一个 Object 对象时，会对键值对进行递归编码成查询字符串， 然后用 escape 编码来设置哈希。\n        当传入的是一个 string|number|boolean 类型，并且不传入第三个参数， 则直接用 escape 编码来设置哈希。", "type": "string|number|boolean|Object", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要添加的哈希的值。", "type": "string", "name": "value", "isOptional": true, "defaultValue": "" }, { "title": "retun", "desc": "返回组装后的新的 Url 字符串。", "type": "string", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        //返回 'http://www.demo.com?#a%3D1'\n        $.Url.setHash('http://www.demo.com', 'a', 1);  \n        \n        //返回 'http://www.demo.com?query#a%3D3%26d%3D4'\n        $.Url.setHash('http://www.demo.com?query#a%3D1%26b%3D2', {a: 3, d: 4});  \n\n        //返回 'http://www.demo.com?query#a%3D3%26d%3D4'\n        $.Url.setHash('http://www.demo.com?query#a%3D1%26b%3D2', 'a=3&b=4');", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Url", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Url.js", "exceptions": [], "isa": "FUNCTION", "_name": "setHash", "_params": [{ "title": "param", "desc": "要设置的 url 字符串。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要设置的哈希的键。\n        当传入一个 Object 对象时，会对键值对进行递归编码成查询字符串， 然后用 escape 编码来设置哈希。\n        当传入的是一个 string|number|boolean 类型，并且不传入第三个参数， 则直接用 escape 编码来设置哈希。", "type": "string|number|boolean|Object", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要添加的哈希的值。", "type": "string", "name": "value", "isOptional": true, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        //返回 'http://www.demo.com?#a%3D1'\n        $.Url.setHash('http://www.demo.com', 'a', 1);  \n        \n        //返回 'http://www.demo.com?query#a%3D3%26d%3D4'\n        $.Url.setHash('http://www.demo.com?query#a%3D1%26b%3D2', {a: 3, d: 4});  \n\n        //返回 'http://www.demo.com?query#a%3D3%26d%3D4'\n        $.Url.setHash('http://www.demo.com?query#a%3D1%26b%3D2', 'a=3&b=4');", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "setHash", "params": [{ "title": "param", "desc": "要设置的 url 字符串。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要设置的哈希的键。\n        当传入一个 Object 对象时，会对键值对进行递归编码成查询字符串， 然后用 escape 编码来设置哈希。\n        当传入的是一个 string|number|boolean 类型，并且不传入第三个参数， 则直接用 escape 编码来设置哈希。", "type": "string|number|boolean|Object", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要添加的哈希的值。", "type": "string", "name": "value", "isOptional": true, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "判断指定的 Url 是否包含特定名称的查询字符串。", "alias": "MiniQuery.Url.hasHash", "id": 1243, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 判断指定的 Url 是否包含特定名称的查询字符串。", "param {string} url 要检查的 url。", "param {string} [key] 要提取的查询字符串的键。", "param {boolean} [ignoreCase=false] 是否忽略参数 key 的大小写，默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "retun {boolean} 如果 url 中包含该名称的查询字符串，则返回 true；否则返回 false。", "example\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'a');  //返回 true\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'b');  //返回 true\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'c');  //返回 false\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'A', true); //返回 true\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash');       //返回 true\n    "], "src": "\n@desc 判断指定的 Url 是否包含特定名称的查询字符串。\n@param {string} url 要检查的 url。\n@param {string} [key] 要提取的查询字符串的键。\n@param {boolean} [ignoreCase=false] 是否忽略参数 key 的大小写，默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。\n@retun {boolean} 如果 url 中包含该名称的查询字符串，则返回 true；否则返回 false。\n@example\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'a');  //返回 true\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'b');  //返回 true\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'c');  //返回 false\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'A', true); //返回 true\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash');       //返回 true\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "判断指定的 Url 是否包含特定名称的查询字符串。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要检查的 url。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要提取的查询字符串的键。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "是否忽略参数 key 的大小写，默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }, { "title": "retun", "desc": "如果 url 中包含该名称的查询字符串，则返回 true；否则返回 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'a');  //返回 true\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'b');  //返回 true\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'c');  //返回 false\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'A', true); //返回 true\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash');       //返回 true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Url", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Url.js", "exceptions": [], "isa": "FUNCTION", "_name": "hasHash", "_params": [{ "title": "param", "desc": "要检查的 url。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要提取的查询字符串的键。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "是否忽略参数 key 的大小写，默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'a');  //返回 true\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'b');  //返回 true\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'c');  //返回 false\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash', 'A', true); //返回 true\n        $.Url.hasQueryString('http://www.demo.com?a=1&b=2#hash');       //返回 true", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "hasHash", "params": [{ "title": "param", "desc": "要检查的 url。", "type": "string", "name": "url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要提取的查询字符串的键。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "是否忽略参数 key 的大小写，默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "监听指定窗口 Url 的 Hash 变化，并触发一个回调函数。", "alias": "MiniQuery.Url.hashchange", "id": 1465, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 监听指定窗口 Url 的 Hash 变化，并触发一个回调函数。", "param {Window} window 要监听的 window 窗口。", "param {function} fn 当监听窗口的 hash 发生变化时，要触发的回调函数。\n  该回调函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  该回调函数内部的 this 指向监听的窗口。", "param {boolean} [immediate=false] 指示初始时当窗口中存在哈希时是否要立即执行回调函数。\n        初始时当窗口中存在哈希时，如果要立即执行回调函数，请指定该参数为 true；\n        否则不指定或指定为 false。", "example\n        $.Url.hashchange(top, function (newHash, oldHash) {\n            console.log('new hash: ' + newHash);\n            console.log('old hash: ' + oldHash);\n            console.log(this === top); //true\n\n        });\n    "], "src": "\n@desc 监听指定窗口 Url 的 Hash 变化，并触发一个回调函数。\n@param {Window} window 要监听的 window 窗口。\n@param {function} fn 当监听窗口的 hash 发生变化时，要触发的回调函数。\n  该回调函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  该回调函数内部的 this 指向监听的窗口。\n@param {boolean} [immediate=false] 指示初始时当窗口中存在哈希时是否要立即执行回调函数。\n        初始时当窗口中存在哈希时，如果要立即执行回调函数，请指定该参数为 true；\n        否则不指定或指定为 false。\n@example\n        $.Url.hashchange(top, function (newHash, oldHash) {\n            console.log('new hash: ' + newHash);\n            console.log('old hash: ' + oldHash);\n            console.log(this === top); //true\n\n        });\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "监听指定窗口 Url 的 Hash 变化，并触发一个回调函数。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要监听的 window 窗口。", "type": "Window", "name": "window", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "当监听窗口的 hash 发生变化时，要触发的回调函数。\n  该回调函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  该回调函数内部的 this 指向监听的窗口。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示初始时当窗口中存在哈希时是否要立即执行回调函数。\n        初始时当窗口中存在哈希时，如果要立即执行回调函数，请指定该参数为 true；\n        否则不指定或指定为 false。", "type": "boolean", "name": "immediate", "isOptional": true, "defaultValue": "false" }, { "title": "example", "desc": "\n        $.Url.hashchange(top, function (newHash, oldHash) {\n            console.log('new hash: ' + newHash);\n            console.log('old hash: ' + oldHash);\n            console.log(this === top); //true\n\n        });", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Url", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\Url.js", "exceptions": [], "isa": "FUNCTION", "_name": "hashchange", "_params": [{ "title": "param", "desc": "要监听的 window 窗口。", "type": "Window", "name": "window", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "当监听窗口的 hash 发生变化时，要触发的回调函数。\n  该回调函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  该回调函数内部的 this 指向监听的窗口。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示初始时当窗口中存在哈希时是否要立即执行回调函数。\n        初始时当窗口中存在哈希时，如果要立即执行回调函数，请指定该参数为 true；\n        否则不指定或指定为 false。", "type": "boolean", "name": "immediate", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Url.hashchange(top, function (newHash, oldHash) {\n            console.log('new hash: ' + newHash);\n            console.log('old hash: ' + oldHash);\n            console.log(this === top); //true\n\n        });", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "hashchange", "params": [{ "title": "param", "desc": "要监听的 window 窗口。", "type": "Window", "name": "window", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "当监听窗口的 hash 发生变化时，要触发的回调函数。\n  该回调函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  该回调函数内部的 this 指向监听的窗口。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示初始时当窗口中存在哈希时是否要立即执行回调函数。\n        初始时当窗口中存在哈希时，如果要立即执行回调函数，请指定该参数为 true；\n        否则不指定或指定为 false。", "type": "boolean", "name": "immediate", "isOptional": true, "defaultValue": "false" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "监听指定窗口 Url 的 Hash 变化，并触发相应的路由分支函数。", "alias": "MiniQuery.Url.route", "id": 1474, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 监听指定窗口 Url 的 Hash 变化，并触发相应的路由分支函数。", "param {Window} window 要监听的 window 窗口。", "param {Object} routes 路由分支函数。\n  分支函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  分支函数内部的 this 指向监听的窗口。", "example\n        $.Url.route(window, {\n            'abc': function (newHash, oldHash) { },\n            'user/': function (newHash, oldHash){ },\n            'user/1234': function (newHash, oldHash) { }\n        });\n\n        $.Url.route(window, 'abc', function (newHash, oldHash) {\n\n        });\n\n    "], "src": "\n@desc 监听指定窗口 Url 的 Hash 变化，并触发相应的路由分支函数。\n@param {Window} window 要监听的 window 窗口。\n@param {Object} routes 路由分支函数。\n  分支函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  分支函数内部的 this 指向监听的窗口。\n@example\n        $.Url.route(window, {\n            'abc': function (newHash, oldHash) { },\n            'user/': function (newHash, oldHash){ },\n            'user/1234': function (newHash, oldHash) { }\n        });\n\n        $.Url.route(window, 'abc', function (newHash, oldHash) {\n\n        });\n\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "监听指定窗口 Url 的 Hash 变化，并触发相应的路由分支函数。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要监听的 window 窗口。", "type": "Window", "name": "window", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "路由分支函数。\n  分支函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  分支函数内部的 this 指向监听的窗口。", "type": "Object", "name": "routes", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Url.route(window, {\n            'abc': function (newHash, oldHash) { },\n            'user/': function (newHash, oldHash){ },\n            'user/1234': function (newHash, oldHash) { }\n        });\n\n        $.Url.route(window, 'abc', function (newHash, oldHash) {\n\n        });", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Url", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\Url.js", "exceptions": [], "isa": "FUNCTION", "_name": "route", "_params": [{ "title": "param", "desc": "要监听的 window 窗口。", "type": "Window", "name": "window", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "路由分支函数。\n  分支函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  分支函数内部的 this 指向监听的窗口。", "type": "Object", "name": "routes", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Url.route(window, {\n            'abc': function (newHash, oldHash) { },\n            'user/': function (newHash, oldHash){ },\n            'user/1234': function (newHash, oldHash) { }\n        });\n\n        $.Url.route(window, 'abc', function (newHash, oldHash) {\n\n        });", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "route", "params": [{ "title": "param", "desc": "要监听的 window 窗口。", "type": "Window", "name": "window", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "路由分支函数。\n  分支函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  分支函数内部的 this 指向监听的窗口。", "type": "Object", "name": "routes", "isOptional": false, "defaultValue": "" }] }], "comment": { "tagTexts": ["desc Url 工具类", "namespace\n"], "src": "\n@desc Url 工具类\n@namespace\n", "meta": "", "tags": [{ "title": "desc", "desc": "Url 工具类", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "namespace", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\excore\\Url.js", "exceptions": [], "isa": "OBJECT", "_name": "Url", "_params": [{ "title": "param", "desc": "", "type": "", "name": "$", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "This", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "scopeType": "INSTANCE", "properties": [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": true, "augments": [], "fires": [], "desc": "当前运行窗口的 Url 工具类", "alias": "MiniQuery.Url.Current", "id": 1543, "isStatic": true, "see": [], "methods": [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "获取当前窗口的 Url 的查询字符串中指定的键所对应的值。", "alias": "MiniQuery.Url.Current.getQueryString", "id": 1545, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 获取当前窗口的 Url 的查询字符串中指定的键所对应的值。", "param {string} [key] 要检索的键。", "param {boolean} [ignoreCase=false] 是否忽略参数 key 的大小写。 默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "retun {string|Object|undefined} 返回一个查询字符串值。\n        当不指定参数 key 时，则获取全部查询字符串，返回一个等价的 Object 对象。\n        当指定参数 key 为一个空字符串，则获取全部查询字符串，返回一个 string 类型值。\n    "], "src": "\n@desc 获取当前窗口的 Url 的查询字符串中指定的键所对应的值。\n@param {string} [key] 要检索的键。\n@param {boolean} [ignoreCase=false] 是否忽略参数 key 的大小写。 默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。\n@retun {string|Object|undefined} 返回一个查询字符串值。\n        当不指定参数 key 时，则获取全部查询字符串，返回一个等价的 Object 对象。\n        当指定参数 key 为一个空字符串，则获取全部查询字符串，返回一个 string 类型值。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "获取当前窗口的 Url 的查询字符串中指定的键所对应的值。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要检索的键。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "是否忽略参数 key 的大小写。 默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }, { "title": "retun", "desc": "返回一个查询字符串值。\n        当不指定参数 key 时，则获取全部查询字符串，返回一个等价的 Object 对象。\n        当指定参数 key 为一个空字符串，则获取全部查询字符串，返回一个 string 类型值。", "type": "string|Object|undefined", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Url.Current", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\current\\Url.js", "exceptions": [], "isa": "FUNCTION", "_name": "getQueryString", "_params": [{ "title": "param", "desc": "要检索的键。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "是否忽略参数 key 的大小写。 默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "getQueryString", "params": [{ "title": "param", "desc": "要检索的键。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "是否忽略参数 key 的大小写。 默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把当前窗口的 Url 和查询字符串组装成一个新的 Url。", "alias": "MiniQuery.Url.Current.setQueryString", "id": 1548, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 把当前窗口的 Url 和查询字符串组装成一个新的 Url。", "param {string|Object} key 要添加的查询字符串的键。\n        当传入一个 Object 对象时，会对键值对进行递归组合编码成查询字符串。", "param {string} [value] 要添加的查询字符串的值。", "retun {string} 返回组装后的新的 Url。\n    "], "src": "\n@desc 把当前窗口的 Url 和查询字符串组装成一个新的 Url。\n@param {string|Object} key 要添加的查询字符串的键。\n        当传入一个 Object 对象时，会对键值对进行递归组合编码成查询字符串。\n@param {string} [value] 要添加的查询字符串的值。\n@retun {string} 返回组装后的新的 Url。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把当前窗口的 Url 和查询字符串组装成一个新的 Url。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要添加的查询字符串的键。\n        当传入一个 Object 对象时，会对键值对进行递归组合编码成查询字符串。", "type": "string|Object", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要添加的查询字符串的值。", "type": "string", "name": "value", "isOptional": true, "defaultValue": "" }, { "title": "retun", "desc": "返回组装后的新的 Url。", "type": "string", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Url.Current", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\current\\Url.js", "exceptions": [], "isa": "FUNCTION", "_name": "setQueryString", "_params": [{ "title": "param", "desc": "要添加的查询字符串的键。\n        当传入一个 Object 对象时，会对键值对进行递归组合编码成查询字符串。", "type": "string|Object", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要添加的查询字符串的值。", "type": "string", "name": "value", "isOptional": true, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "setQueryString", "params": [{ "title": "param", "desc": "要添加的查询字符串的键。\n        当传入一个 Object 对象时，会对键值对进行递归组合编码成查询字符串。", "type": "string|Object", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要添加的查询字符串的值。", "type": "string", "name": "value", "isOptional": true, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "判断当前窗口的 Url 是否包含特定名称的查询字符串。", "alias": "MiniQuery.Url.Current.hasQueryString", "id": 1551, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 判断当前窗口的 Url 是否包含特定名称的查询字符串。", "param {string} [key] 要提取的查询字符串的键。", "param {boolean} [ignoreCase=false] 是否忽略参数 key 的大小写，默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "retun {boolean} 如果 url 中包含该名称的查询字符串，则返回 true；否则返回 false。\n    "], "src": "\n@desc 判断当前窗口的 Url 是否包含特定名称的查询字符串。\n@param {string} [key] 要提取的查询字符串的键。\n@param {boolean} [ignoreCase=false] 是否忽略参数 key 的大小写，默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。\n@retun {boolean} 如果 url 中包含该名称的查询字符串，则返回 true；否则返回 false。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "判断当前窗口的 Url 是否包含特定名称的查询字符串。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要提取的查询字符串的键。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "是否忽略参数 key 的大小写，默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }, { "title": "retun", "desc": "如果 url 中包含该名称的查询字符串，则返回 true；否则返回 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Url.Current", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\current\\Url.js", "exceptions": [], "isa": "FUNCTION", "_name": "hasQueryString", "_params": [{ "title": "param", "desc": "要提取的查询字符串的键。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "是否忽略参数 key 的大小写，默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "hasQueryString", "params": [{ "title": "param", "desc": "要提取的查询字符串的键。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "是否忽略参数 key 的大小写，默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "监听当前窗口的 hash 变化，并触发一个回调函数。", "alias": "MiniQuery.Url.Current.hashchange", "id": 1554, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 监听当前窗口的 hash 变化，并触发一个回调函数。", "param {function} fn 当本窗口的 hash 发生变化时，要触发的回调函数。\n  该回调函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  该回调函数内部的 this 指向当前窗口。", "example\n        $.Url.Current.hashchange(function (newHash, oldHash) {\n            console.log('new hash: ' + newHash);\n            console.log('old hash: ' + oldHash);\n            console.log(this === window); //true\n        });\n    "], "src": "\n@desc 监听当前窗口的 hash 变化，并触发一个回调函数。\n@param {function} fn 当本窗口的 hash 发生变化时，要触发的回调函数。\n  该回调函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  该回调函数内部的 this 指向当前窗口。\n@example\n        $.Url.Current.hashchange(function (newHash, oldHash) {\n            console.log('new hash: ' + newHash);\n            console.log('old hash: ' + oldHash);\n            console.log(this === window); //true\n        });\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "监听当前窗口的 hash 变化，并触发一个回调函数。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "当本窗口的 hash 发生变化时，要触发的回调函数。\n  该回调函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  该回调函数内部的 this 指向当前窗口。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Url.Current.hashchange(function (newHash, oldHash) {\n            console.log('new hash: ' + newHash);\n            console.log('old hash: ' + oldHash);\n            console.log(this === window); //true\n        });", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Url.Current", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\current\\Url.js", "exceptions": [], "isa": "FUNCTION", "_name": "hashchange", "_params": [{ "title": "param", "desc": "当本窗口的 hash 发生变化时，要触发的回调函数。\n  该回调函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  该回调函数内部的 this 指向当前窗口。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Url.Current.hashchange(function (newHash, oldHash) {\n            console.log('new hash: ' + newHash);\n            console.log('old hash: ' + oldHash);\n            console.log(this === window); //true\n        });", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "hashchange", "params": [{ "title": "param", "desc": "当本窗口的 hash 发生变化时，要触发的回调函数。\n  该回调函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  该回调函数内部的 this 指向当前窗口。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "监听当前窗口 Url 的 Hash 变化，并触发相应的路由分支函数。", "alias": "MiniQuery.Url.Current.route", "id": 1557, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 监听当前窗口 Url 的 Hash 变化，并触发相应的路由分支函数。", "param {Object} routes 路由分支函数。\n  分支函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  分支函数内部的 this 指向监听的窗口。", "example\n        $.Url.route({\n            'abc': function () { },\n            'user/': function(){},\n            'user/1234': function () { }\n        });\n    "], "src": "\n@desc 监听当前窗口 Url 的 Hash 变化，并触发相应的路由分支函数。\n@param {Object} routes 路由分支函数。\n  分支函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  分支函数内部的 this 指向监听的窗口。\n@example\n        $.Url.route({\n            'abc': function () { },\n            'user/': function(){},\n            'user/1234': function () { }\n        });\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "监听当前窗口 Url 的 Hash 变化，并触发相应的路由分支函数。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "路由分支函数。\n  分支函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  分支函数内部的 this 指向监听的窗口。", "type": "Object", "name": "routes", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Url.route({\n            'abc': function () { },\n            'user/': function(){},\n            'user/1234': function () { }\n        });", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Url.Current", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\current\\Url.js", "exceptions": [], "isa": "FUNCTION", "_name": "route", "_params": [{ "title": "param", "desc": "路由分支函数。\n  分支函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  分支函数内部的 this 指向监听的窗口。", "type": "Object", "name": "routes", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Url.route({\n            'abc': function () { },\n            'user/': function(){},\n            'user/1234': function () { }\n        });", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "route", "params": [{ "title": "param", "desc": "路由分支函数。\n  分支函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  分支函数内部的 this 指向监听的窗口。", "type": "Object", "name": "routes", "isOptional": false, "defaultValue": "" }] }], "comment": { "tagTexts": ["desc 当前运行窗口的 Url 工具类", "namespace\n"], "src": "\n@desc 当前运行窗口的 Url 工具类\n@namespace\n", "meta": "", "tags": [{ "title": "desc", "desc": "当前运行窗口的 Url 工具类", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "namespace", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Url", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\current\\Url.js", "exceptions": [], "isa": "OBJECT", "_name": "Current", "_params": [{ "title": "param", "desc": "", "type": "", "name": "Url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "window", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "location", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "scopeType": "INSTANCE", "properties": [], "name": "Current", "params": [{ "title": "param", "desc": "", "type": "", "name": "Url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "window", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "location", "isOptional": false, "defaultValue": "" }] }], "name": "Url", "params": [{ "title": "param", "desc": "", "type": "", "name": "$", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "This", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": true, "augments": [], "fires": [], "desc": "当前运行窗口的 Url 工具类", "alias": "MiniQuery.Url.Current", "id": 1543, "isStatic": true, "see": [], "methods": [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "获取当前窗口的 Url 的查询字符串中指定的键所对应的值。", "alias": "MiniQuery.Url.Current.getQueryString", "id": 1545, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 获取当前窗口的 Url 的查询字符串中指定的键所对应的值。", "param {string} [key] 要检索的键。", "param {boolean} [ignoreCase=false] 是否忽略参数 key 的大小写。 默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "retun {string|Object|undefined} 返回一个查询字符串值。\n        当不指定参数 key 时，则获取全部查询字符串，返回一个等价的 Object 对象。\n        当指定参数 key 为一个空字符串，则获取全部查询字符串，返回一个 string 类型值。\n    "], "src": "\n@desc 获取当前窗口的 Url 的查询字符串中指定的键所对应的值。\n@param {string} [key] 要检索的键。\n@param {boolean} [ignoreCase=false] 是否忽略参数 key 的大小写。 默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。\n@retun {string|Object|undefined} 返回一个查询字符串值。\n        当不指定参数 key 时，则获取全部查询字符串，返回一个等价的 Object 对象。\n        当指定参数 key 为一个空字符串，则获取全部查询字符串，返回一个 string 类型值。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "获取当前窗口的 Url 的查询字符串中指定的键所对应的值。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要检索的键。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "是否忽略参数 key 的大小写。 默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }, { "title": "retun", "desc": "返回一个查询字符串值。\n        当不指定参数 key 时，则获取全部查询字符串，返回一个等价的 Object 对象。\n        当指定参数 key 为一个空字符串，则获取全部查询字符串，返回一个 string 类型值。", "type": "string|Object|undefined", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Url.Current", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\current\\Url.js", "exceptions": [], "isa": "FUNCTION", "_name": "getQueryString", "_params": [{ "title": "param", "desc": "要检索的键。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "是否忽略参数 key 的大小写。 默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "getQueryString", "params": [{ "title": "param", "desc": "要检索的键。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "是否忽略参数 key 的大小写。 默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把当前窗口的 Url 和查询字符串组装成一个新的 Url。", "alias": "MiniQuery.Url.Current.setQueryString", "id": 1548, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 把当前窗口的 Url 和查询字符串组装成一个新的 Url。", "param {string|Object} key 要添加的查询字符串的键。\n        当传入一个 Object 对象时，会对键值对进行递归组合编码成查询字符串。", "param {string} [value] 要添加的查询字符串的值。", "retun {string} 返回组装后的新的 Url。\n    "], "src": "\n@desc 把当前窗口的 Url 和查询字符串组装成一个新的 Url。\n@param {string|Object} key 要添加的查询字符串的键。\n        当传入一个 Object 对象时，会对键值对进行递归组合编码成查询字符串。\n@param {string} [value] 要添加的查询字符串的值。\n@retun {string} 返回组装后的新的 Url。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把当前窗口的 Url 和查询字符串组装成一个新的 Url。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要添加的查询字符串的键。\n        当传入一个 Object 对象时，会对键值对进行递归组合编码成查询字符串。", "type": "string|Object", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要添加的查询字符串的值。", "type": "string", "name": "value", "isOptional": true, "defaultValue": "" }, { "title": "retun", "desc": "返回组装后的新的 Url。", "type": "string", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Url.Current", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\current\\Url.js", "exceptions": [], "isa": "FUNCTION", "_name": "setQueryString", "_params": [{ "title": "param", "desc": "要添加的查询字符串的键。\n        当传入一个 Object 对象时，会对键值对进行递归组合编码成查询字符串。", "type": "string|Object", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要添加的查询字符串的值。", "type": "string", "name": "value", "isOptional": true, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "setQueryString", "params": [{ "title": "param", "desc": "要添加的查询字符串的键。\n        当传入一个 Object 对象时，会对键值对进行递归组合编码成查询字符串。", "type": "string|Object", "name": "key", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要添加的查询字符串的值。", "type": "string", "name": "value", "isOptional": true, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "判断当前窗口的 Url 是否包含特定名称的查询字符串。", "alias": "MiniQuery.Url.Current.hasQueryString", "id": 1551, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 判断当前窗口的 Url 是否包含特定名称的查询字符串。", "param {string} [key] 要提取的查询字符串的键。", "param {boolean} [ignoreCase=false] 是否忽略参数 key 的大小写，默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "retun {boolean} 如果 url 中包含该名称的查询字符串，则返回 true；否则返回 false。\n    "], "src": "\n@desc 判断当前窗口的 Url 是否包含特定名称的查询字符串。\n@param {string} [key] 要提取的查询字符串的键。\n@param {boolean} [ignoreCase=false] 是否忽略参数 key 的大小写，默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。\n@retun {boolean} 如果 url 中包含该名称的查询字符串，则返回 true；否则返回 false。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "判断当前窗口的 Url 是否包含特定名称的查询字符串。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要提取的查询字符串的键。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "是否忽略参数 key 的大小写，默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }, { "title": "retun", "desc": "如果 url 中包含该名称的查询字符串，则返回 true；否则返回 false。", "type": "boolean", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Url.Current", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\current\\Url.js", "exceptions": [], "isa": "FUNCTION", "_name": "hasQueryString", "_params": [{ "title": "param", "desc": "要提取的查询字符串的键。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "是否忽略参数 key 的大小写，默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "hasQueryString", "params": [{ "title": "param", "desc": "要提取的查询字符串的键。", "type": "string", "name": "key", "isOptional": true, "defaultValue": "" }, { "title": "param", "desc": "是否忽略参数 key 的大小写，默认区分大小写。\n        如果要忽略 key 的大小写，请指定为 true；否则不指定或指定为 false。\n        当指定为 true 时，将优先检索完全匹配的键所对应的项；若没找到然后再忽略大小写去检索。", "type": "boolean", "name": "ignoreCase", "isOptional": true, "defaultValue": "false" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "监听当前窗口的 hash 变化，并触发一个回调函数。", "alias": "MiniQuery.Url.Current.hashchange", "id": 1554, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 监听当前窗口的 hash 变化，并触发一个回调函数。", "param {function} fn 当本窗口的 hash 发生变化时，要触发的回调函数。\n  该回调函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  该回调函数内部的 this 指向当前窗口。", "example\n        $.Url.Current.hashchange(function (newHash, oldHash) {\n            console.log('new hash: ' + newHash);\n            console.log('old hash: ' + oldHash);\n            console.log(this === window); //true\n        });\n    "], "src": "\n@desc 监听当前窗口的 hash 变化，并触发一个回调函数。\n@param {function} fn 当本窗口的 hash 发生变化时，要触发的回调函数。\n  该回调函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  该回调函数内部的 this 指向当前窗口。\n@example\n        $.Url.Current.hashchange(function (newHash, oldHash) {\n            console.log('new hash: ' + newHash);\n            console.log('old hash: ' + oldHash);\n            console.log(this === window); //true\n        });\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "监听当前窗口的 hash 变化，并触发一个回调函数。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "当本窗口的 hash 发生变化时，要触发的回调函数。\n  该回调函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  该回调函数内部的 this 指向当前窗口。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Url.Current.hashchange(function (newHash, oldHash) {\n            console.log('new hash: ' + newHash);\n            console.log('old hash: ' + oldHash);\n            console.log(this === window); //true\n        });", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Url.Current", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\current\\Url.js", "exceptions": [], "isa": "FUNCTION", "_name": "hashchange", "_params": [{ "title": "param", "desc": "当本窗口的 hash 发生变化时，要触发的回调函数。\n  该回调函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  该回调函数内部的 this 指向当前窗口。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Url.Current.hashchange(function (newHash, oldHash) {\n            console.log('new hash: ' + newHash);\n            console.log('old hash: ' + oldHash);\n            console.log(this === window); //true\n        });", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "hashchange", "params": [{ "title": "param", "desc": "当本窗口的 hash 发生变化时，要触发的回调函数。\n  该回调函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  该回调函数内部的 this 指向当前窗口。", "type": "function", "name": "fn", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "监听当前窗口 Url 的 Hash 变化，并触发相应的路由分支函数。", "alias": "MiniQuery.Url.Current.route", "id": 1557, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 监听当前窗口 Url 的 Hash 变化，并触发相应的路由分支函数。", "param {Object} routes 路由分支函数。\n  分支函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  分支函数内部的 this 指向监听的窗口。", "example\n        $.Url.route({\n            'abc': function () { },\n            'user/': function(){},\n            'user/1234': function () { }\n        });\n    "], "src": "\n@desc 监听当前窗口 Url 的 Hash 变化，并触发相应的路由分支函数。\n@param {Object} routes 路由分支函数。\n  分支函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  分支函数内部的 this 指向监听的窗口。\n@example\n        $.Url.route({\n            'abc': function () { },\n            'user/': function(){},\n            'user/1234': function () { }\n        });\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "监听当前窗口 Url 的 Hash 变化，并触发相应的路由分支函数。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "路由分支函数。\n  分支函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  分支函数内部的 this 指向监听的窗口。", "type": "Object", "name": "routes", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        $.Url.route({\n            'abc': function () { },\n            'user/': function(){},\n            'user/1234': function () { }\n        });", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Url.Current", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\current\\Url.js", "exceptions": [], "isa": "FUNCTION", "_name": "route", "_params": [{ "title": "param", "desc": "路由分支函数。\n  分支函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  分支函数内部的 this 指向监听的窗口。", "type": "Object", "name": "routes", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        $.Url.route({\n            'abc': function () { },\n            'user/': function(){},\n            'user/1234': function () { }\n        });", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "route", "params": [{ "title": "param", "desc": "路由分支函数。\n  分支函数会接收到两个参数：newHash 和 oldHash，当前的 hash 值和旧的 hash 值。\n  注意，newHash 和 oldHash 都去掉了 '#' 号而直接保留 hash 值。\n  如果 oldHash 不存在，则为 null。\n  分支函数内部的 this 指向监听的窗口。", "type": "Object", "name": "routes", "isOptional": false, "defaultValue": "" }] }], "comment": { "tagTexts": ["desc 当前运行窗口的 Url 工具类", "namespace\n"], "src": "\n@desc 当前运行窗口的 Url 工具类\n@namespace\n", "meta": "", "tags": [{ "title": "desc", "desc": "当前运行窗口的 Url 工具类", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "namespace", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Url", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\current\\Url.js", "exceptions": [], "isa": "OBJECT", "_name": "Current", "_params": [{ "title": "param", "desc": "", "type": "", "name": "Url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "window", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "location", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "scopeType": "INSTANCE", "properties": [], "name": "Current", "params": [{ "title": "param", "desc": "", "type": "", "name": "Url", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "window", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "location", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": true, "augments": [], "fires": [], "desc": "XMLHttpRequest 类工具", "alias": "MiniQuery.Xhr", "id": 1478, "isStatic": true, "see": [], "methods": [{ "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "跨浏览器创建一个 XMLHttpRequest 对象。\n由于内存原因，不建议重用创建出来的 xhr 对象。", "alias": "MiniQuery.Xhr.create", "id": 1480, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 跨浏览器创建一个 XMLHttpRequest 对象。\n由于内存原因，不建议重用创建出来的 xhr 对象。\n    "], "src": "\n@desc 跨浏览器创建一个 XMLHttpRequest 对象。\n由于内存原因，不建议重用创建出来的 xhr 对象。\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "跨浏览器创建一个 XMLHttpRequest 对象。\n由于内存原因，不建议重用创建出来的 xhr 对象。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Xhr", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\Xhr.js", "exceptions": [], "isa": "FUNCTION", "_name": "create", "_params": [], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "properties": [], "name": "create", "params": [] }], "comment": { "tagTexts": ["desc XMLHttpRequest 类工具", "namespace\n"], "src": "\n@desc XMLHttpRequest 类工具\n@namespace\n", "meta": "", "tags": [{ "title": "desc", "desc": "XMLHttpRequest 类工具", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "namespace", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\Xhr.js", "exceptions": [], "isa": "OBJECT", "_name": "Xhr", "_params": [{ "title": "param", "desc": "", "type": "", "name": "$", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "This", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "scopeType": "INSTANCE", "properties": [], "name": "Xhr", "params": [{ "title": "param", "desc": "", "type": "", "name": "$", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "This", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": true, "augments": [], "fires": [], "desc": "XML 工具类", "alias": "MiniQuery.Xml", "id": 1492, "isStatic": true, "see": [], "methods": [{ "type": "XMLDocument", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "跨浏览器解析 XML 数据(字符串)或者一个等价结构的 Object 对象成一个 XMLDocument 对象。", "alias": "MiniQuery.Xml.parse", "id": 1525, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 跨浏览器解析 XML 数据(字符串)或者一个等价结构的 Object 对象成一个 XMLDocument 对象。", "param {string|Object} data 要进行解析的 XML 数据，可以为字符串或等价结构的对象。", "return {XMLDocument} 返回一个 XMLDocument 对象。", "example\n        <xmp>\n        var data =\n            '<Person num=\"2\" code=\"0\"> \\\n                <user id=\"1\" name=\"micty\" age=\"28\"> \\\n                    <book id=\"1\" name=\"C++\" price=\"100\"></book> \\\n                    <book id=\"2\" name=\"C#.NET\" price=\"256\"></book> \\\n                    <book id=\"3\" name=\"JavaScript\" price=\"218\"></book> \\\n                </user> \\\n                <user id=\"2\" name=\"solomon\" age=\"25\"> \\\n                    <book id=\"1\" name=\"CPP\" price=\"100\"></book> \\\n                    <book id=\"2\" name=\"Linux\" price=\"156\"></book> \\\n                </user> \\\n            </Person>';\n        var xmldoc = $.XML.parse(data);\n        console.dir(xmldoc);\n        </xmp>\n    "], "src": "\n@desc 跨浏览器解析 XML 数据(字符串)或者一个等价结构的 Object 对象成一个 XMLDocument 对象。\n@param {string|Object} data 要进行解析的 XML 数据，可以为字符串或等价结构的对象。\n@return {XMLDocument} 返回一个 XMLDocument 对象。\n@example\n        <xmp>\n        var data =\n            '<Person num=\"2\" code=\"0\"> \\\n                <user id=\"1\" name=\"micty\" age=\"28\"> \\\n                    <book id=\"1\" name=\"C++\" price=\"100\"></book> \\\n                    <book id=\"2\" name=\"C#.NET\" price=\"256\"></book> \\\n                    <book id=\"3\" name=\"JavaScript\" price=\"218\"></book> \\\n                </user> \\\n                <user id=\"2\" name=\"solomon\" age=\"25\"> \\\n                    <book id=\"1\" name=\"CPP\" price=\"100\"></book> \\\n                    <book id=\"2\" name=\"Linux\" price=\"156\"></book> \\\n                </user> \\\n            </Person>';\n        var xmldoc = $.XML.parse(data);\n        console.dir(xmldoc);\n        </xmp>\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "跨浏览器解析 XML 数据(字符串)或者一个等价结构的 Object 对象成一个 XMLDocument 对象。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行解析的 XML 数据，可以为字符串或等价结构的对象。", "type": "string|Object", "name": "data", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个 XMLDocument 对象。", "type": "XMLDocument", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        <xmp>\n        var data =\n            '<Person num=\"2\" code=\"0\"> \\\n                <user id=\"1\" name=\"micty\" age=\"28\"> \\\n                    <book id=\"1\" name=\"C++\" price=\"100\"></book> \\\n                    <book id=\"2\" name=\"C#.NET\" price=\"256\"></book> \\\n                    <book id=\"3\" name=\"JavaScript\" price=\"218\"></book> \\\n                </user> \\\n                <user id=\"2\" name=\"solomon\" age=\"25\"> \\\n                    <book id=\"1\" name=\"CPP\" price=\"100\"></book> \\\n                    <book id=\"2\" name=\"Linux\" price=\"156\"></book> \\\n                </user> \\\n            </Person>';\n        var xmldoc = $.XML.parse(data);\n        console.dir(xmldoc);\n        </xmp>", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Xml", "since": "", "returns": [{ "title": "return", "desc": "返回一个 XMLDocument 对象。", "type": "XMLDocument", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\Xml.js", "exceptions": [], "isa": "FUNCTION", "_name": "parse", "_params": [{ "title": "param", "desc": "要进行解析的 XML 数据，可以为字符串或等价结构的对象。", "type": "string|Object", "name": "data", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        <xmp>\n        var data =\n            '<Person num=\"2\" code=\"0\"> \\\n                <user id=\"1\" name=\"micty\" age=\"28\"> \\\n                    <book id=\"1\" name=\"C++\" price=\"100\"></book> \\\n                    <book id=\"2\" name=\"C#.NET\" price=\"256\"></book> \\\n                    <book id=\"3\" name=\"JavaScript\" price=\"218\"></book> \\\n                </user> \\\n                <user id=\"2\" name=\"solomon\" age=\"25\"> \\\n                    <book id=\"1\" name=\"CPP\" price=\"100\"></book> \\\n                    <book id=\"2\" name=\"Linux\" price=\"156\"></book> \\\n                </user> \\\n            </Person>';\n        var xmldoc = $.XML.parse(data);\n        console.dir(xmldoc);\n        </xmp>", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "parse", "params": [{ "title": "param", "desc": "要进行解析的 XML 数据，可以为字符串或等价结构的对象。", "type": "string|Object", "name": "data", "isOptional": false, "defaultValue": "" }] }, { "type": "", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把一个 XMLDocument 对象或一个 XML 节点或一个 Object 对象解析成等价的 XML 字符串。", "alias": "MiniQuery.Xml.toString", "id": 1529, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 把一个 XMLDocument 对象或一个 XML 节点或一个 Object 对象解析成等价的 XML 字符串。", "param {Object} obj 要进行解析的对象。<br />\n注意：<br />\n  传入的 Object 对象中，简单属性表示该节点自身的属性；<br />\n  数组表示该节点的子节点集合；<br />\n  属性值只能是 string、number、boolean 三种值类型。", "return 返回一个 XML 字符串。", "example\n        var obj = {\n            Person: {\n                num: \"2\", code: \"0\",\n                user: [\n                    {\n                        id: \"1\", name: \"micty\", age: \"28\",\n                        book: [\n                            { id: \"1\", name: \"C++\", price: \"100\" },\n                            { id: \"2\", name: \"C#.NET\", price: \"256\" },\n                            { id: \"3\", name: \"JavaScript\", price: \"218\" }\n                        ]\n                    },\n                    {\n                        id: \"2\", name: \"solomon\", age: \"25\",\n                        book: [\n                            { id: \"1\", name: \"CPP\", price: \"100\" },\n                            { id: \"2\", name: \"Linux\", price: \"156\" }\n                        ]\n                    }\n                ]\n            }\n        };\n        var xml = $.XML.toString(obj);\n        console.log(xml);\n    得到：<xmp>\n        xml = '\n            <Person num=\"2\" code=\"0\"> \\\n                <user id=\"1\" name=\"micty\" age=\"28\"> \\\n                    <book id=\"1\" name=\"C++\" price=\"100\"></book> \\\n                    <book id=\"2\" name=\"C#.NET\" price=\"256\"></book> \\\n                    <book id=\"3\" name=\"JavaScript\" price=\"218\"></book> \\\n                </user> \\\n                    <user id=\"2\" name=\"solomon\" age=\"25\"> \\\n                    <book id=\"1\" name=\"CPP\" price=\"100\"></book> \\\n                    <book id=\"2\" name=\"Linux\" price=\"156\"></book> \\\n                </user> \\\n            </Person>'     </xmp>\n    "], "src": "\n@desc 把一个 XMLDocument 对象或一个 XML 节点或一个 Object 对象解析成等价的 XML 字符串。\n@param {Object} obj 要进行解析的对象。<br />\n注意：<br />\n  传入的 Object 对象中，简单属性表示该节点自身的属性；<br />\n  数组表示该节点的子节点集合；<br />\n  属性值只能是 string、number、boolean 三种值类型。\n@return 返回一个 XML 字符串。\n@example\n        var obj = {\n            Person: {\n                num: \"2\", code: \"0\",\n                user: [\n                    {\n                        id: \"1\", name: \"micty\", age: \"28\",\n                        book: [\n                            { id: \"1\", name: \"C++\", price: \"100\" },\n                            { id: \"2\", name: \"C#.NET\", price: \"256\" },\n                            { id: \"3\", name: \"JavaScript\", price: \"218\" }\n                        ]\n                    },\n                    {\n                        id: \"2\", name: \"solomon\", age: \"25\",\n                        book: [\n                            { id: \"1\", name: \"CPP\", price: \"100\" },\n                            { id: \"2\", name: \"Linux\", price: \"156\" }\n                        ]\n                    }\n                ]\n            }\n        };\n        var xml = $.XML.toString(obj);\n        console.log(xml);\n    得到：<xmp>\n        xml = '\n            <Person num=\"2\" code=\"0\"> \\\n                <user id=\"1\" name=\"micty\" age=\"28\"> \\\n                    <book id=\"1\" name=\"C++\" price=\"100\"></book> \\\n                    <book id=\"2\" name=\"C#.NET\" price=\"256\"></book> \\\n                    <book id=\"3\" name=\"JavaScript\" price=\"218\"></book> \\\n                </user> \\\n                    <user id=\"2\" name=\"solomon\" age=\"25\"> \\\n                    <book id=\"1\" name=\"CPP\" price=\"100\"></book> \\\n                    <book id=\"2\" name=\"Linux\" price=\"156\"></book> \\\n                </user> \\\n            </Person>'     </xmp>\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把一个 XMLDocument 对象或一个 XML 节点或一个 Object 对象解析成等价的 XML 字符串。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行解析的对象。<br />\n注意：<br />\n  传入的 Object 对象中，简单属性表示该节点自身的属性；<br />\n  数组表示该节点的子节点集合；<br />\n  属性值只能是 string、number、boolean 三种值类型。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个 XML 字符串。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n        var obj = {\n            Person: {\n                num: \"2\", code: \"0\",\n                user: [\n                    {\n                        id: \"1\", name: \"micty\", age: \"28\",\n                        book: [\n                            { id: \"1\", name: \"C++\", price: \"100\" },\n                            { id: \"2\", name: \"C#.NET\", price: \"256\" },\n                            { id: \"3\", name: \"JavaScript\", price: \"218\" }\n                        ]\n                    },\n                    {\n                        id: \"2\", name: \"solomon\", age: \"25\",\n                        book: [\n                            { id: \"1\", name: \"CPP\", price: \"100\" },\n                            { id: \"2\", name: \"Linux\", price: \"156\" }\n                        ]\n                    }\n                ]\n            }\n        };\n        var xml = $.XML.toString(obj);\n        console.log(xml);\n    得到：<xmp>\n        xml = '\n            <Person num=\"2\" code=\"0\"> \\\n                <user id=\"1\" name=\"micty\" age=\"28\"> \\\n                    <book id=\"1\" name=\"C++\" price=\"100\"></book> \\\n                    <book id=\"2\" name=\"C#.NET\" price=\"256\"></book> \\\n                    <book id=\"3\" name=\"JavaScript\" price=\"218\"></book> \\\n                </user> \\\n                    <user id=\"2\" name=\"solomon\" age=\"25\"> \\\n                    <book id=\"1\" name=\"CPP\" price=\"100\"></book> \\\n                    <book id=\"2\" name=\"Linux\" price=\"156\"></book> \\\n                </user> \\\n            </Person>'     </xmp>", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Xml", "since": "", "returns": [{ "title": "return", "desc": "返回一个 XML 字符串。", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\Xml.js", "exceptions": [], "isa": "FUNCTION", "_name": "toString", "_params": [{ "title": "param", "desc": "要进行解析的对象。<br />\n注意：<br />\n  传入的 Object 对象中，简单属性表示该节点自身的属性；<br />\n  数组表示该节点的子节点集合；<br />\n  属性值只能是 string、number、boolean 三种值类型。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n        var obj = {\n            Person: {\n                num: \"2\", code: \"0\",\n                user: [\n                    {\n                        id: \"1\", name: \"micty\", age: \"28\",\n                        book: [\n                            { id: \"1\", name: \"C++\", price: \"100\" },\n                            { id: \"2\", name: \"C#.NET\", price: \"256\" },\n                            { id: \"3\", name: \"JavaScript\", price: \"218\" }\n                        ]\n                    },\n                    {\n                        id: \"2\", name: \"solomon\", age: \"25\",\n                        book: [\n                            { id: \"1\", name: \"CPP\", price: \"100\" },\n                            { id: \"2\", name: \"Linux\", price: \"156\" }\n                        ]\n                    }\n                ]\n            }\n        };\n        var xml = $.XML.toString(obj);\n        console.log(xml);\n    得到：<xmp>\n        xml = '\n            <Person num=\"2\" code=\"0\"> \\\n                <user id=\"1\" name=\"micty\" age=\"28\"> \\\n                    <book id=\"1\" name=\"C++\" price=\"100\"></book> \\\n                    <book id=\"2\" name=\"C#.NET\" price=\"256\"></book> \\\n                    <book id=\"3\" name=\"JavaScript\" price=\"218\"></book> \\\n                </user> \\\n                    <user id=\"2\" name=\"solomon\" age=\"25\"> \\\n                    <book id=\"1\" name=\"CPP\" price=\"100\"></book> \\\n                    <book id=\"2\" name=\"Linux\" price=\"156\"></book> \\\n                </user> \\\n            </Person>'     </xmp>", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "toString", "params": [{ "title": "param", "desc": "要进行解析的对象。<br />\n注意：<br />\n  传入的 Object 对象中，简单属性表示该节点自身的属性；<br />\n  数组表示该节点的子节点集合；<br />\n  属性值只能是 string、number、boolean 三种值类型。", "type": "Object", "name": "obj", "isOptional": false, "defaultValue": "" }] }, { "type": "Object", "inheritsFrom": [], "addOn": "", "$args": {  }, "version": "", "isConstant": false, "isInner": false, "isNamespace": false, "augments": [], "fires": [], "desc": "把一个 XML 字符串或 XMLDocument 对象或 XML 节点解析成等价结构的 Object 对象", "alias": "MiniQuery.Xml.toObject", "id": 1531, "isStatic": true, "see": [], "methods": [], "comment": { "tagTexts": ["desc 把一个 XML 字符串或 XMLDocument 对象或 XML 节点解析成等价结构的 Object 对象", "param {string|XMLDocument|XMLNode} node \n        要进行解析的 XML 字符串或 XMLDocument 对象或 XML 节点。<br />\n        注意：表示 XML 节点中的属性名不能跟直接子节点中的任何一个节点名相同。", "param {boolean} deep \n        指示是否对节点值中进一步按查询字符串的解析成等价的对象。<br />\n        如 \"a=1&b=2&c=A%3D100%26B%3D200\" 会被解析成对象 {a:1, b:2, c:{A:100, B:200}}", "return {Object} 返回一个等价的对象。<br />\n        返回的 Object 对象中，属性表示该节点自身的属性；数组表示该节点的子节点集合。", "example\n    <xmp>\n        var xml = '\n            <Person num=\"2\" code=\"0\"> \\\n                <user id=\"1\" name=\"micty\" age=\"28\"> \\\n                    <book id=\"1\" name=\"C++\" price=\"100\"></book> \\\n                    <book id=\"2\" name=\"C#.NET\" price=\"256\"></book> \\\n                    <book id=\"3\" name=\"JavaScript\" price=\"218\"></book> \\\n                </user> \\\n                    <user id=\"2\" name=\"solomon\" age=\"25\"> \\\n                    <book id=\"1\" name=\"CPP\" price=\"100\"></book> \\\n                    <book id=\"2\" name=\"Linux\" price=\"156\"></book> \\\n                </user> \\\n            </Person>';\n    </xmp>\n        var obj = $.XML.toObject(xml); \n    得到：\n        obj = {\n            Person: {\n                num: \"2\", code: \"0\",\n                user: [\n                {\n                    id: \"1\", name: \"micty\", age: \"28\",\n                    book: [\n                        { id: \"1\", name: \"C++\", price: \"100\" },\n                        { id: \"2\", name: \"C#.NET\", price: \"256\" },\n                        { id: \"3\", name: \"JavaScript\", price: \"218\" }\n                    ]\n                },\n                {\n                    id: \"2\", name: \"solomon\", age: \"25\",\n                    book: [\n                        { id: \"1\", name: \"CPP\", price: \"100\" },\n                        { id: \"2\", name: \"Linux\", price: \"156\" }\n                    ]\n                }]\n            }\n        };\n    "], "src": "\n@desc 把一个 XML 字符串或 XMLDocument 对象或 XML 节点解析成等价结构的 Object 对象\n@param {string|XMLDocument|XMLNode} node \n        要进行解析的 XML 字符串或 XMLDocument 对象或 XML 节点。<br />\n        注意：表示 XML 节点中的属性名不能跟直接子节点中的任何一个节点名相同。\n@param {boolean} deep \n        指示是否对节点值中进一步按查询字符串的解析成等价的对象。<br />\n        如 \"a=1&b=2&c=A%3D100%26B%3D200\" 会被解析成对象 {a:1, b:2, c:{A:100, B:200}}\n@return {Object} 返回一个等价的对象。<br />\n        返回的 Object 对象中，属性表示该节点自身的属性；数组表示该节点的子节点集合。\n@example\n    <xmp>\n        var xml = '\n            <Person num=\"2\" code=\"0\"> \\\n                <user id=\"1\" name=\"micty\" age=\"28\"> \\\n                    <book id=\"1\" name=\"C++\" price=\"100\"></book> \\\n                    <book id=\"2\" name=\"C#.NET\" price=\"256\"></book> \\\n                    <book id=\"3\" name=\"JavaScript\" price=\"218\"></book> \\\n                </user> \\\n                    <user id=\"2\" name=\"solomon\" age=\"25\"> \\\n                    <book id=\"1\" name=\"CPP\" price=\"100\"></book> \\\n                    <book id=\"2\" name=\"Linux\" price=\"156\"></book> \\\n                </user> \\\n            </Person>';\n    </xmp>\n        var obj = $.XML.toObject(xml); \n    得到：\n        obj = {\n            Person: {\n                num: \"2\", code: \"0\",\n                user: [\n                {\n                    id: \"1\", name: \"micty\", age: \"28\",\n                    book: [\n                        { id: \"1\", name: \"C++\", price: \"100\" },\n                        { id: \"2\", name: \"C#.NET\", price: \"256\" },\n                        { id: \"3\", name: \"JavaScript\", price: \"218\" }\n                    ]\n                },\n                {\n                    id: \"2\", name: \"solomon\", age: \"25\",\n                    book: [\n                        { id: \"1\", name: \"CPP\", price: \"100\" },\n                        { id: \"2\", name: \"Linux\", price: \"156\" }\n                    ]\n                }]\n            }\n        };\n    ", "meta": "", "tags": [{ "title": "desc", "desc": "把一个 XML 字符串或 XMLDocument 对象或 XML 节点解析成等价结构的 Object 对象", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "要进行解析的 XML 字符串或 XMLDocument 对象或 XML 节点。<br />\n        注意：表示 XML 节点中的属性名不能跟直接子节点中的任何一个节点名相同。", "type": "string|XMLDocument|XMLNode", "name": "node", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否对节点值中进一步按查询字符串的解析成等价的对象。<br />\n        如 \"a=1&b=2&c=A%3D100%26B%3D200\" 会被解析成对象 {a:1, b:2, c:{A:100, B:200}}", "type": "boolean", "name": "deep", "isOptional": false, "defaultValue": "" }, { "title": "return", "desc": "返回一个等价的对象。<br />\n        返回的 Object 对象中，属性表示该节点自身的属性；数组表示该节点的子节点集合。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "example", "desc": "\n    <xmp>\n        var xml = '\n            <Person num=\"2\" code=\"0\"> \\\n                <user id=\"1\" name=\"micty\" age=\"28\"> \\\n                    <book id=\"1\" name=\"C++\" price=\"100\"></book> \\\n                    <book id=\"2\" name=\"C#.NET\" price=\"256\"></book> \\\n                    <book id=\"3\" name=\"JavaScript\" price=\"218\"></book> \\\n                </user> \\\n                    <user id=\"2\" name=\"solomon\" age=\"25\"> \\\n                    <book id=\"1\" name=\"CPP\" price=\"100\"></book> \\\n                    <book id=\"2\" name=\"Linux\" price=\"156\"></book> \\\n                </user> \\\n            </Person>';\n    </xmp>\n        var obj = $.XML.toObject(xml); \n    得到：\n        obj = {\n            Person: {\n                num: \"2\", code: \"0\",\n                user: [\n                {\n                    id: \"1\", name: \"micty\", age: \"28\",\n                    book: [\n                        { id: \"1\", name: \"C++\", price: \"100\" },\n                        { id: \"2\", name: \"C#.NET\", price: \"256\" },\n                        { id: \"3\", name: \"JavaScript\", price: \"218\" }\n                    ]\n                },\n                {\n                    id: \"2\", name: \"solomon\", age: \"25\",\n                    book: [\n                        { id: \"1\", name: \"CPP\", price: \"100\" },\n                        { id: \"2\", name: \"Linux\", price: \"156\" }\n                    ]\n                }]\n            }\n        };", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery.Xml", "since": "", "returns": [{ "title": "return", "desc": "返回一个等价的对象。<br />\n        返回的 Object 对象中，属性表示该节点自身的属性；数组表示该节点的子节点集合。", "type": "Object", "name": "", "isOptional": false, "defaultValue": "" }], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\Xml.js", "exceptions": [], "isa": "FUNCTION", "_name": "toObject", "_params": [{ "title": "param", "desc": "要进行解析的 XML 字符串或 XMLDocument 对象或 XML 节点。<br />\n        注意：表示 XML 节点中的属性名不能跟直接子节点中的任何一个节点名相同。", "type": "string|XMLDocument|XMLNode", "name": "node", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否对节点值中进一步按查询字符串的解析成等价的对象。<br />\n        如 \"a=1&b=2&c=A%3D100%26B%3D200\" 会被解析成对象 {a:1, b:2, c:{A:100, B:200}}", "type": "boolean", "name": "deep", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [{ "title": "example", "desc": "\n    <xmp>\n        var xml = '\n            <Person num=\"2\" code=\"0\"> \\\n                <user id=\"1\" name=\"micty\" age=\"28\"> \\\n                    <book id=\"1\" name=\"C++\" price=\"100\"></book> \\\n                    <book id=\"2\" name=\"C#.NET\" price=\"256\"></book> \\\n                    <book id=\"3\" name=\"JavaScript\" price=\"218\"></book> \\\n                </user> \\\n                    <user id=\"2\" name=\"solomon\" age=\"25\"> \\\n                    <book id=\"1\" name=\"CPP\" price=\"100\"></book> \\\n                    <book id=\"2\" name=\"Linux\" price=\"156\"></book> \\\n                </user> \\\n            </Person>';\n    </xmp>\n        var obj = $.XML.toObject(xml); \n    得到：\n        obj = {\n            Person: {\n                num: \"2\", code: \"0\",\n                user: [\n                {\n                    id: \"1\", name: \"micty\", age: \"28\",\n                    book: [\n                        { id: \"1\", name: \"C++\", price: \"100\" },\n                        { id: \"2\", name: \"C#.NET\", price: \"256\" },\n                        { id: \"3\", name: \"JavaScript\", price: \"218\" }\n                    ]\n                },\n                {\n                    id: \"2\", name: \"solomon\", age: \"25\",\n                    book: [\n                        { id: \"1\", name: \"CPP\", price: \"100\" },\n                        { id: \"2\", name: \"Linux\", price: \"156\" }\n                    ]\n                }]\n            }\n        };", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "properties": [], "name": "toObject", "params": [{ "title": "param", "desc": "要进行解析的 XML 字符串或 XMLDocument 对象或 XML 节点。<br />\n        注意：表示 XML 节点中的属性名不能跟直接子节点中的任何一个节点名相同。", "type": "string|XMLDocument|XMLNode", "name": "node", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "指示是否对节点值中进一步按查询字符串的解析成等价的对象。<br />\n        如 \"a=1&b=2&c=A%3D100%26B%3D200\" 会被解析成对象 {a:1, b:2, c:{A:100, B:200}}", "type": "boolean", "name": "deep", "isOptional": false, "defaultValue": "" }] }], "comment": { "tagTexts": ["desc XML 工具类", "namespace\n"], "src": "\n@desc XML 工具类\n@namespace\n", "meta": "", "tags": [{ "title": "desc", "desc": "XML 工具类", "type": "", "name": "", "isOptional": false, "defaultValue": "" }, { "title": "namespace", "desc": "", "type": "", "name": "", "isOptional": false, "defaultValue": "" }], "isUserComment": true }, "memberOf": "MiniQuery", "since": "", "returns": [], "classDesc": "", "isEvent": false, "isIgnored": false, "isPrivate": false, "defaultValue": undefined, "srcFile": "..\\..\\build\\src\\browser\\Xml.js", "exceptions": [], "isa": "OBJECT", "_name": "Xml", "_params": [{ "title": "param", "desc": "", "type": "", "name": "$", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "This", "isOptional": false, "defaultValue": "" }], "deprecated": "", "requires": [], "author": "", "inherits": [], "example": [], "scopeType": "INSTANCE", "properties": [], "name": "Xml", "params": [{ "title": "param", "desc": "", "type": "", "name": "$", "isOptional": false, "defaultValue": "" }, { "title": "param", "desc": "", "type": "", "name": "This", "isOptional": false, "defaultValue": "" }] }]